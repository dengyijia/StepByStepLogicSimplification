(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    961307,      20249]
NotebookOptionsPosition[    945306,      19977]
NotebookOutlinePosition[    946113,      20004]
CellTagsIndexPosition[    946070,      20001]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Short Step-by-step Solution of Boolean Algebra", "Title",
 CellChangeTimes->{{3.770055572438499*^9, 3.7700555729498453`*^9}, {
   3.770055604008165*^9, 3.7700556066618843`*^9}, {3.7712448651336327`*^9, 
   3.771244885215207*^9}, {3.7712532631728354`*^9, 3.7712532954428167`*^9}, {
   3.771253343342333*^9, 3.771253346412752*^9}, {3.771262114298338*^9, 
   3.7712621214202003`*^9}, {3.771262378018642*^9, 3.7712623864867163`*^9}, {
   3.7716247220417643`*^9, 3.7716247573425827`*^9}, 
   3.771627103627934*^9},ExpressionUUID->"f8275726-ce31-4658-aec7-\
94c331bd7f8b"],

Cell[TextData[StyleBox["Adela Deng",
 FontSize->20,
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.549624168509506*^9, 3.549624171985794*^9}, {
  3.549624508772977*^9, 3.549624510775043*^9}, {3.5498187159613867`*^9, 
  3.5498187170087957`*^9}, {3.549819049020514*^9, 3.5498190533440437`*^9}, {
  3.77005561844785*^9, 3.7700556489651537`*^9}, {3.7711847935961323`*^9, 
  3.771184795946701*^9}},ExpressionUUID->"0a3c56b6-92eb-4206-93ec-\
35a921c92175"],

Cell[TextData[StyleBox["Jonathan Gorard",
 FontSize->20,
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.549624515773694*^9, 3.5496245246892014`*^9}, {
  3.5498187208956137`*^9, 3.5498187221413403`*^9}, {3.5498190558319674`*^9, 
  3.54981906151682*^9}, {3.770055624686027*^9, 3.770055659820487*^9}, {
  3.771253646015205*^9, 
  3.771253651081505*^9}},ExpressionUUID->"96ace16e-bf11-4983-9008-\
01ffb7d1155d"],

Cell[TextData[StyleBox["With the equational theorem proving framework in \
Wolfram Language, it is easy to check the correctness of a theorem with a \
machine-generated proof. However, such proofs almost always involve extremely \
lengthy and convoluted lemmas that are incomprehensible for human readers. In \
my project, I implemented a set of functions that can provide a step-by-step \
reduction of Boolean algebra expressions. The functions recursively apply \
heuristic rules to expressions until they reach normal form. Moreover, the \
functions can return the shortest reduction between any two equivalent \
Boolean algebra expressions by a dynamic version of \
Dijkstra\[CloseCurlyQuote]s algorithm.",
 FontSize->22,
 FontColor->GrayLevel[0.5]]], "Text",
 CellChangeTimes->{{3.771624780301013*^9, 3.771624794334638*^9}, {
  3.771624841543466*^9, 3.771625049689518*^9}, {3.771625111191333*^9, 
  3.771625293289363*^9}},ExpressionUUID->"b1ec7ad5-2a4a-423e-9ad2-\
607bde4d7538"],

Cell[CellGroupData[{

Cell["What can my functions do", "Chapter",
 CellChangeTimes->{{3.7716257715559683`*^9, 
  3.771625840990777*^9}},ExpressionUUID->"9cdbfec4-e189-4622-b05f-\
3d5877279f4f"],

Cell[TextData[StyleBox["Given an arbitrary Boolean expression, I can give a \
step-by-step reduction of it to normal form.",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
  3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
  3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
  3.7716269406201468`*^9, 3.771626949020691*^9}, {3.7716269975032053`*^9, 
  3.771627038076303*^9}, {3.771627087817396*^9, 3.771627124734457*^9}, {
  3.7716272520908003`*^9, 
  3.7716272528682823`*^9}},ExpressionUUID->"27bf72b9-0d8f-4827-84c9-\
0704b4064883"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  InterpretationBox[
   DynamicModuleBox[{Typeset`open = False}, 
    TemplateBox[{"Expression",RowBox[{"generateProofNotebook", "[", 
        DynamicBox[
         FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], "]"}],
      GridBox[{{
         RowBox[{
           TagBox["\"Byte count: \"", "IconizedLabel"], "\[InvisibleSpace]", 
           TagBox["256", "IconizedItem"]}]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],Dynamic[
      Typeset`open]},
     "IconizedObject"]],
   $CellContext`generateProofNotebook[
    $CellContext`reduceList[$CellContext`DNF][
     $CellContext`and[
      $CellContext`or[$CellContext`a, $CellContext`b], $CellContext`b]]],
   SelectWithContents->True,
   Selectable->False],
  FontSize->18]], "Input",
 CellChangeTimes->{{3.771627130348523*^9, 3.771627130428368*^9}, {
   3.77162718831996*^9, 3.771627197815321*^9}, {3.771767402451571*^9, 
   3.7717675246647177`*^9}, {3.771767563104566*^9, 3.7717675764379177`*^9}, 
   3.771767634482045*^9, 3.7717682228764963`*^9, {3.771768255154141*^9, 
   3.771768257898078*^9}, 3.771778405503407*^9, 3.7717794279569483`*^9},
 TextAlignment->Center,
 CellLabel->
  "In[198]:=",ExpressionUUID->"532ce300-9924-4d5f-ba51-2ce7a2fc5195"],

Cell[BoxData[
 InterpretationBox[
  PanelBox[GridBox[{
     {
      TooltipBox[
       ButtonBox[
        StyleBox[
         DynamicBox[FEPrivate`FrontEndResource[
          "FEBitmaps", "ManipulatePasteIcon"],
          ImageSizeCache->{13., {4., 9.}}],
         DynamicUpdating->True],
        Appearance->{Automatic, None, "Normal", Automatic},
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookPut[
            Notebook[{
              Cell["We want to reduce the expression:"], 
              Cell[
               BoxData[
                RowBox[{"b", "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "b"}], ")"}]}]], "Input"], 
              Cell["By Distributive rule, we can expand the terms"], 
              Cell[
               BoxData[
                RowBox[{
                  FrameBox["b", StripOnInput -> False], "\[And]", 
                  FrameBox[
                   RowBox[{"a", "\[Or]", "b"}], StripOnInput -> False]}]], 
               "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"a", "\[And]", "b"}], ")"}], "\[Or]", 
                  RowBox[{"(", 
                    RowBox[{"b", "\[And]", "b"}], ")"}]}]], "Input"], 
              Cell["By Idempotent rule, we can remove one of the duplicates"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"a", "\[And]", "b"}], ")"}], "\[Or]", 
                  RowBox[{"(", 
                    RowBox[{
                    FrameBox["b", StripOnInput -> False], "\[And]", 
                    FrameBox["b", StripOnInput -> False]}], ")"}]}]], 
               "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{"b", "\[Or]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[And]", "b"}], ")"}]}]], "Input"], 
              Cell["By Absorption rule, we can reduce the term"], 
              Cell[
               BoxData[
                RowBox[{
                  FrameBox["b", StripOnInput -> False], "\[Or]", 
                  FrameBox[
                   RowBox[{"a", "\[And]", "b"}], StripOnInput -> False]}]], 
               "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData["b"], "Input"]}]]}],
        DefaultBaseStyle->{},
        Evaluator->None,
        Method->"Queued"],
       DynamicBox[
        ToBoxes[
         FEPrivate`FrontEndResource["FEStrings", "NotebookInNewWindow"]]]]},
     {
      ItemBox[GridBox[{
         {Cell[
          "We want to reduce the expression:",ExpressionUUID->
           "ed103c31-1e0e-430c-83dd-8fa47290c6fa"]},
         {Cell[BoxData[
           RowBox[{"b", "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "b"}], ")"}]}]], "Input",ExpressionUUID->
           "dbe0eca8-fb6e-42f3-a8cc-1ba3cd457cef"]},
         {Cell[
          "By Distributive rule, we can expand the terms",ExpressionUUID->
           "afe611c8-8f00-4ee4-822e-86ac76b2c15b"]},
         {Cell[BoxData[
           RowBox[{
            FrameBox["b",
             StripOnInput->False], "\[And]", 
            FrameBox[
             RowBox[{"a", "\[Or]", "b"}],
             StripOnInput->False]}]], "Input",ExpressionUUID->
           "2ebffa72-ac51-48eb-88b6-53a818f7951d"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "8283791c-d07c-4f53-82d2-8d52aea39e8a"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"a", "\[And]", "b"}], ")"}], "\[Or]", 
            RowBox[{"(", 
             RowBox[{"b", "\[And]", "b"}], ")"}]}]], "Input",ExpressionUUID->
           "6f787083-0979-4e50-9c0d-da03dff687a6"]},
         {Cell[
          "By Idempotent rule, we can remove one of the duplicates",
           ExpressionUUID->"6695ee94-fbec-4589-99c4-77ee387bb47a"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"a", "\[And]", "b"}], ")"}], "\[Or]", 
            RowBox[{"(", 
             RowBox[{
              FrameBox["b",
               StripOnInput->False], "\[And]", 
              FrameBox["b",
               StripOnInput->False]}], ")"}]}]], "Input",ExpressionUUID->
           "13332295-9f43-4a90-be8b-05d8c42abba6"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "9163196d-dd70-4441-ba85-7c37f9dfc1aa"]},
         {Cell[BoxData[
           RowBox[{"b", "\[Or]", 
            RowBox[{"(", 
             RowBox[{"a", "\[And]", "b"}], ")"}]}]], "Input",ExpressionUUID->
           "eaab3179-56c7-45e3-954a-879dc3470ed0"]},
         {Cell[
          "By Absorption rule, we can reduce the term",ExpressionUUID->
           "59bcb886-577d-4a4b-9ae0-016be888c3d7"]},
         {Cell[BoxData[
           RowBox[{
            FrameBox["b",
             StripOnInput->False], "\[Or]", 
            FrameBox[
             RowBox[{"a", "\[And]", "b"}],
             StripOnInput->False]}]], "Input",ExpressionUUID->
           "6399c411-7bb5-4358-92ba-b39fb321089e"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "68768fc6-1e3f-40e6-9923-5fbc52b5a24f"]},
         {Cell[BoxData[
          "b"], "Input",ExpressionUUID->
           "3251c2dc-1d59-4877-9268-617b93e27032"]}
        },
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0, 0.2]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
   BaseStyle->{FontFamily -> "Times"},
   DefaultBaseStyle->{},
   FrameMargins->5],
  DocumentNotebook[{
    TextCell["We want to reduce the expression:"], 
    ExpressionCell[
     $CellContext`and[$CellContext`b, 
      $CellContext`or[$CellContext`a, $CellContext`b]], "Input"], 
    TextCell["By Distributive rule, we can expand the terms"], 
    ExpressionCell[
     $CellContext`and[
      Framed[$CellContext`b], 
      Framed[
       $CellContext`or[$CellContext`a, $CellContext`b]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`or[
      $CellContext`and[$CellContext`a, $CellContext`b], 
      $CellContext`and[$CellContext`b, $CellContext`b]], "Input"], 
    TextCell["By Idempotent rule, we can remove one of the duplicates"], 
    ExpressionCell[
     $CellContext`or[
      $CellContext`and[$CellContext`a, $CellContext`b], 
      $CellContext`and[
       Framed[$CellContext`b], 
       Framed[$CellContext`b]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`or[$CellContext`b, 
      $CellContext`and[$CellContext`a, $CellContext`b]], "Input"], 
    TextCell["By Absorption rule, we can reduce the term"], 
    ExpressionCell[
     $CellContext`or[
      Framed[$CellContext`b], 
      Framed[
       $CellContext`and[$CellContext`a, $CellContext`b]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[$CellContext`b, "Input"]}]]], "Output",
 CellChangeTimes->{{3.77176750899452*^9, 3.7717675250409517`*^9}, 
   3.771767576964217*^9, 3.771767644209477*^9, {3.771768228861792*^9, 
   3.771768258293461*^9}, 3.771779429187955*^9},
 TextAlignment->Center,
 CellLabel->
  "Out[198]=",ExpressionUUID->"a8ec921c-e9cd-4803-8926-ba6679e9e830"]
}, Open  ]],

Cell[TextData[StyleBox["I can give a shortest step-by-step reduction.",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
  3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
  3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
  3.7716269406201468`*^9, 3.771626949020691*^9}, {3.771627231584917*^9, 
  3.771627299970025*^9}},ExpressionUUID->"644fdaec-02ca-4552-827b-\
99a1da46560f"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{Typeset`open = False}, 
   TemplateBox[{"Expression",RowBox[{"generateProofNotebook", "[", 
       DynamicBox[
        FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], "]"}],
     GridBox[{{
        RowBox[{
          TagBox["\"Byte count: \"", "IconizedLabel"], "\[InvisibleSpace]", 
          TagBox["256", "IconizedItem"]}]}}, 
      GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
      "Column", 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],Dynamic[
     Typeset`open]},
    "IconizedObject"]],
  $CellContext`generateProofNotebook[
   $CellContext`reduceShortestList[$CellContext`DNF][
    $CellContext`and[
     $CellContext`or[$CellContext`a, $CellContext`b], $CellContext`b]]],
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{{3.771627130348523*^9, 3.771627130428368*^9}, {
   3.77162718831996*^9, 3.771627197815321*^9}, {3.771767402451571*^9, 
   3.771767543513414*^9}, {3.7717675868430643`*^9, 3.7717675871982203`*^9}, 
   3.771767642775264*^9, {3.771768266745944*^9, 3.771768272041883*^9}, 
   3.77177841682119*^9, 3.7717794375783873`*^9},
 TextAlignment->Center,
 FontSize->18,
 CellLabel->
  "In[199]:=",ExpressionUUID->"0e874c14-4ea4-42ad-94da-916f5d277231"],

Cell[BoxData[
 InterpretationBox[
  PanelBox[GridBox[{
     {
      TooltipBox[
       ButtonBox[
        StyleBox[
         DynamicBox[FEPrivate`FrontEndResource[
          "FEBitmaps", "ManipulatePasteIcon"],
          ImageSizeCache->{13., {4., 9.}}],
         DynamicUpdating->True],
        Appearance->{Automatic, None, "Normal", Automatic},
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookPut[
            Notebook[{
              Cell["We want to reduce the expression:"], 
              Cell[
               BoxData[
                RowBox[{"b", "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "b"}], ")"}]}]], "Input"], 
              Cell["By Absorption rule, we can reduce the term"], 
              Cell[
               BoxData[
                RowBox[{
                  FrameBox["b", StripOnInput -> False], "\[And]", 
                  FrameBox[
                   RowBox[{"a", "\[Or]", "b"}], StripOnInput -> False]}]], 
               "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData["b"], "Input"], 
              Cell["Now we have reached our target form"], 
              Cell[
               BoxData["b"], "Input"]}]]}],
        DefaultBaseStyle->{},
        Evaluator->None,
        Method->"Queued"],
       DynamicBox[
        ToBoxes[
         FEPrivate`FrontEndResource["FEStrings", "NotebookInNewWindow"]]]]},
     {
      ItemBox[GridBox[{
         {Cell[
          "We want to reduce the expression:",ExpressionUUID->
           "1709a0be-932f-4bba-91e6-5566544b24da"]},
         {Cell[BoxData[
           RowBox[{"b", "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "b"}], ")"}]}]], "Input",ExpressionUUID->
           "9a2550f3-bda1-48e0-a733-f3b36a801626"]},
         {Cell[
          "By Absorption rule, we can reduce the term",ExpressionUUID->
           "0eb4e7e5-bf3a-46a5-bcde-37a5bec15a26"]},
         {Cell[BoxData[
           RowBox[{
            FrameBox["b",
             StripOnInput->False], "\[And]", 
            FrameBox[
             RowBox[{"a", "\[Or]", "b"}],
             StripOnInput->False]}]], "Input",ExpressionUUID->
           "696168e1-3566-495c-8e28-7e2f2b0a150a"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "4a703d89-621c-4c1c-82fc-505ee9b455ce"]},
         {Cell[BoxData[
          "b"], "Input",ExpressionUUID->
           "12e7abbe-0811-4e28-b389-36bb0ebb9777"]},
         {Cell[
          "Now we have reached our target form",ExpressionUUID->
           "da49cca6-074c-484b-aa0f-0f8d6861809b"]},
         {Cell[BoxData[
          "b"], "Input",ExpressionUUID->
           "8bd2d2d9-cd15-447a-8327-f4fc11a21c47"]}
        },
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0, 0.2]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
   BaseStyle->{FontFamily -> "Times"},
   DefaultBaseStyle->{},
   FrameMargins->5],
  DocumentNotebook[{
    TextCell["We want to reduce the expression:"], 
    ExpressionCell[
     $CellContext`and[$CellContext`b, 
      $CellContext`or[$CellContext`a, $CellContext`b]], "Input"], 
    TextCell["By Absorption rule, we can reduce the term"], 
    ExpressionCell[
     $CellContext`and[
      Framed[$CellContext`b], 
      Framed[
       $CellContext`or[$CellContext`a, $CellContext`b]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[$CellContext`b, "Input"], 
    TextCell["Now we have reached our target form"], 
    ExpressionCell[$CellContext`b, "Input"]}]]], "Output",
 CellChangeTimes->{{3.7717675395087013`*^9, 3.771767544064774*^9}, 
   3.77176758769963*^9, 3.771767646343004*^9, 3.771768279888185*^9, 
   3.771779438972172*^9},
 TextAlignment->Center,
 CellLabel->
  "Out[199]=",ExpressionUUID->"d26f389a-fd6d-4e3e-bdbf-79b8a17e28ce"]
}, Open  ]],

Cell[TextData[StyleBox["I can convert an expression in conjunctive normal \
form (\[OpenCurlyDoubleQuote]and\[CloseCurlyDoubleQuote] of \
\[OpenCurlyDoubleQuote]or\[CloseCurlyDoubleQuote]) to disjunctive normal form \
(\[OpenCurlyDoubleQuote]or\[CloseCurlyDoubleQuote] of \
\[OpenCurlyDoubleQuote]and\[CloseCurlyDoubleQuote]), or the other way around:",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
   3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
   3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
   3.7716269406201468`*^9, 3.771626949020691*^9}, {3.771627231584917*^9, 
   3.771627332887401*^9}, {3.77162789638834*^9, 3.771627922432719*^9}, {
   3.77176812994203*^9, 3.77176819930031*^9}, {3.771768287739324*^9, 
   3.771768290694982*^9}, 3.771768485824123*^9, 
   3.771771301671022*^9},ExpressionUUID->"c669766c-db6e-43a5-a614-\
ee0f96b9cb25"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{Typeset`open = False}, 
   TemplateBox[{"Expression",RowBox[{
       RowBox[{"Map", "[", 
         DynamicBox[
          FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], "]"}], 
       "[", 
       DynamicBox[
        FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], "]"}],
     GridBox[{{
        RowBox[{
          TagBox["\"Byte count: \"", "IconizedLabel"], "\[InvisibleSpace]", 
          TagBox["928", "IconizedItem"]}]}}, 
      GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
      "Column", 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],Dynamic[
     Typeset`open]},
    "IconizedObject"]],
  Map[$CellContext`generateProofNotebook[#]& ][{
    $CellContext`reduceShortestList[$CellContext`CNF][
     $CellContext`or[
      $CellContext`and[$CellContext`a, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`and[
       $CellContext`not[$CellContext`b], $CellContext`c]]], 
    $CellContext`reduceShortestList[$CellContext`DNF][
     $CellContext`and[
      $CellContext`not[$CellContext`b], 
      $CellContext`or[$CellContext`a, $CellContext`c]]]}],
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{{3.7717683329827023`*^9, 3.7717684010279922`*^9}, {
   3.77177469992169*^9, 3.771774725163044*^9}, 3.771779449205592*^9, 
   3.771853494594624*^9, 3.771853564094799*^9},
 TextAlignment->Center,ExpressionUUID->"c1a6eb67-0a0e-4141-bb09-5a92663c1d83"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    PanelBox[GridBox[{
       {
        TooltipBox[
         ButtonBox[
          StyleBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "ManipulatePasteIcon"],
            ImageSizeCache->{13., {4., 9.}}],
           DynamicUpdating->True],
          Appearance->{Automatic, None, "Normal", Automatic},
          ButtonFunction:>FrontEndExecute[{
             FrontEnd`NotebookPut[
              Notebook[{
                Cell["We want to reduce the expression:"], 
                Cell[
                 BoxData[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
                Cell["By Distribution rule, we can reduce the term "], 
                Cell[
                 BoxData[
                  FrameBox[
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], StripOnInput -> 
                   False]], "Input"], 
                Cell["Then we get "], 
                Cell[
                 BoxData[
                  FrameBox[
                   RowBox[{
                    RowBox[{"\[Not]", "b", " "}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}]}], StripOnInput -> 
                   False]], "Input"], 
                Cell["Now we have reached our target form"], 
                Cell[
                 BoxData[
                  RowBox[{
                    RowBox[{"\[Not]", "b", " "}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}]}]], "Input"]}]]}],
          DefaultBaseStyle->{},
          Evaluator->None,
          Method->"Queued"],
         DynamicBox[
          ToBoxes[
           FEPrivate`FrontEndResource[
           "FEStrings", "NotebookInNewWindow"]]]]},
       {
        ItemBox[GridBox[{
           {Cell[
            "We want to reduce the expression:",ExpressionUUID->
             "5328a643-35af-4c89-b781-6732ae521de7"]},
           {Cell[BoxData[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"(", 
               RowBox[{"c", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
             ExpressionUUID->"15231ccb-57a3-43e1-9c37-8059d0e73c23"]},
           {Cell[
            "By Distribution rule, we can reduce the term ",ExpressionUUID->
             "e402f4d1-b478-4964-861a-225c7c2d5fe1"]},
           {Cell[BoxData[
             FrameBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "\[And]", 
                 RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[Or]", 
               RowBox[{"(", 
                RowBox[{"c", "\[And]", 
                 RowBox[{"\[Not]", "b"}]}], " ", ")"}]}],
              StripOnInput->False]], "Input",ExpressionUUID->
             "68f31c50-78bc-49c3-b180-18fcb4285f7e"]},
           {Cell[
            "Then we get ",ExpressionUUID->
             "cfd286ca-8425-4bda-8d4f-86140df39083"]},
           {Cell[BoxData[
             FrameBox[
              RowBox[{
               RowBox[{"\[Not]", "b"}], " ", "\[And]", 
               RowBox[{"(", 
                RowBox[{"a", "\[Or]", "c"}], ")"}]}],
              StripOnInput->False]], "Input",ExpressionUUID->
             "93ae8153-22d1-4a78-83e8-958deea429d4"]},
           {Cell[
            "Now we have reached our target form",ExpressionUUID->
             "d23de806-e538-4a71-ad3a-5e821297aff6"]},
           {Cell[BoxData[
             RowBox[{
              RowBox[{"\[Not]", "b"}], " ", "\[And]", 
              RowBox[{"(", 
               RowBox[{"a", "\[Or]", "c"}], ")"}]}]], "Input",ExpressionUUID->
             "41abc45c-0403-4e4e-a677-b216531859a6"]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         Background->GrayLevel[1],
         Frame->True,
         FrameStyle->GrayLevel[0, 0.2]]}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
     BaseStyle->{FontFamily -> "Times"},
     DefaultBaseStyle->{},
     FrameMargins->5],
    DocumentNotebook[{
      TextCell["We want to reduce the expression:"], 
      ExpressionCell[
       $CellContext`or[
        $CellContext`and[$CellContext`a, 
         $CellContext`not[$CellContext`b]], 
        $CellContext`and[$CellContext`c, 
         $CellContext`not[$CellContext`b]]], "Input"], 
      TextCell["By Distribution rule, we can reduce the term "], 
      ExpressionCell[
       Framed[
        $CellContext`or[
         $CellContext`and[$CellContext`a, 
          $CellContext`not[$CellContext`b]], 
         $CellContext`and[$CellContext`c, 
          $CellContext`not[$CellContext`b]]]], "Input"], 
      TextCell["Then we get "], 
      ExpressionCell[
       Framed[
        $CellContext`and[
         $CellContext`not[$CellContext`b], 
         $CellContext`or[$CellContext`a, $CellContext`c]]], "Input"], 
      TextCell["Now we have reached our target form"], 
      ExpressionCell[
       $CellContext`and[
        $CellContext`not[$CellContext`b], 
        $CellContext`or[$CellContext`a, $CellContext`c]], "Input"]}]], ",", 
   InterpretationBox[
    PanelBox[GridBox[{
       {
        TooltipBox[
         ButtonBox[
          StyleBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "ManipulatePasteIcon"],
            ImageSizeCache->{13., {4., 9.}}],
           DynamicUpdating->True],
          Appearance->{Automatic, None, "Normal", Automatic},
          ButtonFunction:>FrontEndExecute[{
             FrontEnd`NotebookPut[
              Notebook[{
                Cell["We want to reduce the expression:"], 
                Cell[
                 BoxData[
                  RowBox[{
                    RowBox[{"\[Not]", "b", " "}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}]}]], "Input"], 
                Cell["By Distributive rule, we can expand the terms"], 
                Cell[
                 BoxData[
                  RowBox[{
                    FrameBox[
                    RowBox[{"\[Not]", "b", " "}], StripOnInput -> False], 
                    "\[And]", 
                    FrameBox[
                    RowBox[{"a", "\[Or]", "c"}], StripOnInput -> False]}]], 
                 "Input"], 
                Cell["Then we get "], 
                Cell[
                 BoxData[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
                Cell["Now we have reached our target form"], 
                Cell[
                 BoxData[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"]}]]}],
          DefaultBaseStyle->{},
          Evaluator->None,
          Method->"Queued"],
         DynamicBox[
          ToBoxes[
           FEPrivate`FrontEndResource[
           "FEStrings", "NotebookInNewWindow"]]]]},
       {
        ItemBox[GridBox[{
           {Cell[
            "We want to reduce the expression:",ExpressionUUID->
             "ac067c61-ce05-4c39-862e-7b9bafa1c356"]},
           {Cell[BoxData[
             RowBox[{
              RowBox[{"\[Not]", "b"}], " ", "\[And]", 
              RowBox[{"(", 
               RowBox[{"a", "\[Or]", "c"}], ")"}]}]], "Input",ExpressionUUID->
             "f0856a13-4e9f-451c-aa8f-afa05c0495aa"]},
           {Cell[
            "By Distributive rule, we can expand the terms",ExpressionUUID->
             "0d89a661-21e3-48ca-8a0b-5a00aa4413ae"]},
           {Cell[BoxData[
             RowBox[{
              FrameBox[
               RowBox[{"\[Not]", "b", " "}],
               StripOnInput->False], "\[And]", 
              FrameBox[
               RowBox[{"a", "\[Or]", "c"}],
               StripOnInput->False]}]], "Input",ExpressionUUID->
             "ed354d04-7080-450d-98c1-2513cf38fe6d"]},
           {Cell[
            "Then we get ",ExpressionUUID->
             "8859cb17-01cf-4209-b770-feeecf97eda7"]},
           {Cell[BoxData[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"(", 
               RowBox[{"c", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
             ExpressionUUID->"fa27bbd1-4260-421a-b213-596923f71efd"]},
           {Cell[
            "Now we have reached our target form",ExpressionUUID->
             "5bdea684-0908-4216-b813-0bb35d497ed0"]},
           {Cell[BoxData[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"(", 
               RowBox[{"c", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
             ExpressionUUID->"30b68471-af66-41c3-b509-b169d254efbf"]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         Background->GrayLevel[1],
         Frame->True,
         FrameStyle->GrayLevel[0, 0.2]]}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
     BaseStyle->{FontFamily -> "Times"},
     DefaultBaseStyle->{},
     FrameMargins->5],
    DocumentNotebook[{
      TextCell["We want to reduce the expression:"], 
      ExpressionCell[
       $CellContext`and[
        $CellContext`not[$CellContext`b], 
        $CellContext`or[$CellContext`a, $CellContext`c]], "Input"], 
      TextCell["By Distributive rule, we can expand the terms"], 
      ExpressionCell[
       $CellContext`and[
        Framed[
         $CellContext`not[$CellContext`b]], 
        Framed[
         $CellContext`or[$CellContext`a, $CellContext`c]]], "Input"], 
      TextCell["Then we get "], 
      ExpressionCell[
       $CellContext`or[
        $CellContext`and[$CellContext`a, 
         $CellContext`not[$CellContext`b]], 
        $CellContext`and[$CellContext`c, 
         $CellContext`not[$CellContext`b]]], "Input"], 
      TextCell["Now we have reached our target form"], 
      ExpressionCell[
       $CellContext`or[
        $CellContext`and[$CellContext`a, 
         $CellContext`not[$CellContext`b]], 
        $CellContext`and[$CellContext`c, 
         $CellContext`not[$CellContext`b]]], "Input"]}]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.771768343643433*^9, {3.7717683752820187`*^9, 3.771768401557818*^9}, 
   3.771768593892275*^9, {3.771774718157646*^9, 3.7717747256741533`*^9}, 
   3.771779449912025*^9},
 TextAlignment->Center,
 CellLabel->
  "Out[200]=",ExpressionUUID->"27621fc4-1aba-4df0-bd6d-34cec567d6e6"]
}, Open  ]],

Cell[TextData[StyleBox["Or a shortest path between any two equivalent Boolean \
expressions:",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
  3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
  3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
  3.7716269406201468`*^9, 3.771626949020691*^9}, {3.771627231584917*^9, 
  3.771627332887401*^9}, {3.77162789638834*^9, 3.771627922432719*^9}, {
  3.771768440077969*^9, 
  3.771768495463921*^9}},ExpressionUUID->"39cd95f7-eb20-4177-9ca9-\
0b53a434b9ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"generateProofNotebook", "[", 
  RowBox[{"findShortestRoute", "[", 
   RowBox[{
    RowBox[{"or", "[", 
     RowBox[{
      RowBox[{"and", "[", 
       RowBox[{
        RowBox[{"not", "[", "b", "]"}], ",", 
        RowBox[{"not", "[", "c", "]"}]}], "]"}], ",", 
      RowBox[{"and", "[", 
       RowBox[{"b", ",", "c", ",", 
        RowBox[{"not", "[", "a", "]"}]}], "]"}]}], "]"}], ",", 
    RowBox[{"and", "[", 
     RowBox[{
      RowBox[{"or", "[", 
       RowBox[{"b", ",", 
        RowBox[{"not", "[", "b", "]"}]}], "]"}], ",", 
      RowBox[{"or", "[", 
       RowBox[{"c", ",", 
        RowBox[{"not", "[", "b", "]"}]}], "]"}], ",", 
      RowBox[{"or", "[", 
       RowBox[{
        RowBox[{"and", "[", 
         RowBox[{"b", ",", "c", ",", 
          RowBox[{"not", "[", "a", "]"}]}], "]"}], ",", 
        RowBox[{"not", "[", "c", "]"}]}], "]"}], ",", 
      RowBox[{"or", "[", 
       RowBox[{
        RowBox[{"not", "[", "a", "]"}], ",", 
        RowBox[{"not", "[", "b", "]"}]}], "]"}]}], "]"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771627130348523*^9, 3.771627130428368*^9}, {
   3.77162718831996*^9, 3.771627197815321*^9}, {3.771767402451571*^9, 
   3.771767543513414*^9}, {3.7717675868430643`*^9, 3.7717675871982203`*^9}, 
   3.771767642775264*^9, {3.771768266745944*^9, 3.771768272041883*^9}, {
   3.771768617682354*^9, 3.771768679393914*^9}, {3.7717687910758457`*^9, 
   3.7717688399994507`*^9}, {3.771768897680648*^9, 3.771768920368013*^9}, 
   3.771779462374297*^9, 3.771858890836145*^9},
 TextAlignment->Center,
 FontSize->18,ExpressionUUID->"f8a11351-a9fe-473b-bc94-61fe9680a1a0"],

Cell[BoxData[
 InterpretationBox[
  PanelBox[GridBox[{
     {
      TooltipBox[
       ButtonBox[
        StyleBox[
         DynamicBox[FEPrivate`FrontEndResource[
          "FEBitmaps", "ManipulatePasteIcon"],
          ImageSizeCache->{13., {4., 9.}}],
         DynamicUpdating->True],
        Appearance->{Automatic, None, "Normal", Automatic},
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookPut[
            Notebook[{
              Cell["We want to reduce the expression:"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "b", " "}], "\[And]", 
                    RowBox[{"\[Not]", "c", " "}]}], ")"}], "\[Or]", 
                  RowBox[{"(", 
                    RowBox[{"b", "\[And]", "c", "\[And]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}]}]], "Input"], 
              Cell["By Distributive rule, we can expand the terms"], 
              Cell[
               BoxData[
                RowBox[{
                  FrameBox[
                   RowBox[{
                    RowBox[{"\[Not]", "b", " "}], "\[And]", 
                    RowBox[{"\[Not]", "c", " "}]}], StripOnInput -> False], 
                  "\[Or]", 
                  FrameBox[
                   RowBox[{"b", "\[And]", "c", "\[And]", 
                    RowBox[{"\[Not]", "a", " "}]}], StripOnInput -> False]}]],
                "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[And]", "c", "\[And]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[And]", "c", "\[And]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "c", " "}]}], ")"}]}]], "Input"], 
              Cell["By Distributive rule, we can expand the terms"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[And]", "c", "\[And]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "c", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    FrameBox[
                    RowBox[{"b", "\[And]", "c", "\[And]", 
                    RowBox[{"\[Not]", "a", " "}]}], StripOnInput -> False], 
                    "\[Or]", 
                    FrameBox[
                    RowBox[{"\[Not]", "b", " "}], StripOnInput -> False]}], 
                    ")"}]}]], "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], ")"}], "\[And]", 
                  
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[And]", "c", "\[And]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "c", " "}]}], ")"}]}]], "Input"], 
              Cell["By Associative rule, we can flatten the term"], 
              Cell[
               BoxData[
                FrameBox[
                 RowBox[{
                   FrameBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], StripOnInput -> 
                    False], "\[And]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[And]", "c", "\[And]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "c", " "}]}], ")"}]}], StripOnInput -> 
                 False]], "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[And]", "c", "\[And]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "c", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
              Cell["Now we have reached our target form"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[And]", "c", "\[And]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "c", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"]}]]}],
        DefaultBaseStyle->{},
        Evaluator->None,
        Method->"Queued"],
       DynamicBox[
        ToBoxes[
         FEPrivate`FrontEndResource["FEStrings", "NotebookInNewWindow"]]]]},
     {
      ItemBox[GridBox[{
         {Cell[
          "We want to reduce the expression:",ExpressionUUID->
           "a6620f80-1679-4238-a0af-a39304c84fec"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"\[Not]", "b"}], " ", "\[And]", 
              RowBox[{"\[Not]", "c"}]}], " ", ")"}], "\[Or]", 
            RowBox[{"(", 
             RowBox[{"b", "\[And]", "c", "\[And]", 
              RowBox[{"\[Not]", "a"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"45101117-6812-4d56-8491-184807121992"]},
         {Cell[
          "By Distributive rule, we can expand the terms",ExpressionUUID->
           "812f36a3-19f8-43a1-900c-e6115a5afdac"]},
         {Cell[BoxData[
           RowBox[{
            FrameBox[
             RowBox[{
              RowBox[{"\[Not]", "b"}], " ", "\[And]", 
              RowBox[{"\[Not]", "c", " "}]}],
             StripOnInput->False], "\[Or]", 
            FrameBox[
             RowBox[{"b", "\[And]", "c", "\[And]", 
              RowBox[{"\[Not]", "a", " "}]}],
             StripOnInput->False]}]], "Input",ExpressionUUID->
           "2d079a2c-9eec-459d-8212-053a0e75ed26"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "71a34884-99e2-4dfc-97aa-e9b3fee40858"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"b", "\[And]", "c", "\[And]", 
                RowBox[{"\[Not]", "a"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"b", "\[And]", "c", "\[And]", 
                RowBox[{"\[Not]", "a"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"\[Not]", "c"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"bd565504-1764-49f6-b4a7-c2ecb7b06457"]},
         {Cell[
          "By Distributive rule, we can expand the terms",ExpressionUUID->
           "3ad5cac9-6f56-49fc-8c1d-50fa9e6da615"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"b", "\[And]", "c", "\[And]", 
                RowBox[{"\[Not]", "a"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"\[Not]", "c"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              FrameBox[
               RowBox[{"b", "\[And]", "c", "\[And]", 
                RowBox[{"\[Not]", "a", " "}]}],
               StripOnInput->False], "\[Or]", 
              FrameBox[
               RowBox[{"\[Not]", "b", " "}],
               StripOnInput->False]}], ")"}]}]], "Input",ExpressionUUID->
           "24bfc4f4-7ff6-4d60-a9be-85fd434de7d4"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "66ff5d89-377c-4646-be87-4000afe679f2"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"b", "\[Or]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
              RowBox[{"(", 
               RowBox[{"c", "\[Or]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Not]", "a"}], " ", "\[Or]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}]}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"b", "\[And]", "c", "\[And]", 
                RowBox[{"\[Not]", "a"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"\[Not]", "c"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"9ebe11d4-8e91-4bda-b558-75b15399da15"]},
         {Cell[
          "By Associative rule, we can flatten the term",ExpressionUUID->
           "b9335882-5fc0-4ae4-81d6-3e63f6462f31"]},
         {Cell[BoxData[
           FrameBox[
            RowBox[{
             FrameBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"b", "\[Or]", 
                 RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
               RowBox[{"(", 
                RowBox[{"c", "\[Or]", 
                 RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"\[Not]", "a"}], " ", "\[Or]", 
                 RowBox[{"\[Not]", "b"}]}], " ", ")"}]}],
              StripOnInput->False], "\[And]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"b", "\[And]", "c", "\[And]", 
                 RowBox[{"\[Not]", "a"}]}], " ", ")"}], "\[Or]", 
               RowBox[{"\[Not]", "c"}]}], " ", ")"}]}],
            StripOnInput->False]], "Input",ExpressionUUID->
           "4d2978e0-0493-4b8b-8da4-964ba0c65149"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "8ebd1a5a-9124-471a-ac73-af801acf5525"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"b", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"c", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"b", "\[And]", "c", "\[And]", 
                RowBox[{"\[Not]", "a"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"\[Not]", "c"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"\[Not]", "a"}], " ", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"f97c60ba-0e2b-4093-835b-b6c022e87b3f"]},
         {Cell[
          "Now we have reached our target form",ExpressionUUID->
           "516c47cc-d18d-4b74-93da-c932814b75f9"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"b", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"c", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"b", "\[And]", "c", "\[And]", 
                RowBox[{"\[Not]", "a"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"\[Not]", "c"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"\[Not]", "a"}], " ", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"32be90b3-092e-4f99-adce-3a7d40ec1f5f"]}
        },
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0, 0.2]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
   BaseStyle->{FontFamily -> "Times"},
   DefaultBaseStyle->{},
   FrameMargins->5],
  DocumentNotebook[{
    TextCell["We want to reduce the expression:"], 
    ExpressionCell[
     $CellContext`or[
      $CellContext`and[
       $CellContext`not[$CellContext`b], 
       $CellContext`not[$CellContext`c]], 
      $CellContext`and[$CellContext`b, $CellContext`c, 
       $CellContext`not[$CellContext`a]]], "Input"], 
    TextCell["By Distributive rule, we can expand the terms"], 
    ExpressionCell[
     $CellContext`or[
      Framed[
       $CellContext`and[
        $CellContext`not[$CellContext`b], 
        $CellContext`not[$CellContext`c]]], 
      Framed[
       $CellContext`and[$CellContext`b, $CellContext`c, 
        $CellContext`not[$CellContext`a]]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`or[
       $CellContext`and[$CellContext`b, $CellContext`c, 
        $CellContext`not[$CellContext`a]], 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[
       $CellContext`and[$CellContext`b, $CellContext`c, 
        $CellContext`not[$CellContext`a]], 
       $CellContext`not[$CellContext`c]]], "Input"], 
    TextCell["By Distributive rule, we can expand the terms"], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`or[
       $CellContext`and[$CellContext`b, $CellContext`c, 
        $CellContext`not[$CellContext`a]], 
       $CellContext`not[$CellContext`c]], 
      $CellContext`or[
       Framed[
        $CellContext`and[$CellContext`b, $CellContext`c, 
         $CellContext`not[$CellContext`a]]], 
       Framed[
        $CellContext`not[$CellContext`b]]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`and[
       $CellContext`or[$CellContext`b, 
        $CellContext`not[$CellContext`b]], 
       $CellContext`or[$CellContext`c, 
        $CellContext`not[$CellContext`b]], 
       $CellContext`or[
        $CellContext`not[$CellContext`a], 
        $CellContext`not[$CellContext`b]]], 
      $CellContext`or[
       $CellContext`and[$CellContext`b, $CellContext`c, 
        $CellContext`not[$CellContext`a]], 
       $CellContext`not[$CellContext`c]]], "Input"], 
    TextCell["By Associative rule, we can flatten the term"], 
    ExpressionCell[
     Framed[
      $CellContext`and[
       Framed[
        $CellContext`and[
         $CellContext`or[$CellContext`b, 
          $CellContext`not[$CellContext`b]], 
         $CellContext`or[$CellContext`c, 
          $CellContext`not[$CellContext`b]], 
         $CellContext`or[
          $CellContext`not[$CellContext`a], 
          $CellContext`not[$CellContext`b]]]], 
       $CellContext`or[
        $CellContext`and[$CellContext`b, $CellContext`c, 
         $CellContext`not[$CellContext`a]], 
        $CellContext`not[$CellContext`c]]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`or[$CellContext`b, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[$CellContext`c, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[
       $CellContext`and[$CellContext`b, $CellContext`c, 
        $CellContext`not[$CellContext`a]], 
       $CellContext`not[$CellContext`c]], 
      $CellContext`or[
       $CellContext`not[$CellContext`a], 
       $CellContext`not[$CellContext`b]]], "Input"], 
    TextCell["Now we have reached our target form"], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`or[$CellContext`b, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[$CellContext`c, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[
       $CellContext`and[$CellContext`b, $CellContext`c, 
        $CellContext`not[$CellContext`a]], 
       $CellContext`not[$CellContext`c]], 
      $CellContext`or[
       $CellContext`not[$CellContext`a], 
       $CellContext`not[$CellContext`b]]], "Input"]}]]], "Output",
 CellChangeTimes->{3.771779466353675*^9},
 TextAlignment->Center,
 CellLabel->
  "Out[201]=",ExpressionUUID->"08b9c273-3abc-430a-a673-e7490f431a6d"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Do the reduction look trivial? Check out the proof given by the \
function \[OpenCurlyDoubleQuote]FindEquationalProof\[CloseCurlyDoubleQuote]. \
If we want to reduce ",
  FontSize->20],
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     RowBox[{"\[Not]", 
      RowBox[{"(", 
       RowBox[{"b", "\[Or]", 
        RowBox[{"\[Not]", "a"}]}], " ", ")"}]}], " ", "\[Or]", 
     RowBox[{"\[Not]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Not]", "a"}], " ", "\[Or]", 
        RowBox[{"\[Not]", "b"}]}], " ", ")"}], " "}]}],
    FontSize->20], TraditionalForm]],
  FontSize->20,ExpressionUUID->"65d38f74-cdd5-4267-a72f-d088b8917f87"],
 StyleBox["to ",
  FontSize->20],
 Cell[BoxData[
  FormBox[
   StyleBox["a",
    FontSize->20], TraditionalForm]],
  FontSize->20,ExpressionUUID->"a027cc73-1648-4f99-83f3-2c97c096a589"],
 StyleBox[", it takes 84 convoluted, non-readable steps, while my algorithm \
only takes 17 steps that are all linear and heuristic. ",
  FontSize->20]
}], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
   3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
   3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
   3.7716269406201468`*^9, 3.771626949020691*^9}, {3.771627231584917*^9, 
   3.771627332887401*^9}, {3.77162789638834*^9, 3.771627922432719*^9}, {
   3.771768440077969*^9, 3.771768445812234*^9}, {3.771769527934415*^9, 
   3.771769548265087*^9}, {3.771769605515828*^9, 3.771769631341228*^9}, {
   3.771770589302382*^9, 3.771770601828706*^9}, {3.771770718517447*^9, 
   3.771770722877275*^9}, {3.771771328032894*^9, 3.7717713521834917`*^9}, {
   3.771774100092304*^9, 3.771774113479597*^9}, {3.771777938794112*^9, 
   3.7717780804387417`*^9}, {3.771778167293277*^9, 3.771778191076009*^9}, {
   3.771778446686795*^9, 3.7717784556072693`*^9}, 3.771779496989835*^9, {
   3.771780850684174*^9, 3.771780852079463*^9}, {3.771780927838876*^9, 
   3.771780928252359*^9}},
 TextAlignment->Left,ExpressionUUID->"fb75e80b-4c3d-443a-9b0c-a46e6d132e44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     RowBox[{
      TagBox["ProofObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 
                 1.}, {1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 
                 1.}, {-1., 0.}}, {{
                   GrayLevel[0.55], 
                   LineBox[{1, 6}], 
                   LineBox[{2, 5}], 
                   LineBox[{3, 5}], 
                   LineBox[{4, 10}], 
                   LineBox[{5, 6}], 
                   LineBox[{6, 7}], 
                   LineBox[{6, 8}], 
                   LineBox[{7, 9}], 
                   LineBox[{8, 9}], 
                   LineBox[{9, 10}], 
                   LineBox[{3, 7}]}, {
                   PointBox[1], 
                   PointBox[2], 
                   PointBox[3], 
                   PointBox[4], 
                   PointBox[5], 
                   PointBox[6], 
                   PointBox[7], 
                   PointBox[8], 
                   PointBox[9], 
                   PointBox[10]}}], FrameTicks -> None, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> 
                True, PlotRangePadding -> Scaled[0.1], Background -> 
                GrayLevel[0.93], Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"EquationalLogic\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["83", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b"}], "}"}]], 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"not", "[", 
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"not", "[", "a", "]"}], ",", "b"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"not", "[", 
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"not", "[", "a", "]"}], ",", 
                    RowBox[{"not", "[", "b", "]"}]}], "]"}], "]"}]}], "]"}], 
                    "\[Equal]", "a"}]}], Short[#, 1]& ], "SummaryItem"]}], 
                  "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 
                 1.}, {1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 
                 1.}, {-1., 0.}}, {{
                   GrayLevel[0.55], 
                   LineBox[{1, 6}], 
                   LineBox[{2, 5}], 
                   LineBox[{3, 5}], 
                   LineBox[{4, 10}], 
                   LineBox[{5, 6}], 
                   LineBox[{6, 7}], 
                   LineBox[{6, 8}], 
                   LineBox[{7, 9}], 
                   LineBox[{8, 9}], 
                   LineBox[{9, 10}], 
                   LineBox[{3, 7}]}, {
                   PointBox[1], 
                   PointBox[2], 
                   PointBox[3], 
                   PointBox[4], 
                   PointBox[5], 
                   PointBox[6], 
                   PointBox[7], 
                   PointBox[8], 
                   PointBox[9], 
                   PointBox[10]}}], FrameTicks -> None, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> 
                True, PlotRangePadding -> Scaled[0.1], Background -> 
                GrayLevel[0.93], Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"EquationalLogic\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["83", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b"}], "}"}]], 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"not", "[", 
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"not", "[", "a", "]"}], ",", "b"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"not", "[", 
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"not", "[", "a", "]"}], ",", 
                    RowBox[{"not", "[", "b", "]"}]}], "]"}], "]"}]}], "]"}], 
                    "\[Equal]", "a"}]}], Short[#, 1]& ], "SummaryItem"]}], 
                  "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Axioms: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b"}], "}"}]], 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], "\[Equal]", 
                    RowBox[{"and", "[", 
                    RowBox[{"b", ",", "a"}], "]"}]}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b"}], "}"}]], 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], "\[Equal]", 
                    RowBox[{"or", "[", 
                    RowBox[{"b", ",", "a"}], "]"}]}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b"}], "}"}]], 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"a", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"b", ",", 
                    RowBox[{"not", "[", "b", "]"}]}], "]"}]}], "]"}], 
                    "\[Equal]", "a"}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]], 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], 
                    "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c"}], "}"}]], 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"a", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "\[Equal]", 
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"a", ",", "c"}], "]"}]}], "]"}]}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c"}], "}"}]], 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"a", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "\[Equal]", 
                    RowBox[{"and", "[", 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"a", ",", "c"}], "]"}]}], "]"}]}]}]}], 
                    Short[#, 1]& ], "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ProofObject["EquationalLogic", 
      ForAll[{$CellContext`a, $CellContext`b}, $CellContext`or[
         $CellContext`not[
          $CellContext`or[
           $CellContext`not[$CellContext`a], $CellContext`b]], 
         $CellContext`not[
          $CellContext`or[
           $CellContext`not[$CellContext`a], 
           $CellContext`not[$CellContext`b]]]] == $CellContext`a], 
      And[
       ForAll[{$CellContext`a, $CellContext`b}, \
$CellContext`and[$CellContext`a, $CellContext`b] == \
$CellContext`and[$CellContext`b, $CellContext`a]], 
       ForAll[{$CellContext`a, $CellContext`b}, \
$CellContext`or[$CellContext`a, $CellContext`b] == \
$CellContext`or[$CellContext`b, $CellContext`a]], 
       ForAll[{$CellContext`a, $CellContext`b}, \
$CellContext`and[$CellContext`a, 
          $CellContext`or[$CellContext`b, 
           $CellContext`not[$CellContext`b]]] == $CellContext`a], 
       ForAll[{$CellContext`a, $CellContext`b}, \
$CellContext`or[$CellContext`a, 
          $CellContext`and[$CellContext`b, 
           $CellContext`not[$CellContext`b]]] == $CellContext`a], 
       ForAll[{$CellContext`a, $CellContext`b, $CellContext`c}, \
$CellContext`and[$CellContext`a, 
          $CellContext`or[$CellContext`b, $CellContext`c]] == \
$CellContext`or[
          $CellContext`and[$CellContext`a, $CellContext`b], 
          $CellContext`and[$CellContext`a, $CellContext`c]]], 
       ForAll[{$CellContext`a, $CellContext`b, $CellContext`c}, \
$CellContext`or[$CellContext`a, 
          $CellContext`and[$CellContext`b, $CellContext`c]] == \
$CellContext`and[
          $CellContext`or[$CellContext`a, $CellContext`b], 
          $CellContext`or[$CellContext`a, $CellContext`c]]]], {{"Axiom", 1} -> 
       Association[
        "Statement" -> $CellContext`x1 == $CellContext`and[$CellContext`x1, 
            $CellContext`or[$CellContext`x2, 
             $CellContext`not[$CellContext`x2]]], "Proof" -> Association[]], {
        "Axiom", 2} -> 
       Association[
        "Statement" -> $CellContext`x1 == $CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`not[$CellContext`x2]]], "Proof" -> Association[]], {
        "Axiom", 3} -> 
       Association[
        "Statement" -> $CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x2, $CellContext`x1], "Proof" -> 
         Association[]], {"Axiom", 4} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`or[$CellContext`x2, $CellContext`x3]] == \
$CellContext`or[
            $CellContext`and[$CellContext`x1, $CellContext`x2], 
            $CellContext`and[$CellContext`x1, $CellContext`x3]], "Proof" -> 
         Association[]], {"Axiom", 5} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`or[$CellContext`x1, $CellContext`x2], 
            $CellContext`or[$CellContext`x1, $CellContext`x3]] == \
$CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, $CellContext`x3]], "Proof" -> 
         Association[]], {"Axiom", 6} -> 
       Association[
        "Statement" -> $CellContext`or[$CellContext`x1, $CellContext`x2] == \
$CellContext`or[$CellContext`x2, $CellContext`x1], "Proof" -> 
         Association[]], {"Hypothesis", 1} -> 
       Association["Statement" -> $CellContext`or[
            $CellContext`not[
             $CellContext`or[
              $CellContext`not[$CellContext`a], $CellContext`b]], 
            $CellContext`not[
             $CellContext`or[
              $CellContext`not[$CellContext`a], 
              $CellContext`not[$CellContext`b]]]] == $CellContext`a, "Proof" -> 
         Association[]], {"CriticalPairLemma", 1} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`or[$CellContext`x1, 
             $CellContext`not[$CellContext`x1]], $CellContext`x2] == \
$CellContext`x2, "Proof" -> 
         Association[
          "Construct" -> {"Axiom", 3}, "Orientation" -> {-1, 1}, "Rule" -> 
           TwoWayRule[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`and[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "Side" -> 1, "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"Axiom", 1}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`or[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 2} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`or[$CellContext`x2, 
             $CellContext`not[$CellContext`x1]]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2], "Proof" -> 
         Association[
          "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]), "Side" -> 
           1, "Subpattern" -> $CellContext`or[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]], "MatchingConstruct" -> {"Axiom", 2}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 3} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`or[$CellContext`x2, $CellContext`x3]] == \
$CellContext`or[
            $CellContext`and[$CellContext`x2, $CellContext`x1], 
            $CellContext`and[$CellContext`x1, $CellContext`x3]], "Proof" -> 
         Association[
          "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]), "Side" -> 
           1, "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
           "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`and[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 4} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`not[$CellContext`x1]]] == \
$CellContext`or[$CellContext`x1, $CellContext`x2], "Proof" -> 
         Association[
          "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`and[
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, $CellContext`x3]]), "Side" -> 
           1, "Subpattern" -> $CellContext`and[
             $CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]], "MatchingConstruct" -> {"Axiom", 1}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`or[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 5} -> 
       Association["Statement" -> $CellContext`or[
            $CellContext`and[$CellContext`x1, 
             $CellContext`not[$CellContext`x1]], $CellContext`x2] == \
$CellContext`x2, "Proof" -> 
         Association[
          "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, "Rule" -> 
           TwoWayRule[
             $CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`or[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "Side" -> 1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"Axiom", 2}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 6} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, $CellContext`x3]] == \
$CellContext`and[
            $CellContext`or[$CellContext`x2, $CellContext`x1], 
            $CellContext`or[$CellContext`x1, $CellContext`x3]], "Proof" -> 
         Association[
          "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`and[
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, $CellContext`x3]]), "Side" -> 
           1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"Axiom", 6}, 
           "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
             $CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`or[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 7} -> 
       Association[
        "Statement" -> $CellContext`or[$CellContext`x1, $CellContext`x2] == \
$CellContext`or[$CellContext`x1, 
            $CellContext`and[
             $CellContext`not[$CellContext`x1], $CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 1}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`and[
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]]], 
              Pattern[$CellContext`x2, 
               Blank[]]] -> $CellContext`x2), "Side" -> 1, 
           "Subpattern" -> $CellContext`and[
             $CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"Axiom", 5}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, $CellContext`x3]]), 
           "MatchingSide" -> 1]], {"CriticalPairLemma", 8} -> 
       Association[
        "Statement" -> $CellContext`x1 == $CellContext`or[$CellContext`x1, 
            $CellContext`not[
             $CellContext`or[$CellContext`x2, 
              $CellContext`not[$CellContext`x2]]]], "Proof" -> 
         Association[
          "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), "Side" -> 1, 
           "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x2, 
              Blank[]], 
             $CellContext`not[
              Pattern[$CellContext`x2, 
               Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 1}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]]], 
              Pattern[$CellContext`x2, 
               Blank[]]] -> $CellContext`x2), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 9} -> 
       Association[
        "Statement" -> $CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x1, 
            $CellContext`or[
             $CellContext`not[$CellContext`x1], $CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 5}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]]], 
              Pattern[$CellContext`x2, 
               Blank[]]] -> $CellContext`x2), "Side" -> 1, 
           "Subpattern" -> $CellContext`or[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"Axiom", 4}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]), 
           "MatchingSide" -> 1]], {"CriticalPairLemma", 10} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`not[
             $CellContext`not[$CellContext`x1]]] == $CellContext`x1, "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`or[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x1, 
              Blank[]], 
             $CellContext`and[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              Pattern[$CellContext`x2, 
               Blank[]]]], "MatchingConstruct" -> {"Axiom", 2}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 11} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`not[
             $CellContext`not[
              $CellContext`not[$CellContext`x1]]]] == \
$CellContext`and[$CellContext`x1, 
            $CellContext`not[$CellContext`x1]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 9}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`or[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`or[
             $CellContext`not[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 10}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`not[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 12} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`not[$CellContext`x1]] == $CellContext`not[
            $CellContext`or[$CellContext`x2, 
             $CellContext`not[$CellContext`x2]]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 8}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`not[
               $CellContext`or[
                Pattern[$CellContext`x2, 
                 Blank[]], 
                $CellContext`not[
                 Pattern[$CellContext`x2, 
                  Blank[]]]]]] -> $CellContext`x1), "Side" -> 1, 
           "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x1, 
              Blank[]], 
             $CellContext`not[
              $CellContext`or[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]]], 
           "MatchingConstruct" -> {"CriticalPairLemma", 5}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]]], 
              Pattern[$CellContext`x2, 
               Blank[]]] -> $CellContext`x2), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 13} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[
             $CellContext`not[$CellContext`x1]], $CellContext`x1] == \
$CellContext`or[
            $CellContext`not[
             $CellContext`not[$CellContext`x1]], 
            $CellContext`and[$CellContext`x1, 
             $CellContext`not[$CellContext`x1]]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 4}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 
                 Blank[]]]]] -> $CellContext`or[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x2, 
              Blank[]], 
             $CellContext`not[
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 11}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`not[
               $CellContext`not[
                $CellContext`not[
                 Pattern[$CellContext`x1, 
                  Blank[]]]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`not[$CellContext`x1]]), "MatchingSide" -> 1]], {
        "SubstitutionLemma", 1} -> 
       Association["Statement" -> $CellContext`or[
            $CellContext`not[
             $CellContext`not[$CellContext`x1]], $CellContext`x1] == \
$CellContext`not[
            $CellContext`not[$CellContext`x1]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 13}, "Position" -> 2, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`or[
              $CellContext`not[
               $CellContext`not[$CellContext`x1]], $CellContext`x1] == \
$CellContext`not[
              $CellContext`not[$CellContext`x1]]]], {"SubstitutionLemma", 2} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`not[
             $CellContext`not[$CellContext`x1]]] == $CellContext`not[
            $CellContext`not[$CellContext`x1]], "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 1}, "Position" -> 1, 
           "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`or[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`or[$CellContext`x1, 
              $CellContext`not[
               $CellContext`not[$CellContext`x1]]] == $CellContext`not[
              $CellContext`not[$CellContext`x1]]]], {"SubstitutionLemma", 3} -> 
       Association["Statement" -> $CellContext`x1 == $CellContext`not[
            $CellContext`not[$CellContext`x1]], "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 2}, "Position" -> 1, 
           "Construct" -> {"CriticalPairLemma", 10}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`not[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`x1 == $CellContext`not[
              $CellContext`not[$CellContext`x1]]]], {"CriticalPairLemma", 14} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`not[$CellContext`x1], $CellContext`x2] == \
$CellContext`and[
            $CellContext`not[$CellContext`x1], 
            $CellContext`or[$CellContext`x1, $CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 9}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`or[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`not[
             Pattern[$CellContext`x1, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`not[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 15} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[$CellContext`x1], $CellContext`x2] == \
$CellContext`or[
            $CellContext`not[$CellContext`x1], 
            $CellContext`and[$CellContext`x1, $CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`or[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`not[
             Pattern[$CellContext`x1, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`not[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 16} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[$CellContext`x1], $CellContext`x2] == \
$CellContext`or[
            $CellContext`not[$CellContext`x1], 
            $CellContext`and[$CellContext`x2, $CellContext`x1]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 4}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 
                 Blank[]]]]] -> $CellContext`or[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`not[
             Pattern[$CellContext`x1, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`not[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 17} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`or[$CellContext`x1, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, 
            $CellContext`and[
             $CellContext`not[$CellContext`x1], $CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`or[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`and[
             $CellContext`not[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 14}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`and[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`and[
              $CellContext`not[$CellContext`x1], $CellContext`x2]), 
           "MatchingSide" -> 1]], {"SubstitutionLemma", 4} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`or[$CellContext`x1, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, $CellContext`x2], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 17}, "Position" -> 2, 
           "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`or[$CellContext`x1, \
$CellContext`x2]), "OutputExpression" -> $CellContext`or[$CellContext`x1, 
              $CellContext`or[$CellContext`x1, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, $CellContext`x2]]], {
        "CriticalPairLemma", 18} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`or[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`and[
            $CellContext`or[$CellContext`x1, $CellContext`x2], 
            $CellContext`or[$CellContext`x1, $CellContext`x3]], "Proof" -> 
         Association[
          "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`and[
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, $CellContext`x3]]), "Side" -> 
           1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 4}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`or[$CellContext`x1, \
$CellContext`x2]), "MatchingSide" -> 1]], {"SubstitutionLemma", 5} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`or[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, $CellContext`x3]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 18}, "Position" -> 2, 
           "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`and[
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, $CellContext`x3]]), 
           "OutputExpression" -> $CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, 
               $CellContext`or[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, $CellContext`x3]]]], {
        "CriticalPairLemma", 19} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`not[
             $CellContext`not[$CellContext`x1]], 
            $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
            $CellContext`not[
             $CellContext`not[$CellContext`x1]], 
            $CellContext`or[
             $CellContext`not[$CellContext`x1], $CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 14}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`and[
              $CellContext`not[$CellContext`x1], $CellContext`x2]), "Side" -> 
           1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 15}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`or[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`or[
              $CellContext`not[$CellContext`x1], $CellContext`x2]), 
           "MatchingSide" -> 1]], {"SubstitutionLemma", 6} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
            $CellContext`not[
             $CellContext`not[$CellContext`x1]], 
            $CellContext`or[
             $CellContext`not[$CellContext`x1], $CellContext`x2]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 19}, "Position" -> {1, 1}, 
           "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`not[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`and[$CellContext`x1, 
              $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
              $CellContext`not[
               $CellContext`not[$CellContext`x1]], 
              $CellContext`or[
               $CellContext`not[$CellContext`x1], $CellContext`x2]]]], {
        "SubstitutionLemma", 7} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
            $CellContext`not[
             $CellContext`not[$CellContext`x1]], $CellContext`x2], "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 6}, "Position" -> 2, 
           "Construct" -> {"CriticalPairLemma", 14}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`and[
              $CellContext`not[$CellContext`x1], $CellContext`x2]), 
           "OutputExpression" -> $CellContext`and[$CellContext`x1, 
              $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
              $CellContext`not[
               $CellContext`not[$CellContext`x1]], $CellContext`x2]]], {
        "SubstitutionLemma", 8} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2], "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 7}, "Position" -> {2, 1}, 
           "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`not[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`and[$CellContext`x1, 
              $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2]]], {
        "CriticalPairLemma", 20} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`or[
             $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3]] == $CellContext`or[
            $CellContext`and[$CellContext`x1, $CellContext`x2], 
            $CellContext`and[$CellContext`x1, $CellContext`x3]], "Proof" -> 
         Association[
          "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]), "Side" -> 
           1, "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 8}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x2]), "MatchingSide" -> 1]], {"SubstitutionLemma", 9} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`or[
             $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3]] == $CellContext`and[$CellContext`x1, 
            $CellContext`or[$CellContext`x2, $CellContext`x3]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 20}, "Position" -> 2, 
           "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]), 
           "OutputExpression" -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[
               $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3]] == $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]]], {
        "CriticalPairLemma", 21} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`or[$CellContext`x2, 
             $CellContext`and[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`or[
            $CellContext`and[$CellContext`x1, $CellContext`x2], 
            $CellContext`and[$CellContext`x1, $CellContext`x3]], "Proof" -> 
         Association[
          "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]), "Side" -> 
           1, "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 8}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x2]), "MatchingSide" -> 1]], {"SubstitutionLemma", 10} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`or[$CellContext`x2, 
             $CellContext`and[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`and[$CellContext`x1, 
            $CellContext`or[$CellContext`x2, $CellContext`x3]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 21}, "Position" -> 2, 
           "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]), 
           "OutputExpression" -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, 
               $CellContext`and[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]]], {
        "CriticalPairLemma", 22} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`not[$CellContext`x2]]] == \
$CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, $CellContext`x1]], "Proof" -> 
         Association[
          "Construct" -> {"SubstitutionLemma", 5}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`or[
                Pattern[$CellContext`x1, 
                 Blank[]], 
                Pattern[$CellContext`x3, 
                 Blank[]]]]] -> $CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, $CellContext`x3]]), "Side" -> 
           1, "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x2, 
              Blank[]], 
             $CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 2}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`or[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 
                 Blank[]]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x2]), "MatchingSide" -> 1]], {"SubstitutionLemma", 11} -> 
       Association[
        "Statement" -> $CellContext`x1 == $CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, $CellContext`x1]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 22}, "Position" -> 1, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, $CellContext`x1]]]], {
        "CriticalPairLemma", 23} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`not[$CellContext`x1]] == \
$CellContext`and[$CellContext`x2, 
            $CellContext`and[$CellContext`x1, 
             $CellContext`not[$CellContext`x1]]], "Proof" -> 
         Association[
          "Construct" -> {"SubstitutionLemma", 11}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), "Side" -> 1, 
           "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x1, 
              Blank[]], 
             $CellContext`and[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 5}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]]], 
              Pattern[$CellContext`x2, 
               Blank[]]] -> $CellContext`x2), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 24} -> 
       Association[
        "Statement" -> $CellContext`x1 == $CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x1, $CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"SubstitutionLemma", 11}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), "Side" -> 1, 
           "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
           "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`and[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 25} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`not[$CellContext`x1], 
            $CellContext`and[$CellContext`x2, $CellContext`x1]] == \
$CellContext`and[
            $CellContext`not[$CellContext`x1], $CellContext`x1], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 14}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`and[
              $CellContext`not[$CellContext`x1], $CellContext`x2]), "Side" -> 
           1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 11}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 26} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`and[
             $CellContext`not[$CellContext`x1], $CellContext`x2]] == \
$CellContext`and[$CellContext`x1, 
            $CellContext`not[$CellContext`x1]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 9}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`or[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`or[
             $CellContext`not[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 24}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "SubstitutionLemma", 12} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`not[$CellContext`x1], 
            $CellContext`and[$CellContext`x2, $CellContext`x1]] == \
$CellContext`and[$CellContext`x1, 
            $CellContext`not[$CellContext`x1]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 25}, "Position" -> 2, 
           "Construct" -> {"Axiom", 3}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`and[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`and[
              $CellContext`not[$CellContext`x1], 
              $CellContext`and[$CellContext`x2, $CellContext`x1]] == \
$CellContext`and[$CellContext`x1, 
              $CellContext`not[$CellContext`x1]]]], {"CriticalPairLemma", 27} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`and[$CellContext`x1, $CellContext`x2], 
            $CellContext`not[
             $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`and[
            $CellContext`not[
             $CellContext`and[$CellContext`x1, $CellContext`x2]], 
            $CellContext`and[$CellContext`x2, 
             $CellContext`not[$CellContext`x2]]], "Proof" -> 
         Association[
          "Construct" -> {"SubstitutionLemma", 12}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`and[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`not[$CellContext`x1]]), "Side" -> 1, 
           "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 12}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`not[$CellContext`x1]]), "MatchingSide" -> 1]], {
        "SubstitutionLemma", 13} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`and[$CellContext`x1, $CellContext`x2], 
            $CellContext`not[
             $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`and[$CellContext`x2, 
            $CellContext`not[$CellContext`x2]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 27}, "Position" -> 2, 
           "Construct" -> {"CriticalPairLemma", 23}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`and[$CellContext`x2, 
              $CellContext`not[$CellContext`x2]]), 
           "OutputExpression" -> $CellContext`and[
              $CellContext`and[$CellContext`x1, $CellContext`x2], 
              $CellContext`not[
               $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`and[$CellContext`x2, 
              $CellContext`not[$CellContext`x2]]]], {"CriticalPairLemma", 28} -> 
       Association["Statement" -> $CellContext`or[
            $CellContext`not[
             $CellContext`and[$CellContext`x1, $CellContext`x2]], 
            $CellContext`not[$CellContext`x2]] == $CellContext`or[
            $CellContext`not[
             $CellContext`and[$CellContext`x1, $CellContext`x2]], 
            $CellContext`and[$CellContext`x2, 
             $CellContext`not[$CellContext`x2]]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 16}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`or[
              $CellContext`not[$CellContext`x1], $CellContext`x2]), "Side" -> 
           1, "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 12}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`not[$CellContext`x1]]), "MatchingSide" -> 1]], {
        "SubstitutionLemma", 14} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[
             $CellContext`and[$CellContext`x1, $CellContext`x2]], 
            $CellContext`not[$CellContext`x2]] == $CellContext`not[
            $CellContext`and[$CellContext`x1, $CellContext`x2]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 28}, "Position" -> 2, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`or[
              $CellContext`not[
               $CellContext`and[$CellContext`x1, $CellContext`x2]], 
              $CellContext`not[$CellContext`x2]] == $CellContext`not[
              $CellContext`and[$CellContext`x1, $CellContext`x2]]]], {
        "CriticalPairLemma", 29} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[
             $CellContext`and[
              $CellContext`not[$CellContext`x1], $CellContext`x2]], \
$CellContext`x1] == $CellContext`or[
            $CellContext`not[
             $CellContext`and[
              $CellContext`not[$CellContext`x1], $CellContext`x2]], 
            $CellContext`and[$CellContext`x1, 
             $CellContext`not[$CellContext`x1]]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 16}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`or[
              $CellContext`not[$CellContext`x1], $CellContext`x2]), "Side" -> 
           1, "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 26}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`not[$CellContext`x1]]), "MatchingSide" -> 1]], {
        "SubstitutionLemma", 15} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[
             $CellContext`and[
              $CellContext`not[$CellContext`x1], $CellContext`x2]], \
$CellContext`x1] == $CellContext`not[
            $CellContext`and[
             $CellContext`not[$CellContext`x1], $CellContext`x2]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 29}, "Position" -> 2, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`or[
              $CellContext`not[
               $CellContext`and[
                $CellContext`not[$CellContext`x1], $CellContext`x2]], \
$CellContext`x1] == $CellContext`not[
              $CellContext`and[
               $CellContext`not[$CellContext`x1], $CellContext`x2]]]], {
        "SubstitutionLemma", 16} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[$CellContext`x1], 
            $CellContext`not[
             $CellContext`and[$CellContext`x2, $CellContext`x1]]] == \
$CellContext`not[
            $CellContext`and[$CellContext`x2, $CellContext`x1]], "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 14}, "Position" -> 1, 
           "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`or[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`or[
              $CellContext`not[$CellContext`x1], 
              $CellContext`not[
               $CellContext`and[$CellContext`x2, $CellContext`x1]]] == \
$CellContext`not[
              $CellContext`and[$CellContext`x2, $CellContext`x1]]]], {
        "CriticalPairLemma", 30} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`or[$CellContext`x2, 
             $CellContext`and[$CellContext`x2, $CellContext`x3]]] == \
$CellContext`and[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`or[$CellContext`x1, $CellContext`x3]]], "Proof" -> 
         Association[
          "Construct" -> {"SubstitutionLemma", 9}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`or[
               $CellContext`and[
                Pattern[$CellContext`x1, 
                 Blank[]], 
                Pattern[$CellContext`x2, 
                 Blank[]]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]), "Side" -> 
           1, "Subpattern" -> $CellContext`or[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             Pattern[$CellContext`x3, 
              Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 3}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`or[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`and[$CellContext`x2, 
              $CellContext`or[$CellContext`x1, $CellContext`x3]]), 
           "MatchingSide" -> 1]], {"SubstitutionLemma", 17} -> 
       Association[
        "Statement" -> $CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`or[$CellContext`x1, $CellContext`x3]]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 30}, "Position" -> {1, 2}, 
           "Construct" -> {"CriticalPairLemma", 24}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`and[$CellContext`x1, \
$CellContext`x2] == $CellContext`and[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, 
               $CellContext`or[$CellContext`x1, $CellContext`x3]]]]], {
        "CriticalPairLemma", 31} -> 
       Association[
        "Statement" -> $CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x1, 
            $CellContext`and[
             $CellContext`or[$CellContext`x1, $CellContext`x3], \
$CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"SubstitutionLemma", 17}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`or[
                Pattern[$CellContext`x1, 
                 Blank[]], 
                Pattern[$CellContext`x3, 
                 
                 Blank[]]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x2, 
              Blank[]], 
             $CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]], "MatchingConstruct" -> {"Axiom", 3}, 
           "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`and[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 32} -> 
       Association[
        "Statement" -> $CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`or[$CellContext`x3, $CellContext`x1]]], "Proof" -> 
         Association[
          "Construct" -> {"SubstitutionLemma", 17}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`or[
                Pattern[$CellContext`x1, 
                 Blank[]], 
                Pattern[$CellContext`x3, 
                 
                 Blank[]]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]], "MatchingConstruct" -> {"Axiom", 6}, 
           "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
             $CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`or[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 33} -> 
       Association[
        "Statement" -> $CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x1, 
            $CellContext`and[
             $CellContext`or[$CellContext`x3, $CellContext`x1], \
$CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 31}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               $CellContext`or[
                Pattern[$CellContext`x1, 
                 Blank[]], 
                Pattern[$CellContext`x2, 
                 Blank[]]], 
               Pattern[$CellContext`x3, 
                
                Blank[]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x3]), "Side" -> 1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"Axiom", 6}, 
           "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
             $CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`or[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 34} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == $CellContext`and[
            $CellContext`and[$CellContext`x1, $CellContext`x2], 
            $CellContext`and[$CellContext`x3, $CellContext`x1]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 32}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`or[
                Pattern[$CellContext`x3, 
                 Blank[]], 
                Pattern[$CellContext`x1, 
                 
                 Blank[]]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x3, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 24}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "CriticalPairLemma", 35} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == $CellContext`and[
            $CellContext`and[$CellContext`x1, $CellContext`x2], 
            $CellContext`and[$CellContext`x2, $CellContext`x3]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 33}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               $CellContext`or[
                Pattern[$CellContext`x2, 
                 Blank[]], 
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x3, 
                
                Blank[]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x3]), "Side" -> 1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 11}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "SubstitutionLemma", 18} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`not[
             $CellContext`and[
              $CellContext`not[$CellContext`x1], $CellContext`x2]]] == \
$CellContext`not[
            $CellContext`and[
             $CellContext`not[$CellContext`x1], $CellContext`x2]], "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 15}, "Position" -> 1, 
           "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`or[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`or[$CellContext`x1, 
              $CellContext`not[
               $CellContext`and[
                $CellContext`not[$CellContext`x1], $CellContext`x2]]] == \
$CellContext`not[
              $CellContext`and[
               $CellContext`not[$CellContext`x1], $CellContext`x2]]]], {
        "CriticalPairLemma", 36} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == $CellContext`and[
            $CellContext`and[$CellContext`x3, $CellContext`x1], 
            $CellContext`and[$CellContext`x1, $CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 34}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x3, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`and[
              $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3]), "Side" -> 1, "Subpattern" -> $CellContext`and[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`and[
              Pattern[$CellContext`x3, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingConstruct" -> {"Axiom", 3}, 
           "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`and[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingSide" -> 1]], {"SubstitutionLemma", 19} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == $CellContext`and[
            $CellContext`and[$CellContext`x3, $CellContext`x1], \
$CellContext`x2], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 36}, "Position" -> 2, 
           "Construct" -> {"CriticalPairLemma", 35}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`and[
              $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3]), "OutputExpression" -> $CellContext`and[
              $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == $CellContext`and[
              $CellContext`and[$CellContext`x3, $CellContext`x1], \
$CellContext`x2]]], {"CriticalPairLemma", 37} -> 
       Association["Statement" -> $CellContext`and[
            $CellContext`and[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == $CellContext`and[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, $CellContext`x3]], "Proof" -> 
         Association[
          "Construct" -> {"SubstitutionLemma", 19}, "Orientation" -> {-1, 1}, 
           "Rule" -> TwoWayRule[
             $CellContext`and[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              Pattern[$CellContext`x3, 
               Blank[]]], 
             $CellContext`and[
              $CellContext`and[
               Pattern[$CellContext`x3, 
                Blank[]], 
               Pattern[$CellContext`x1, 
                Blank[]]], 
              Pattern[$CellContext`x2, 
               Blank[]]]], "Side" -> 1, "Subpattern" -> $CellContext`and[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             Pattern[$CellContext`x3, 
              Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
           "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             $CellContext`and[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]], "MatchingSide" -> 1]], {"SubstitutionLemma", 20} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`not[
              $CellContext`and[$CellContext`x1, $CellContext`x2]]]] == \
$CellContext`and[$CellContext`x2, 
            $CellContext`not[$CellContext`x2]], "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 13}, "Position" -> 1, 
           "Construct" -> {"CriticalPairLemma", 37}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`and[
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              Pattern[$CellContext`x3, 
               Blank[]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, $CellContext`x3]]), 
           "OutputExpression" -> $CellContext`and[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, 
               $CellContext`not[
                $CellContext`and[$CellContext`x1, $CellContext`x2]]]] == \
$CellContext`and[$CellContext`x2, 
              $CellContext`not[$CellContext`x2]]]], {"CriticalPairLemma", 38} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`not[
              $CellContext`and[
               $CellContext`not[$CellContext`x1], $CellContext`x2]]]] == \
$CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`not[$CellContext`x2]]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                
                Blank[]]]] -> $CellContext`or[$CellContext`x1, \
$CellContext`x2]), "Side" -> 1, "Subpattern" -> $CellContext`and[
             $CellContext`not[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 20}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                $CellContext`and[
                 Pattern[$CellContext`x1, 
                  Blank[]], 
                 Pattern[$CellContext`x2, 
                  Blank[]]]]]] -> $CellContext`and[$CellContext`x2, 
              $CellContext`not[$CellContext`x2]]), "MatchingSide" -> 1]], {
        "SubstitutionLemma", 21} -> 
       Association["Statement" -> $CellContext`or[$CellContext`x1, 
            $CellContext`and[$CellContext`x2, 
             $CellContext`not[
              $CellContext`and[
               $CellContext`not[$CellContext`x1], $CellContext`x2]]]] == \
$CellContext`x1, "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 38}, "Position" -> 2, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, 
               $CellContext`not[
                $CellContext`and[
                 $CellContext`not[$CellContext`x1], $CellContext`x2]]]] == \
$CellContext`x1]], {"CriticalPairLemma", 39} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`or[$CellContext`x2, 
             $CellContext`not[
              $CellContext`and[
               $CellContext`not[$CellContext`x2], $CellContext`x1]]]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2], "Proof" -> 
         Association[
          "Construct" -> {"SubstitutionLemma", 10}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`or[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`and[
                Pattern[$CellContext`x1, 
                 Blank[]], 
                Pattern[$CellContext`x3, 
                 Blank[]]]]] -> $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]]), "Side" -> 
           1, "Subpattern" -> $CellContext`or[
             Pattern[$CellContext`x2, 
              Blank[]], 
             $CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]], "MatchingConstruct" -> {"SubstitutionLemma", 21}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`and[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                $CellContext`and[
                 $CellContext`not[
                  Pattern[$CellContext`x1, 
                   Blank[]]], 
                 Pattern[$CellContext`x2, 
                  Blank[]]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "SubstitutionLemma", 22} -> 
       Association["Statement" -> $CellContext`and[$CellContext`x1, 
            $CellContext`not[
             $CellContext`and[
              $CellContext`not[$CellContext`x2], $CellContext`x1]]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 39}, "Position" -> {1, 2}, 
           "Construct" -> {"SubstitutionLemma", 18}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`not[
               $CellContext`and[
                $CellContext`not[
                 Pattern[$CellContext`x1, 
                  Blank[]]], 
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`not[
              $CellContext`and[
               $CellContext`not[$CellContext`x1], $CellContext`x2]]), 
           "OutputExpression" -> $CellContext`and[$CellContext`x1, 
              $CellContext`not[
               $CellContext`and[
                $CellContext`not[$CellContext`x2], $CellContext`x1]]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2]]], {
        "CriticalPairLemma", 40} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[$CellContext`x1], 
            $CellContext`not[
             $CellContext`and[
              $CellContext`not[$CellContext`x2], $CellContext`x1]]] == \
$CellContext`or[
            $CellContext`not[$CellContext`x1], 
            $CellContext`and[$CellContext`x1, $CellContext`x2]], "Proof" -> 
         Association[
          "Construct" -> {"CriticalPairLemma", 15}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`or[
              $CellContext`not[$CellContext`x1], $CellContext`x2]), "Side" -> 
           1, "Subpattern" -> $CellContext`and[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 22}, 
           "MatchingOrientation" -> 1, "MatchingRule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`not[
               $CellContext`and[
                $CellContext`not[
                 Pattern[$CellContext`x2, 
                  Blank[]]], 
                Pattern[$CellContext`x1, 
                 
                 Blank[]]]]] -> $CellContext`and[$CellContext`x1, \
$CellContext`x2]), "MatchingSide" -> 1]], {"SubstitutionLemma", 23} -> 
       Association["Statement" -> $CellContext`not[
            $CellContext`and[
             $CellContext`not[$CellContext`x1], $CellContext`x2]] == \
$CellContext`or[
            $CellContext`not[$CellContext`x2], 
            $CellContext`and[$CellContext`x2, $CellContext`x1]], "Proof" -> 
         Association[
          "Input" -> {"CriticalPairLemma", 40}, "Position" -> 1, 
           "Construct" -> {"SubstitutionLemma", 16}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`or[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`not[
               $CellContext`and[
                Pattern[$CellContext`x2, 
                 Blank[]], 
                Pattern[$CellContext`x1, 
                 Blank[]]]]] -> $CellContext`not[
              $CellContext`and[$CellContext`x2, $CellContext`x1]]), 
           "OutputExpression" -> $CellContext`not[
              $CellContext`and[
               $CellContext`not[$CellContext`x1], $CellContext`x2]] == \
$CellContext`or[
              $CellContext`not[$CellContext`x2], 
              $CellContext`and[$CellContext`x2, $CellContext`x1]]]], {
        "SubstitutionLemma", 24} -> 
       Association["Statement" -> $CellContext`not[
            $CellContext`and[
             $CellContext`not[$CellContext`x1], $CellContext`x2]] == \
$CellContext`or[
            $CellContext`not[$CellContext`x2], $CellContext`x1], "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 23}, "Position" -> 2, 
           "Construct" -> {"CriticalPairLemma", 15}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`or[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`and[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`or[
              $CellContext`not[$CellContext`x1], $CellContext`x2]), 
           "OutputExpression" -> $CellContext`not[
              $CellContext`and[
               $CellContext`not[$CellContext`x1], $CellContext`x2]] == \
$CellContext`or[
              $CellContext`not[$CellContext`x2], $CellContext`x1]]], {
        "CriticalPairLemma", 41} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[$CellContext`x1], 
            $CellContext`not[$CellContext`x2]] == $CellContext`not[
            $CellContext`and[$CellContext`x2, $CellContext`x1]], "Proof" -> 
         Association[
          "Construct" -> {"SubstitutionLemma", 24}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`not[
              $CellContext`and[
               $CellContext`not[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`or[
              $CellContext`not[$CellContext`x2], $CellContext`x1]), "Side" -> 
           1, "Subpattern" -> $CellContext`not[
             Pattern[$CellContext`x1, 
              Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
           "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`not[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
        "SubstitutionLemma", 25} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[
             $CellContext`or[$CellContext`b, 
              $CellContext`not[$CellContext`a]]], 
            $CellContext`not[
             $CellContext`or[
              $CellContext`not[$CellContext`a], 
              $CellContext`not[$CellContext`b]]]] == $CellContext`a, "Proof" -> 
         Association[
          "Input" -> {"Hypothesis", 1}, "Position" -> {1, 1, 1}, 
           "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`or[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`or[
              $CellContext`not[
               $CellContext`or[$CellContext`b, 
                $CellContext`not[$CellContext`a]]], 
              $CellContext`not[
               $CellContext`or[
                $CellContext`not[$CellContext`a], 
                $CellContext`not[$CellContext`b]]]] == $CellContext`a]], {
        "SubstitutionLemma", 26} -> Association["Statement" -> $CellContext`or[
            $CellContext`not[
             $CellContext`or[
              $CellContext`not[$CellContext`a], 
              $CellContext`not[$CellContext`b]]], 
            $CellContext`not[
             $CellContext`or[$CellContext`b, 
              $CellContext`not[$CellContext`a]]]] == $CellContext`a, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 25}, "Position" -> 1, 
           "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`or[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`or[
              $CellContext`not[
               $CellContext`or[
                $CellContext`not[$CellContext`a], 
                $CellContext`not[$CellContext`b]]], 
              $CellContext`not[
               $CellContext`or[$CellContext`b, 
                $CellContext`not[$CellContext`a]]]] == $CellContext`a]], {
        "SubstitutionLemma", 27} -> 
       Association["Statement" -> $CellContext`not[
            $CellContext`and[
             $CellContext`or[$CellContext`b, 
              $CellContext`not[$CellContext`a]], 
             $CellContext`or[
              $CellContext`not[$CellContext`a], 
              $CellContext`not[$CellContext`b]]]] == $CellContext`a, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 26}, "Position" -> 1, 
           "Construct" -> {"CriticalPairLemma", 41}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`or[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`not[
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`not[
              $CellContext`and[$CellContext`x2, $CellContext`x1]]), 
           "OutputExpression" -> $CellContext`not[
              $CellContext`and[
               $CellContext`or[$CellContext`b, 
                $CellContext`not[$CellContext`a]], 
               $CellContext`or[
                $CellContext`not[$CellContext`a], 
                $CellContext`not[$CellContext`b]]]] == $CellContext`a]], {
        "SubstitutionLemma", 28} -> 
       Association["Statement" -> $CellContext`not[
            $CellContext`or[
             $CellContext`not[$CellContext`a], 
             $CellContext`and[$CellContext`b, 
              $CellContext`not[$CellContext`b]]]] == $CellContext`a, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 27}, "Position" -> {1, 1}, 
           "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              $CellContext`or[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              $CellContext`or[
               Pattern[$CellContext`x2, 
                Blank[]], 
               Pattern[$CellContext`x3, 
                Blank[]]]] -> $CellContext`or[$CellContext`x2, 
              $CellContext`and[$CellContext`x1, $CellContext`x3]]), 
           "OutputExpression" -> $CellContext`not[
              $CellContext`or[
               $CellContext`not[$CellContext`a], 
               $CellContext`and[$CellContext`b, 
                $CellContext`not[$CellContext`b]]]] == $CellContext`a]], {
        "SubstitutionLemma", 29} -> 
       Association["Statement" -> $CellContext`not[
            $CellContext`or[
             $CellContext`not[$CellContext`a], 
             $CellContext`not[
              $CellContext`or[$CellContext`b, 
               $CellContext`not[$CellContext`b]]]]] == $CellContext`a, 
         "Proof" -> Association[
          "Input" -> {"SubstitutionLemma", 28}, "Position" -> {1, 1, 2}, 
           "Construct" -> {"CriticalPairLemma", 12}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`not[
              $CellContext`or[$CellContext`b, 
               $CellContext`not[$CellContext`b]]]), 
           "OutputExpression" -> $CellContext`not[
              $CellContext`or[
               $CellContext`not[$CellContext`a], 
               $CellContext`not[
                $CellContext`or[$CellContext`b, 
                 $CellContext`not[$CellContext`b]]]]] == $CellContext`a]], {
        "SubstitutionLemma", 30} -> 
       Association["Statement" -> $CellContext`not[
            $CellContext`or[
             $CellContext`not[$CellContext`a], 
             $CellContext`not[
              $CellContext`or[
               $CellContext`not[$CellContext`b], $CellContext`b]]]] == \
$CellContext`a, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 29}, "Position" -> {1, 1, 2, 1}, 
           "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`or[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`not[
              $CellContext`or[
               $CellContext`not[$CellContext`a], 
               $CellContext`not[
                $CellContext`or[
                 $CellContext`not[$CellContext`b], $CellContext`b]]]] == \
$CellContext`a]], {"SubstitutionLemma", 31} -> 
       Association["Statement" -> $CellContext`not[
            $CellContext`or[
             $CellContext`not[
              $CellContext`or[
               $CellContext`not[$CellContext`b], $CellContext`b]], 
             $CellContext`not[$CellContext`a]]] == $CellContext`a, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 30}, "Position" -> {1, 1}, 
           "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`or[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`not[
              $CellContext`or[
               $CellContext`not[
                $CellContext`or[
                 $CellContext`not[$CellContext`b], $CellContext`b]], 
               $CellContext`not[$CellContext`a]]] == $CellContext`a]], {
        "SubstitutionLemma", 32} -> 
       Association["Statement" -> $CellContext`not[
            $CellContext`not[
             $CellContext`and[$CellContext`a, 
              $CellContext`or[
               $CellContext`not[$CellContext`b], $CellContext`b]]]] == \
$CellContext`a, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 31}, "Position" -> {1, 1}, 
           "Construct" -> {"CriticalPairLemma", 41}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`or[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              $CellContext`not[
               Pattern[$CellContext`x2, 
                Blank[]]]] -> $CellContext`not[
              $CellContext`and[$CellContext`x2, $CellContext`x1]]), 
           "OutputExpression" -> $CellContext`not[
              $CellContext`not[
               $CellContext`and[$CellContext`a, 
                $CellContext`or[
                 $CellContext`not[$CellContext`b], $CellContext`b]]]] == \
$CellContext`a]], {"SubstitutionLemma", 33} -> 
       Association["Statement" -> $CellContext`not[
            $CellContext`not[
             $CellContext`and[$CellContext`a, 
              $CellContext`or[$CellContext`b, 
               $CellContext`not[$CellContext`b]]]]] == $CellContext`a, 
         "Proof" -> Association[
          "Input" -> {"SubstitutionLemma", 32}, "Position" -> {1, 1, 1, 2}, 
           "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`or[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`or[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`not[
              $CellContext`not[
               $CellContext`and[$CellContext`a, 
                $CellContext`or[$CellContext`b, 
                 $CellContext`not[$CellContext`b]]]]] == $CellContext`a]], {
        "SubstitutionLemma", 34} -> 
       Association["Statement" -> $CellContext`and[$CellContext`a, 
            $CellContext`or[$CellContext`b, 
             $CellContext`not[$CellContext`b]]] == $CellContext`a, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 33}, "Position" -> 1, 
           "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`not[
              $CellContext`not[
               Pattern[$CellContext`x1, 
                Blank[]]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`and[$CellContext`a, 
              $CellContext`or[$CellContext`b, 
               $CellContext`not[$CellContext`b]]] == $CellContext`a]], {
        "Conclusion", 1} -> 
       Association[
        "Statement" -> True, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 34}, "Position" -> 1, 
           "Construct" -> {"Axiom", 1}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`and[
              Pattern[$CellContext`x1, 
               Blank[]], 
              $CellContext`or[
               Pattern[$CellContext`x2, 
                Blank[]], 
               $CellContext`not[
                Pattern[$CellContext`x2, 
                 Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
           True]]}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False], "[", "\"\<ProofGraph\>\"", "]"}], ",", 
   RowBox[{"graph", "[", 
    RowBox[{
     RowBox[{"reduceList", "[", "CNF", "]"}], "[", 
     RowBox[{
      RowBox[{"\[Not]", 
       RowBox[{"(", 
        RowBox[{"b", "\[Or]", 
         RowBox[{"\[Not]", "a"}]}], " ", ")"}]}], " ", "\[Or]", 
      RowBox[{"\[Not]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"\[Not]", "a"}], " ", "\[Or]", 
         RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]}], " ", "]"}], "]"}]}], 
  "}"}]], "Input",
 CellChangeTimes->{{3.771777464031788*^9, 3.771777475228339*^9}, {
  3.7717777885989313`*^9, 3.771777830083579*^9}, {3.771777875431411*^9, 
  3.771777875626964*^9}, {3.771779543368114*^9, 3.77177954552495*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"fb7b75b2-b0d4-479c-aad2-ffba264c6daf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{
        "Axiom 1", "Axiom 2", "Axiom 3", "Axiom 4", "Axiom 5", "Axiom 6", 
         "Hypothesis 1", "Critical Pair Lemma 1", "Critical Pair Lemma 2", 
         "Critical Pair Lemma 3", "Critical Pair Lemma 4", 
         "Critical Pair Lemma 5", "Critical Pair Lemma 6", 
         "Critical Pair Lemma 7", "Critical Pair Lemma 8", 
         "Critical Pair Lemma 9", "Critical Pair Lemma 10", 
         "Critical Pair Lemma 11", "Critical Pair Lemma 12", 
         "Critical Pair Lemma 13", "Substitution Lemma 1", 
         "Substitution Lemma 2", "Substitution Lemma 3", 
         "Critical Pair Lemma 14", "Critical Pair Lemma 15", 
         "Critical Pair Lemma 16", "Critical Pair Lemma 17", 
         "Substitution Lemma 4", "Critical Pair Lemma 18", 
         "Substitution Lemma 5", "Critical Pair Lemma 19", 
         "Substitution Lemma 6", "Substitution Lemma 7", 
         "Substitution Lemma 8", "Critical Pair Lemma 20", 
         "Substitution Lemma 9", "Critical Pair Lemma 21", 
         "Substitution Lemma 10", "Critical Pair Lemma 22", 
         "Substitution Lemma 11", "Critical Pair Lemma 23", 
         "Critical Pair Lemma 24", "Critical Pair Lemma 25", 
         "Critical Pair Lemma 26", "Substitution Lemma 12", 
         "Critical Pair Lemma 27", "Substitution Lemma 13", 
         "Critical Pair Lemma 28", "Substitution Lemma 14", 
         "Critical Pair Lemma 29", "Substitution Lemma 15", 
         "Substitution Lemma 16", "Critical Pair Lemma 30", 
         "Substitution Lemma 17", "Critical Pair Lemma 31", 
         "Critical Pair Lemma 32", "Critical Pair Lemma 33", 
         "Critical Pair Lemma 34", "Critical Pair Lemma 35", 
         "Substitution Lemma 18", "Critical Pair Lemma 36", 
         "Substitution Lemma 19", "Critical Pair Lemma 37", 
         "Substitution Lemma 20", "Critical Pair Lemma 38", 
         "Substitution Lemma 21", "Critical Pair Lemma 39", 
         "Substitution Lemma 22", "Critical Pair Lemma 40", 
         "Substitution Lemma 23", "Substitution Lemma 24", 
         "Critical Pair Lemma 41", "Substitution Lemma 25", 
         "Substitution Lemma 26", "Substitution Lemma 27", 
         "Substitution Lemma 28", "Substitution Lemma 29", 
         "Substitution Lemma 30", "Substitution Lemma 31", 
         "Substitution Lemma 32", "Substitution Lemma 33", 
         "Substitution Lemma 34", "Conclusion 1"}, {CompressedData["
1:eJwVxWd6gjAAAFBNQoqCEVxhuMCFCG4RBXErbsUbeIFep8dt++N9T/t8Rx8Q
i8V+/vwP2TiLEiCBkjDJcHEO84BnUjjFEoaANJvmBSQQEYhCRsyks3yWy2Vy
uTzI5wu4UKAiFSQqEZnKnEIVokqqWiRFplQslcpMWarIlUqVVquapGk61VFN
r9XqqI4aeqPRRM1yK9FqGcAw2nzbMKEpdYyOYJlWx4a23bW73V67p/Ttfn8A
BsrQGg5HYDQY43F9kpxMHNNxpnDquNidzvDMnZvzmWd4Ix/78wVcLAIvCJZw
2VstV2S9Wq83YNPcbrbbnb+T97v9/jA+HI7y8RjS8OuET6czPp8v4eVyTV2v
t+ztdsf3+wM/Hs/w+Xzh1yuiUfSOv38B2IAunA==
         "], Null}, {
        EdgeStyle -> {
          DirectedEdge["Critical Pair Lemma 29", "Substitution Lemma 15"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Axiom 3", "Critical Pair Lemma 37"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 2", "Substitution Lemma 3"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 16", "Critical Pair Lemma 29"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 22", "Critical Pair Lemma 40"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 7", "Critical Pair Lemma 10"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 15", "Substitution Lemma 18"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 25", "Substitution Lemma 12"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 13", "Substitution Lemma 1"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Substitution Lemma 34", "Conclusion 1"] -> RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Substitution Lemma 8", "Critical Pair Lemma 20"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 1", "Substitution Lemma 2"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 24", "Substitution Lemma 17"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 25", "Substitution Lemma 26"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Axiom 5", "Critical Pair Lemma 4"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 6", "Substitution Lemma 26"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 21", "Critical Pair Lemma 39"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 2", "Critical Pair Lemma 22"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 5", "Critical Pair Lemma 22"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 3", "Substitution Lemma 8"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 4", "Substitution Lemma 10"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 3", "Critical Pair Lemma 31"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 3", "Critical Pair Lemma 14"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 5", "Critical Pair Lemma 18"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 6", "Critical Pair Lemma 6"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 40", "Substitution Lemma 23"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 14", "Critical Pair Lemma 25"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 2", "Substitution Lemma 14"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 6", "Substitution Lemma 30"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 3", "Substitution Lemma 34"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 16", "Substitution Lemma 23"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Hypothesis 1", "Substitution Lemma 25"] -> RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 24", "Critical Pair Lemma 26"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 28", "Substitution Lemma 29"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 39", "Substitution Lemma 22"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 5", "Critical Pair Lemma 12"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 11", "Critical Pair Lemma 23"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 10", "Substitution Lemma 3"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 34", "Critical Pair Lemma 36"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 13", "Substitution Lemma 20"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 38", "Substitution Lemma 21"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Substitution Lemma 11", "Critical Pair Lemma 25"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 3", "Substitution Lemma 6"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 37", "Substitution Lemma 20"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 31", "Substitution Lemma 32"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Substitution Lemma 12", "Critical Pair Lemma 27"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 23", "Substitution Lemma 13"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 6", "Substitution Lemma 16"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 4", "Critical Pair Lemma 21"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 29", "Substitution Lemma 30"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Substitution Lemma 33", "Substitution Lemma 34"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Axiom 3", "Critical Pair Lemma 1"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 5", "Critical Pair Lemma 9"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 7", "Critical Pair Lemma 17"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 11", "Critical Pair Lemma 24"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 2", "Substitution Lemma 11"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 30", "Substitution Lemma 17"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 4", "Critical Pair Lemma 13"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 5", "Critical Pair Lemma 23"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 8", "Critical Pair Lemma 12"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 15", "Substitution Lemma 24"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 11", "Critical Pair Lemma 35"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 41", "Substitution Lemma 27"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 2", "Critical Pair Lemma 5"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 28", "Substitution Lemma 14"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 35", "Substitution Lemma 19"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 14", "Critical Pair Lemma 17"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 27", "Substitution Lemma 28"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Axiom 3", "Substitution Lemma 12"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 20", "Substitution Lemma 9"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Axiom 1", "Critical Pair Lemma 4"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 1", "Critical Pair Lemma 7"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 2", "Critical Pair Lemma 10"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 5", "Critical Pair Lemma 7"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 26", "Substitution Lemma 27"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Substitution Lemma 3", "Critical Pair Lemma 15"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 9", "Critical Pair Lemma 14"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 17", "Critical Pair Lemma 32"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 2", "Substitution Lemma 1"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 8", "Critical Pair Lemma 21"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 24", "Critical Pair Lemma 41"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 19", "Substitution Lemma 6"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 9", "Critical Pair Lemma 11"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 3", "Critical Pair Lemma 41"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 6", "Critical Pair Lemma 5"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 20", "Critical Pair Lemma 38"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 3", "Critical Pair Lemma 24"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 11", "Critical Pair Lemma 13"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 12", "Substitution Lemma 29"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 26", "Critical Pair Lemma 29"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 6", "Substitution Lemma 31"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 4", "Critical Pair Lemma 3"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 4", "Critical Pair Lemma 9"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 12", "Critical Pair Lemma 28"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 15", "Critical Pair Lemma 40"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 14", "Substitution Lemma 16"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Axiom 6", "Critical Pair Lemma 33"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 2", "Critical Pair Lemma 2"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 7", "Critical Pair Lemma 15"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 6", "Substitution Lemma 28"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], DirectedEdge["Axiom 1", "Conclusion 1"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 6", "Substitution Lemma 25"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 2", "Substitution Lemma 21"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 4", "Critical Pair Lemma 18"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 4", "Critical Pair Lemma 20"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 36", "Substitution Lemma 19"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 10", "Critical Pair Lemma 11"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 27", "Substitution Lemma 13"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Axiom 3", "Critical Pair Lemma 3"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 5", "Substitution Lemma 5"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 14", "Substitution Lemma 7"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 6", "Substitution Lemma 2"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 5", "Critical Pair Lemma 6"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 4", "Substitution Lemma 9"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 2", "Substitution Lemma 15"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 7", "Critical Pair Lemma 38"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 4", "Critical Pair Lemma 2"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 6", "Substitution Lemma 7"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Substitution Lemma 7", "Substitution Lemma 8"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Axiom 1", "Critical Pair Lemma 1"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 21", "Substitution Lemma 10"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 33", "Critical Pair Lemma 35"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 3", "Critical Pair Lemma 16"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 18", "Substitution Lemma 22"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 4", "Critical Pair Lemma 16"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 6", "Substitution Lemma 33"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 19", "Critical Pair Lemma 37"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 18", "Substitution Lemma 5"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Substitution Lemma 9", "Critical Pair Lemma 30"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 2", "Critical Pair Lemma 8"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 14", "Critical Pair Lemma 19"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 6", "Substitution Lemma 18"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 30", "Substitution Lemma 31"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 31", "Critical Pair Lemma 33"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 22", "Substitution Lemma 11"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Critical Pair Lemma 3", "Critical Pair Lemma 30"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 10", "Critical Pair Lemma 39"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Substitution Lemma 23", "Substitution Lemma 24"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Substitution Lemma 32", "Substitution Lemma 33"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Substitution Lemma 17", "Critical Pair Lemma 31"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 1", "Critical Pair Lemma 8"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 7", "Substitution Lemma 4"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Axiom 3", "Critical Pair Lemma 36"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 15", "Critical Pair Lemma 19"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 24", "Critical Pair Lemma 34"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 32", "Critical Pair Lemma 34"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 17", "Substitution Lemma 4"] -> 
           RGBColor[
             Rational[167, 255], 
             Rational[167, 255], 
             Rational[167, 255]], 
           DirectedEdge["Axiom 6", "Critical Pair Lemma 32"] -> Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 41", "Substitution Lemma 32"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 16", "Critical Pair Lemma 28"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]], 
           DirectedEdge["Critical Pair Lemma 9", "Critical Pair Lemma 26"] -> 
           Directive[
             Dashing[{Small, Small}], 
             RGBColor[
              Rational[167, 255], 
              Rational[167, 255], 
              Rational[167, 255]]]}, GraphLayout -> "LayeredDigraphEmbedding",
          Properties -> {
          "Substitution Lemma 4" -> {
            Tooltip -> Column[{
               "Substitution Lemma 4", $CellContext`or[$CellContext`x1, 
                  $CellContext`or[$CellContext`x1, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, $CellContext`x2]}]}, 
           "Substitution Lemma 24" -> {
            Tooltip -> Column[{"Substitution Lemma 24", $CellContext`not[
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]] == \
$CellContext`or[$CellContext`x1, 
                  $CellContext`not[$CellContext`x2]]}]}, 
           "Axiom 3" -> {Tooltip -> Column[{"Axiom 3", True}]}, 
           "Critical Pair Lemma 11" -> {
            Tooltip -> 
             Column[{"Critical Pair Lemma 11", \
$CellContext`and[$CellContext`x1, 
                  $CellContext`not[
                   $CellContext`not[
                    $CellContext`not[$CellContext`x1]]]] == \
$CellContext`and[$CellContext`x1, 
                  $CellContext`not[$CellContext`x1]]}]}, 
           "Substitution Lemma 18" -> {
            Tooltip -> Column[{
               "Substitution Lemma 18", $CellContext`or[$CellContext`x1, 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x2, 
                    $CellContext`not[$CellContext`x1]]]] == $CellContext`not[
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]]}]}, 
           "Critical Pair Lemma 29" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 29", $CellContext`or[$CellContext`x1, 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x2, 
                    $CellContext`not[$CellContext`x1]]]] == $CellContext`or[
                  $CellContext`and[$CellContext`x1, 
                   $CellContext`not[$CellContext`x1]], 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x2, 
                    $CellContext`not[$CellContext`x1]]]]}]}, 
           "Critical Pair Lemma 37" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 37", $CellContext`and[$CellContext`x3, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, $CellContext`x3]]}]}, 
           "Substitution Lemma 17" -> {
            Tooltip -> Column[{
               "Substitution Lemma 17", $CellContext`and[$CellContext`x1, \
$CellContext`x2] == $CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`or[$CellContext`x1, $CellContext`x3]]]}]}, 
           "Critical Pair Lemma 21" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 21", $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, 
                   $CellContext`and[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`or[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`and[$CellContext`x1, $CellContext`x3]]}]}, 
           "Substitution Lemma 6" -> {
            Tooltip -> Column[{
               "Substitution Lemma 6", $CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
                  $CellContext`not[
                   $CellContext`not[$CellContext`x1]], 
                  $CellContext`or[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]]}]}, 
           "Critical Pair Lemma 40" -> {
            Tooltip -> Column[{"Critical Pair Lemma 40", $CellContext`or[
                  $CellContext`not[$CellContext`x1], 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x1, 
                    $CellContext`not[$CellContext`x2]]]] == $CellContext`or[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`not[$CellContext`x1]]}]}, 
           "Critical Pair Lemma 30" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 30", $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, 
                   $CellContext`and[$CellContext`x2, $CellContext`x3]]] == \
$CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`or[$CellContext`x1, $CellContext`x3]]]}]}, 
           "Axiom 1" -> {
            Tooltip -> Column[{
               "Axiom 1", $CellContext`x1 == $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, 
                   $CellContext`not[$CellContext`x2]]]}]}, 
           "Substitution Lemma 27" -> {
            Tooltip -> Column[{"Substitution Lemma 27", $CellContext`not[
                  $CellContext`and[
                   $CellContext`or[$CellContext`b, 
                    $CellContext`not[$CellContext`a]], 
                   $CellContext`or[
                    $CellContext`not[$CellContext`a], 
                    $CellContext`not[$CellContext`b]]]] == $CellContext`a}]}, 
           "Substitution Lemma 3" -> {
            Tooltip -> Column[{
               "Substitution Lemma 3", $CellContext`x1 == $CellContext`not[
                  $CellContext`not[$CellContext`x1]]}]}, 
           "Substitution Lemma 9" -> {
            Tooltip -> Column[{
               "Substitution Lemma 9", $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x3, 
                   $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, $CellContext`x3]]}]}, 
           "Critical Pair Lemma 15" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 15", $CellContext`or[$CellContext`x2, 
                  $CellContext`not[$CellContext`x1]] == $CellContext`or[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`not[$CellContext`x1]]}]}, 
           "Critical Pair Lemma 7" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 7", $CellContext`or[$CellContext`x1, \
$CellContext`x2] == $CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]]}]}, 
           "Substitution Lemma 19" -> {
            Tooltip -> Column[{
               "Substitution Lemma 19", $CellContext`and[$CellContext`x3, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[$CellContext`x2, 
                  $CellContext`and[$CellContext`x1, $CellContext`x3]]}]}, 
           "Critical Pair Lemma 14" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 14", $CellContext`and[$CellContext`x2, 
                  $CellContext`not[$CellContext`x1]] == $CellContext`and[
                  $CellContext`not[$CellContext`x1], 
                  $CellContext`or[$CellContext`x1, $CellContext`x2]]}]}, 
           "Substitution Lemma 34" -> {
            Tooltip -> Column[{
               "Substitution Lemma 34", $CellContext`and[$CellContext`a, 
                  $CellContext`or[$CellContext`b, 
                   $CellContext`not[$CellContext`b]]] == $CellContext`a}]}, 
           "Critical Pair Lemma 22" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 22", $CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x2]]] == \
$CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]]}]}, 
           "Critical Pair Lemma 6" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 6", $CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, $CellContext`x3]] == \
$CellContext`and[
                  $CellContext`or[$CellContext`x1, $CellContext`x2], 
                  $CellContext`or[$CellContext`x1, $CellContext`x3]]}]}, 
           "Critical Pair Lemma 3" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 3", $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, $CellContext`x3]] == \
$CellContext`or[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`and[$CellContext`x1, $CellContext`x3]]}]}, 
           "Substitution Lemma 26" -> {
            Tooltip -> Column[{"Substitution Lemma 26", $CellContext`or[
                  $CellContext`not[
                   $CellContext`or[$CellContext`b, 
                    $CellContext`not[$CellContext`a]]], 
                  $CellContext`not[
                   $CellContext`or[
                    $CellContext`not[$CellContext`a], 
                    $CellContext`not[$CellContext`b]]]] == $CellContext`a}]}, 
           "Substitution Lemma 33" -> {
            Tooltip -> Column[{"Substitution Lemma 33", $CellContext`not[
                  $CellContext`not[
                   $CellContext`and[$CellContext`a, 
                    $CellContext`or[$CellContext`b, 
                    $CellContext`not[$CellContext`b]]]]] == $CellContext`a}]},
            "Critical Pair Lemma 1" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 1", $CellContext`and[$CellContext`x2, 
                  $CellContext`or[$CellContext`x1, 
                   $CellContext`not[$CellContext`x1]]] == $CellContext`x2}]}, 
           "Critical Pair Lemma 16" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 16", $CellContext`or[$CellContext`x2, 
                  $CellContext`not[$CellContext`x1]] == $CellContext`or[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`not[$CellContext`x1]]}]}, 
           "Critical Pair Lemma 27" -> {
            Tooltip -> Column[{"Critical Pair Lemma 27", $CellContext`and[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`and[
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x2]], 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x1, $CellContext`x2]]]}]}, 
           "Critical Pair Lemma 26" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 26", $CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]] == \
$CellContext`and[$CellContext`x1, 
                  $CellContext`not[$CellContext`x1]]}]}, 
           "Substitution Lemma 21" -> {
            Tooltip -> Column[{
               "Substitution Lemma 21", $CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[
                    $CellContext`and[$CellContext`x2, 
                    $CellContext`not[$CellContext`x1]]]]] == \
$CellContext`x1}]}, 
           "Substitution Lemma 7" -> {
            Tooltip -> Column[{
               "Substitution Lemma 7", $CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[$CellContext`x2, 
                  $CellContext`not[
                   $CellContext`not[$CellContext`x1]]]}]}, 
           "Substitution Lemma 11" -> {
            Tooltip -> Column[{
               "Substitution Lemma 11", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]]}]}, 
           "Critical Pair Lemma 5" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 5", $CellContext`or[$CellContext`x2, 
                  $CellContext`and[$CellContext`x1, 
                   $CellContext`not[$CellContext`x1]]] == $CellContext`x2}]}, 
           "Critical Pair Lemma 23" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 23", $CellContext`and[$CellContext`x1, 
                  $CellContext`not[$CellContext`x1]] == \
$CellContext`and[$CellContext`x2, 
                  $CellContext`and[$CellContext`x1, 
                   $CellContext`not[$CellContext`x1]]]}]}, 
           "Substitution Lemma 2" -> {
            Tooltip -> Column[{
               "Substitution Lemma 2", $CellContext`or[$CellContext`x1, 
                  $CellContext`not[
                   $CellContext`not[$CellContext`x1]]] == $CellContext`not[
                  $CellContext`not[$CellContext`x1]]}]}, 
           "Substitution Lemma 13" -> {
            Tooltip -> Column[{"Substitution Lemma 13", $CellContext`and[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`and[$CellContext`x2, 
                  $CellContext`not[$CellContext`x2]]}]}, 
           "Substitution Lemma 31" -> {
            Tooltip -> Column[{"Substitution Lemma 31", $CellContext`not[
                  $CellContext`or[
                   $CellContext`not[$CellContext`a], 
                   $CellContext`not[
                    $CellContext`or[$CellContext`b, 
                    $CellContext`not[$CellContext`b]]]]] == $CellContext`a}]},
            "Critical Pair Lemma 10" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 10", $CellContext`or[$CellContext`x1, 
                  $CellContext`not[
                   $CellContext`not[$CellContext`x1]]] == $CellContext`x1}]}, 
           "Axiom 2" -> {
            Tooltip -> Column[{
               "Axiom 2", $CellContext`x1 == $CellContext`or[$CellContext`x1, \

                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x2]]]}]}, 
           "Substitution Lemma 1" -> {
            Tooltip -> Column[{
               "Substitution Lemma 1", $CellContext`or[$CellContext`x1, 
                  $CellContext`not[
                   $CellContext`not[$CellContext`x1]]] == $CellContext`not[
                  $CellContext`not[$CellContext`x1]]}]}, 
           "Critical Pair Lemma 28" -> {
            Tooltip -> Column[{"Critical Pair Lemma 28", $CellContext`or[
                  $CellContext`not[$CellContext`x2], 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`or[
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x2]], 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x1, $CellContext`x2]]]}]}, 
           "Critical Pair Lemma 31" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 31", $CellContext`and[$CellContext`x1, \
$CellContext`x2] == $CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`or[$CellContext`x1, $CellContext`x3]]]}]}, 
           "Critical Pair Lemma 17" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 17", $CellContext`or[$CellContext`x1, 
                  $CellContext`or[$CellContext`x1, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]]}]}, 
           "Critical Pair Lemma 33" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 33", $CellContext`and[$CellContext`x1, \
$CellContext`x2] == $CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`or[$CellContext`x1, $CellContext`x3]]]}]}, 
           "Substitution Lemma 20" -> {
            Tooltip -> Column[{
               "Substitution Lemma 20", $CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[
                    $CellContext`and[$CellContext`x1, $CellContext`x2]]]] == \
$CellContext`and[$CellContext`x2, 
                  $CellContext`not[$CellContext`x2]]}]}, 
           "Critical Pair Lemma 18" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 18", $CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`or[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`and[
                  $CellContext`or[$CellContext`x1, $CellContext`x2], 
                  $CellContext`or[$CellContext`x1, $CellContext`x3]]}]}, 
           "Critical Pair Lemma 32" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 32", $CellContext`and[$CellContext`x1, \
$CellContext`x2] == $CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`or[$CellContext`x1, $CellContext`x3]]]}]}, 
           "Axiom 4" -> {
            Tooltip -> Column[{"Axiom 4", $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, $CellContext`x3]] == \
$CellContext`or[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`and[$CellContext`x1, $CellContext`x3]]}]}, 
           "Substitution Lemma 22" -> {
            Tooltip -> Column[{
               "Substitution Lemma 22", $CellContext`and[$CellContext`x1, 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x1, 
                    $CellContext`not[$CellContext`x2]]]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2]}]}, 
           "Critical Pair Lemma 19" -> {
            Tooltip -> Column[{"Critical Pair Lemma 19", $CellContext`and[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`not[
                   $CellContext`not[$CellContext`x1]]] == $CellContext`and[
                  $CellContext`not[
                   $CellContext`not[$CellContext`x1]], 
                  $CellContext`or[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]]}]}, 
           "Substitution Lemma 5" -> {
            Tooltip -> Column[{
               "Substitution Lemma 5", $CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`or[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, $CellContext`x3]]}]}, 
           "Critical Pair Lemma 24" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 24", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]]}]}, 
           "Critical Pair Lemma 36" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 36", $CellContext`and[$CellContext`x3, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`and[$CellContext`x1, $CellContext`x3]]}]}, 
           "Substitution Lemma 14" -> {
            Tooltip -> Column[{"Substitution Lemma 14", $CellContext`or[
                  $CellContext`not[$CellContext`x2], 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`not[
                  $CellContext`and[$CellContext`x1, $CellContext`x2]]}]}, 
           "Critical Pair Lemma 38" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 38", $CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[
                    $CellContext`and[$CellContext`x2, 
                    $CellContext`not[$CellContext`x1]]]]] == \
$CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x2]]]}]}, 
           "Substitution Lemma 30" -> {
            Tooltip -> Column[{"Substitution Lemma 30", $CellContext`not[
                  $CellContext`or[
                   $CellContext`not[$CellContext`a], 
                   $CellContext`not[
                    $CellContext`or[$CellContext`b, 
                    $CellContext`not[$CellContext`b]]]]] == $CellContext`a}]},
            "Conclusion 1" -> {Tooltip -> Column[{"Conclusion 1", True}]}, 
           "Substitution Lemma 25" -> {
            Tooltip -> Column[{"Substitution Lemma 25", $CellContext`or[
                  $CellContext`not[
                   $CellContext`or[$CellContext`b, 
                    $CellContext`not[$CellContext`a]]], 
                  $CellContext`not[
                   $CellContext`or[
                    $CellContext`not[$CellContext`a], 
                    $CellContext`not[$CellContext`b]]]] == $CellContext`a}]}, 
           "Critical Pair Lemma 8" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 8", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
                  $CellContext`not[
                   $CellContext`or[$CellContext`x2, 
                    $CellContext`not[$CellContext`x2]]]]}]}, 
           "Critical Pair Lemma 20" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 20", $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x3, 
                   $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`or[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`and[$CellContext`x1, $CellContext`x3]]}]}, 
           "Substitution Lemma 29" -> {
            Tooltip -> Column[{"Substitution Lemma 29", $CellContext`not[
                  $CellContext`or[
                   $CellContext`not[$CellContext`a], 
                   $CellContext`not[
                    $CellContext`or[$CellContext`b, 
                    $CellContext`not[$CellContext`b]]]]] == $CellContext`a}]},
            "Substitution Lemma 32" -> {
            Tooltip -> Column[{"Substitution Lemma 32", $CellContext`not[
                  $CellContext`not[
                   $CellContext`and[$CellContext`a, 
                    $CellContext`or[$CellContext`b, 
                    $CellContext`not[$CellContext`b]]]]] == $CellContext`a}]},
            "Axiom 5" -> {Tooltip -> Column[{"Axiom 5", $CellContext`and[
                  $CellContext`or[$CellContext`x1, $CellContext`x2], 
                  $CellContext`or[$CellContext`x1, $CellContext`x3]] == \
$CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, $CellContext`x3]]}]}, 
           "Critical Pair Lemma 13" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 13", $CellContext`or[$CellContext`x1, 
                  $CellContext`not[
                   $CellContext`not[$CellContext`x1]]] == $CellContext`or[
                  $CellContext`and[$CellContext`x1, 
                   $CellContext`not[$CellContext`x1]], 
                  $CellContext`not[
                   $CellContext`not[$CellContext`x1]]]}]}, 
           "Critical Pair Lemma 35" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 35", $CellContext`and[$CellContext`x3, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`and[$CellContext`x2, $CellContext`x3]]}]}, 
           "Critical Pair Lemma 2" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 2", $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2]}]}, 
           "Axiom 6" -> {Tooltip -> Column[{"Axiom 6", True}]}, 
           "Substitution Lemma 8" -> {
            Tooltip -> Column[{
               "Substitution Lemma 8", $CellContext`and[$CellContext`x1, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2]}]}, 
           "Critical Pair Lemma 39" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 39", $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, 
                   $CellContext`not[
                    $CellContext`and[$CellContext`x1, 
                    $CellContext`not[$CellContext`x2]]]]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2]}]}, 
           "Critical Pair Lemma 4" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 4", $CellContext`or[$CellContext`x1, 
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]] == \
$CellContext`or[$CellContext`x1, $CellContext`x2]}]}, 
           "Substitution Lemma 28" -> {
            Tooltip -> Column[{"Substitution Lemma 28", $CellContext`not[
                  $CellContext`or[
                   $CellContext`and[$CellContext`b, 
                    $CellContext`not[$CellContext`b]], 
                   $CellContext`not[$CellContext`a]]] == $CellContext`a}]}, 
           "Substitution Lemma 16" -> {
            Tooltip -> Column[{"Substitution Lemma 16", $CellContext`or[
                  $CellContext`not[$CellContext`x1], 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`not[
                  $CellContext`and[$CellContext`x1, $CellContext`x2]]}]}, 
           "Critical Pair Lemma 34" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 34", $CellContext`and[$CellContext`x3, 
                  $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`and[$CellContext`x1, $CellContext`x3]]}]}, 
           "Critical Pair Lemma 9" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 9", $CellContext`and[$CellContext`x1, \
$CellContext`x2] == $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]]}]}, 
           "Critical Pair Lemma 25" -> {
            Tooltip -> Column[{"Critical Pair Lemma 25", $CellContext`and[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`not[$CellContext`x1]] == \
$CellContext`and[$CellContext`x1, 
                  $CellContext`not[$CellContext`x1]]}]}, 
           "Substitution Lemma 12" -> {
            Tooltip -> Column[{"Substitution Lemma 12", $CellContext`and[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`not[$CellContext`x1]] == \
$CellContext`and[$CellContext`x1, 
                  $CellContext`not[$CellContext`x1]]}]}, 
           "Hypothesis 1" -> {
            Tooltip -> Column[{"Hypothesis 1", $CellContext`or[
                  $CellContext`not[
                   $CellContext`or[$CellContext`b, 
                    $CellContext`not[$CellContext`a]]], 
                  $CellContext`not[
                   $CellContext`or[
                    $CellContext`not[$CellContext`a], 
                    $CellContext`not[$CellContext`b]]]] == $CellContext`a}]}, 
           "Substitution Lemma 10" -> {
            Tooltip -> Column[{
               "Substitution Lemma 10", $CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, 
                   $CellContext`and[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`and[$CellContext`x1, 
                  $CellContext`or[$CellContext`x2, $CellContext`x3]]}]}, 
           "Critical Pair Lemma 41" -> {
            Tooltip -> Column[{"Critical Pair Lemma 41", $CellContext`or[
                  $CellContext`not[$CellContext`x1], 
                  $CellContext`not[$CellContext`x2]] == $CellContext`not[
                  $CellContext`and[$CellContext`x1, $CellContext`x2]]}]}, 
           "Substitution Lemma 15" -> {
            Tooltip -> Column[{
               "Substitution Lemma 15", $CellContext`or[$CellContext`x1, 
                  $CellContext`not[
                   $CellContext`and[$CellContext`x2, 
                    $CellContext`not[$CellContext`x1]]]] == $CellContext`not[
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]]}]}, 
           "Substitution Lemma 23" -> {
            Tooltip -> Column[{"Substitution Lemma 23", $CellContext`not[
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]] == $CellContext`or[
                  $CellContext`and[$CellContext`x1, $CellContext`x2], 
                  $CellContext`not[$CellContext`x2]]}]}, 
           "Critical Pair Lemma 12" -> {
            Tooltip -> Column[{
               "Critical Pair Lemma 12", $CellContext`and[$CellContext`x1, 
                  $CellContext`not[$CellContext`x1]] == $CellContext`not[
                  $CellContext`or[$CellContext`x2, 
                   $CellContext`not[$CellContext`x2]]]}]}}, 
         VertexLabels -> {None}, 
         VertexShapeFunction -> {
          "Axiom 6" -> "FiveDown", "Critical Pair Lemma 8" -> "Triangle", 
           "Critical Pair Lemma 18" -> "Triangle", "Critical Pair Lemma 3" -> 
           "Triangle", "Critical Pair Lemma 17" -> "Triangle", 
           "Substitution Lemma 3" -> "Circle", "Substitution Lemma 26" -> 
           "Circle", "Critical Pair Lemma 38" -> "Triangle", 
           "Critical Pair Lemma 20" -> "Triangle", "Critical Pair Lemma 19" -> 
           "Triangle", "Critical Pair Lemma 14" -> "Triangle", 
           "Critical Pair Lemma 5" -> "Triangle", "Substitution Lemma 23" -> 
           "Circle", "Critical Pair Lemma 7" -> "Triangle", 
           "Critical Pair Lemma 34" -> "Triangle", "Critical Pair Lemma 16" -> 
           "Triangle", "Substitution Lemma 1" -> "Circle", 
           "Substitution Lemma 10" -> "Circle", "Critical Pair Lemma 22" -> 
           "Triangle", "Substitution Lemma 9" -> "Circle", "Axiom 4" -> 
           "FiveDown", "Substitution Lemma 12" -> "Circle", 
           "Substitution Lemma 31" -> "Circle", "Critical Pair Lemma 36" -> 
           "Triangle", "Critical Pair Lemma 21" -> "Triangle", 
           "Critical Pair Lemma 41" -> "Triangle", "Substitution Lemma 6" -> 
           "Circle", "Substitution Lemma 34" -> "Circle", 
           "Critical Pair Lemma 25" -> "Triangle", "Critical Pair Lemma 35" -> 
           "Triangle", "Critical Pair Lemma 4" -> "Triangle", "Axiom 5" -> 
           "FiveDown", "Critical Pair Lemma 24" -> "Triangle", 
           "Substitution Lemma 19" -> "Circle", "Critical Pair Lemma 31" -> 
           "Triangle", "Substitution Lemma 27" -> "Circle", 
           "Critical Pair Lemma 1" -> "Triangle", "Critical Pair Lemma 6" -> 
           "Triangle", "Axiom 2" -> "FiveDown", "Critical Pair Lemma 23" -> 
           "Triangle", "Substitution Lemma 11" -> "Circle", 
           "Substitution Lemma 21" -> "Circle", "Substitution Lemma 22" -> 
           "Circle", "Conclusion 1" -> "Square", "Substitution Lemma 13" -> 
           "Circle", "Axiom 1" -> "FiveDown", "Substitution Lemma 20" -> 
           "Circle", "Critical Pair Lemma 39" -> "Triangle", 
           "Critical Pair Lemma 32" -> "Triangle", "Critical Pair Lemma 30" -> 
           "Triangle", "Critical Pair Lemma 27" -> "Triangle", 
           "Critical Pair Lemma 37" -> "Triangle", "Substitution Lemma 30" -> 
           "Circle", "Critical Pair Lemma 29" -> "Triangle", 
           "Substitution Lemma 7" -> "Circle", "Substitution Lemma 33" -> 
           "Circle", "Substitution Lemma 32" -> "Circle", 
           "Substitution Lemma 16" -> "Circle", "Substitution Lemma 29" -> 
           "Circle", "Hypothesis 1" -> "Diamond", "Substitution Lemma 25" -> 
           "Circle", "Critical Pair Lemma 9" -> "Triangle", 
           "Critical Pair Lemma 33" -> "Triangle", "Critical Pair Lemma 26" -> 
           "Triangle", "Critical Pair Lemma 28" -> "Triangle", 
           "Critical Pair Lemma 13" -> "Triangle", "Substitution Lemma 18" -> 
           "Circle", "Substitution Lemma 4" -> "Circle", 
           "Substitution Lemma 17" -> "Circle", "Substitution Lemma 24" -> 
           "Circle", "Substitution Lemma 14" -> "Circle", "Axiom 3" -> 
           "FiveDown", "Critical Pair Lemma 11" -> "Triangle", 
           "Critical Pair Lemma 10" -> "Triangle", "Substitution Lemma 5" -> 
           "Circle", "Critical Pair Lemma 2" -> "Triangle", 
           "Critical Pair Lemma 12" -> "Triangle", "Substitution Lemma 15" -> 
           "Circle", "Substitution Lemma 8" -> "Circle", 
           "Substitution Lemma 2" -> "Circle", "Critical Pair Lemma 40" -> 
           "Triangle", "Substitution Lemma 28" -> "Circle", 
           "Critical Pair Lemma 15" -> "Triangle"}, 
         VertexSize -> {{"Scaled", 0.012976425998969036`}}, 
         VertexStyle -> {"Critical Pair Lemma 8" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 20" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 15" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Axiom 1" -> Directive[
             RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], 
             EdgeForm[]], "Substitution Lemma 22" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 34" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 7" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 39" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 29" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 11" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 23" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 3" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 9" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 36" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 30" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 40" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 38" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 20" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Axiom 5" -> Directive[
             RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], 
             EdgeForm[]], "Substitution Lemma 19" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 7" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 18" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 10" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 30" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 10" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 1" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 35" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 33" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 32" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Hypothesis 1" -> Directive[
             RGBColor[
              Rational[146, 255], 
              Rational[10, 17], 0], 
             EdgeForm[]], "Axiom 6" -> Directive[
             RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], 
             EdgeForm[]], "Critical Pair Lemma 16" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 31" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 17" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 41" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 14" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 13" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 26" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 13" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 37" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 18" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 28" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 14" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 12" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 3" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 9" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 2" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 16" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 24" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 25" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 11" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 26" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 24" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 12" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 27" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 31" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 1" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 6" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 33" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 23" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 15" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 5" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 21" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Axiom 2" -> Directive[
             RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], 
             EdgeForm[]], "Substitution Lemma 4" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Substitution Lemma 21" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 25" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 8" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 27" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 6" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 28" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 2" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Conclusion 1" -> Directive[
             RGBColor[
              Rational[13, 15], 
              Rational[1, 15], 0], 
             EdgeForm[]], "Critical Pair Lemma 34" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 22" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Critical Pair Lemma 5" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Axiom 4" -> Directive[
             RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], 
             EdgeForm[]], "Critical Pair Lemma 19" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Axiom 3" -> Directive[
             RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], 
             EdgeForm[]], "Substitution Lemma 32" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 4" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]], "Substitution Lemma 17" -> Directive[
             RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], 
             EdgeForm[]], "Critical Pair Lemma 29" -> Directive[
             RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], 
             EdgeForm[]]}}]]}, 
      TagBox[GraphicsGroupBox[{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[
          0.007249643082078366], 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{0., 40.}, {-1.8733653626927094`, 39.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQpcHLpj9/yrbFbY+7UHyPjp7HDywOW1PxMN93ZP
aVwe/dnZgWtbAve2BOu9h8VyDoq9cXZwaWfi+SnnvHeGsCyXwRNnB6XUBy+v
/fHYKwDScNvZYd4Xz/lfPP33atReUq+95Oxwd5a8mCZz8F6Qqg0nnB2sRBJO
fJ8Rttfq4kIG533ODmlgELXXGAQ2OzuIPAPZELu3BqR9ubPD7+e8hyK1Yvce
K5Q5XjjH2UEC6Iycg1F7hQSBYKKzQ0ZRfKvlxdC9MRtYoze0Ojs8+npeumWz
z95l/r+W+Fc5OxwBuTvHcO+Hd0CQ5+yw41af2vdQB1vLvscWfcnODvpx//c4
WoTbNuveaNKNcHZIB7snxfbsGSDwcXZY5MzYVtOfa3tUD6TQ2eEV0BseksW2
CkBf+Zs7O9SB3KlebnuzCWSAs0MPONyqbD+WZNdFqAD9Awqm6jrbjDcglzk7
cIPC80GDrf3LyXYvhZ0dToHDu8m2FKh8CY+zw3GQPQebbbmLgTazOTtA4qnV
FkI7OwAAyK3D1w==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
Fd+Vfe/K1/8AMeY40A==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJwB0QEu/iFib1JlAgAAABwAAAACAAAA4LuDtHeDKsAAAAAAAIBDQO+zS2RG
2irAhvLccMp5Q0A2ZCyPoT8rwNMqf3mKckNAs8wlNYmzK8DlqOYZQGpDQGbt
N1b9NSzAu2wTUutgQ0BQxmLy/cYswFZ2BSKMVkNAcFemCYtmLcC1xbyJIktD
QMigApykFC7A2lo5ia4+Q0BWonepStEuwMM1eyAwMUNAGVwFMn2cL8BxVoJP
pyJDQAd0MBftAzDABTcBnb8aQ0AIbOWOTzkwwMDiflNvEkNADJYhAGZuMMCf
WftytglDQBPy5GowozDAoZt2+5QAQ0AfgC/PrtcwwMeo8OwK90JAL0ABLeEL
McATgWlHGO1CQEIyWoTHPzHAgSThCr3iQkBaVjrVYXMxwBaTVzf510JAdqyh
H7CmMcDNzMzMzMxCQO8Utp1s2DHAxi5e/7zBQkAgcJ2JUQcywCAWKQNPt0JA
Cr5X414zMsDagi3Ygq1CQKj+5KqUXDLA8XRrflikQkD+MUXg8oIywGjs4vXP
m0JADFh4g3mmMsA/6ZM+6ZNCQNBwfpQoxzLAdWt+WKSMQkBNfFcTAOUywAtz
okMBhkJAgHoDAAAAM8AAAAAAAIBCQJyfxpE=
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-13.256772652703091`, 39.}, {-8.256772652701443, 38.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-13.256772652703091`, 39.}, {6.9999999998593125`, 38.}},
             0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJwB0QEu/iFib1JlAgAAABwAAAACAAAA4LuDtHeDKsAAAAAAAIBDQMHH8uw2
HSrAwPCG85t5Q0Ap9/X2f6ApwLwjJ4TQcUNAFEqN0lINKcDwmOCxnWhDQIXA
uH+vYyjAXFCzfANeQ0B8Wnj+laMnwAJKn+QBUkNA9hfMTgbNJsDhhaTpmERD
QPX4s3AA4CXA+QPDi8g1Q0B6/S9khNwkwErE+sqQJUNAgyVAKZLCI8DUxkun
8RNDQA26zMdrfCPAjcWARyAPQ0BJGv+ByzcjwOCLCFaJCUNAOEbXV7H0IsDL
GePSLANDQNY9VUkdsyLATm8Qvgr8QkAoAXlWD3MiwGiMkBcj9EJAK5BCf4c0
IsAecWPfdetCQODqscOF9yHAah2JFQPiQkBIEccjCrwhwFCRAbrK10JAYAOC
nxSCIcDNzMzMzMxCQMOxPeV4SiHAxi5e/7zBQkAMDVWjChYhwCAWKQNPt0JA
OhXI2cnkIMDagi3Ygq1CQErKloi2tiDA8XRrflikQkA/LMGv0IsgwGjs4vXP
m0JAGTtHTxhkIMA/6ZM+6ZNCQNf2KGeNPyDAdWt+WKSMQkB5X2b3Lx4gwAtz
okMBhkJAAOr+////H8AAAAAAAIBCQARCz30=
            "]], 0.38104098918987583`]}, 
          
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJwlk3tMU3cUx4sRVmC8qfUFfRrubcSpxaFYzfndWw2GiAVTGaDAOpmJLQil
YJii1LqHomVmjDgScEwpXU0Iw062QvRQQyaslQjxtZCNwYSyRCSs047xWOs+
ycn3r2/O45sj0pzILl7B4XBS/RXQsR6T/aRJhpwAtSyUvPynTa+VoffSkd6l
ahYMERezJ1UyrGswtudXsODjpTiG5TJ0rtL1rdKx8BfXN5oaL8OrcQlhm4+y
oJt85ODN0Rj9xsBCQYf7oM5NI1UznFSTzcJg0W/tOy00/j79eKEznYWuxbBu
02ka0x62ctjdLMR/rDIqVTSmyAP4+5cjd6WYRtGTgat8ioXcXdoD6XMU5py/
se2TBBacHpU6po/CkbR7oWfjWLBVlK8tNFPYOL+BtyKMhdW/ulq25FHYes+V
ExXEQij1wfhnUgq9X3Y/tPgYOJ2V8vzoiyS8XD557v4sA4Y8aO+3J2HpoVyt
YZqBU73/1rm4G1DW+9Kgbmbg2HUmouuBFGmbpaGukQGHLXMotlGKHvOamtR6
BvTDguGZAilqjqdvyv2UAfPa27y9tBSbFHLr7BkGok0xTav/luDnwb/8uVjJ
gC98a+GHTgkq+xWvanUMKL/nF79zRYL2U/mD1RoGXp1x3qx4X4Lj1LvHPDkM
FI3/7HK5xHhnY+A+DPygafHuuyZGjTvJf2EG7BNl638qF+NYiV/WM6AuZpVK
pRjlkTF+GGic4vmDE+ORjuD8zmD//sc9X+yeFmFB5vyNA/MEQmYcPT09Ikyd
CUBgq/7yxHazCCcDMkEg6HVh+O0iEZYmPz2X/JRACe0fxyXEN3Hd8vsfOZNz
W4To2d7mVlgJZLiCglaWCrEqPDZ0XQuBtKgLe907hfjMVv3c3UBgpPm9Jftb
Qozjj2rUlwhsnh1TVV0XoFS1w/jdeQKRitYLd+UCfPvQFRivIcAI5ix7MBFd
1B9fT50kMPjViJW7LxE197d806cnYL25p577IAGHUj5SlpUSGM3yPZZcXIdt
A92JWYcJeHdtK46oXINdnbTWmkHgxYmFHf1mPr6eHqKrFAT6p/arM57wsKzS
lufYRMDYRndfy4xH4cEfFw1iAonf1hc6vbEYYlqItfAJNM+dzbw1EIOSYEPT
/kgCS8Z5k94djVXPBA3aEAK1HUvLy8tR//8Xh8B/xDWOfA==
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
CX//32Cw4X/Opstb
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
QLJXE9fDkepv/SqJAf8Fc5/VMA==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
Xl6Z9sR7lcaA/wPDzdIP
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxNlwk4VGsfwCWUS7Qne6mLMNs5s2HGf2YQSpaQkJBU2nCriyIRfZZpr6/Q
1SJ040a6WlD/NhQtN0tuESItSirfvZmW+42Zee5z3uedZ57fc86853d+Z+Y5
Z2ZFbPRdqa6mpvZc/hp9765Ou/Bz2jxUGx0pEiivtm4DTRscjo55dzRBAlfJ
bemtp2wwS/fe2oZYCehabr3BXm6L2Ddta/ZqCRzc/6M0nGuHhz55GPUuk8Cy
n5NfBNrSUIe/buEDHwlEtKY2GgnpaP57gp63swR8246a+XMY2Lbqp/CVbAns
T3YzV+9goJ3PUhf9uRKIXXHv5dS9TLSItbniOUUCnM2WSW7VTNzo23X9Fz0J
GBa2Wfa8YOLV95dsftSWgPHQk5fP9Fmo437p7151CQiXkrUiPguXhHbObf8i
hqSu58XaESw8SbeqUh8WQ0dqfzEni4WDNUdKVgyIIUjiVNtQwUKeFv2brEcM
n83fvbzWzsI0nYHKhsdiEKU9vmJcQmCkf9BK11wx7J6W3rT7CoEd3Wc7zQ+K
4WPlYb/WuwTeyRlzZ5lUDNGhuouH2gm0Whps+S1dvt7U/vquPgI/u1z+/D1J
DPmPLSpPDRIoWGwkWLFZDH5Ft6c6/kXgcMqOYet1Ypi1o/FtyRcCzR4MmC6O
EIPGarbDm+8E1gqCap4tEYPzgrHyC0UioRhiKHdWctIjS/kUw7BQyfWxxvIp
Bn17JU+eNDrE8JWt5OByTfkUA7KUfNpLVuglE0EQQ8nvB0eHCO7SlMzb3Suf
Ipio4jS79lS7dhEE0Ck+lSK4oeJtoz7FIvii4oZRn3wRqDMoPvtE0EKn+KSL
II5O8UkUwTMaxWeDCAxUzB/1WSECUzuKT6Dcz5raR85W1D4iOG5J7SOC6ypW
5Jkkghgrah8R/GZN7QOQZEPtA/DEjuLTC1DPoPYBqHVUMqnoA+ANFJ9igF0S
ik8+QKgrtQ9Aqxu1D8A7DyUXKfoAFC1U8pCiD4DaImofANkiah+ALG9qH4DX
3tQ+ADQfah+AZT7U7w/ABh9qH4DVKvYoGHYvGHYCNxV3dY4OJ9BTcdzocvVO
UKM6npZiAScALyVHKYYTGKp4pHD0BJ3gmIqlo3l5TlCn+vxsxXCCw75KrgrT
kU/58fypPkKwDVTyM4WPED4GK1lxevVCWB6mZE2FjxCOxVJ9hHB5i5I/K3yE
INqqZMXl5gmBtV3JFgofIUhTqT5C8ElX8gKFjwB27KL6CMAwk9pHACZZ1D4C
aMui+ghgJIvaRwDm2VQfAbhlU30EEJtN9RFAvordFT6O0JRN9XGEr9lUH0eg
51B9HKFDxasUPo6gK1WyTOHjCKSU6uMIi6VUH0dYJaX6OEKMlHq9HCBWSvVx
+Hd/pY/Dv+spfRzgTQ61jwPI6FFCqzEkJn7X84rydoDNM3ePHNcgcY87p+eV
gwMscd/KjP5B/nue32E8aOUABdfs+tMmk3jls5r6lhkO4L3t9IxBYxIfhhTu
TRnnAKu3P79dYk1i/091DRNG7OFVQ99QJY/Eb4JVv5q8tYcHgaVH9D1InFqd
wS7vtoc5dSOeazexMXcc9zYjxB5ueq9l9hxj4+sA6D0w3x5a/kyuNKpl412b
ffFVLHtYGk62GD5io32GdfoRE3tY9DL7wLMONnKjtLXtx9tD1dr0D1GdbKxr
ZGjkfeTD3kHzwcpmNvZVFWyp7uBDx8bQzNvX2LjPMiAsr44Pue8FN/NOsPG+
id91+3I+9A4cDfU7J/dr19paQvLh05gERuoREnMefctbYsWHdkf/hU9SSfxJ
qO7bZMiH/fm08yEbSLxtNPWYli4fTGdpRmgHk7gzmkjS+sqD5Lvtwd1uJJ6b
F/ax8Q0PKo+cKejhkjg/JPdrQDsParJ/tptgReLCf3ryim/x4OgpseaKmSTW
TOE+rD3HgxS173cSXhE4/u0UATeYB39tv2ri10mgRqLelfuuPNDxuMHtf0Tg
r9+10s1YPLgUqm3AuEOgLOHbMWsTHvxTe+AqEwkcHPig8W4cD3pWhdsMXCRQ
6td3ec1HLoSGxIWGlBPYUtlSU9DBhc15dUvSzxB4U/vmhD11XLCcGzoj6hSB
QQHnSrnlXJigE5tZuJ9QfX+4sH73UxNNKYEP7w25DnlxIWjubG1hBoH9GbU4
0Z4LzQ+cF3glE3hmX1Nz/RwutEslfbzNBBoMmqRMm8iF6OWmLbJoAln5FbdH
vnAgy7nV8NByuX/ersJNrzjAFqy+NG4xgevfFRhntHJgnfvjUl8XAnP2yuxo
Nzlwt1t9otkwS+XDAbNunZ2dXSzM89WdV+/FgU3cuBcBjSycmmvjuY7Pgbp+
NpldxcJHjrce+FtwYPpgQEziCRb+Yd9WkTaBA5GerUfn5Mj3Pxj+6X9/s6FC
o6I8cwsLc92iDpY+Z8PXKW8unAljYWRg38Hie2xw2ZpStNODhXE3nw73X2LD
go3rxqa0M9HzTuyvtT5scOf3hJTeYuKB0N18Xyc2SKf/9iW2goklrwtZkbZs
MBrX3PXwFyZmRv9+6JMBGwZ/8Na+k8NETs+1CDVNNvwwe2580FYmVnjeOpo1
RMK6hb626dFM/Hzuhv3+pyRMz3o81z2Iibrjq11m1JEw/umFyCIPJr71L7sy
s5yEmC0r1TYZMlV9SDBYYLtyrw4TN0Xall73IiHoXa3L8q8M3NJz1j+ATwJn
meHJ7rcM3NDZFzHHgoSSXFHi1E4GLgl83GwzgYTfTxP3ZU0MJH3TStb9TUBQ
8tCxAzUMHN/4qru/h4Ajc+JfPzvLwPs3xiXlNhGw8cjd8o5cBmbyu7ftukhA
5Rqj9LsBDJUPAQdP+x2OlDBwl0/m6V4vAuLfGxen0xl465CZwzM+ARHzN120
M2KgMWFtGTCHAM+yoPoQLQZKrYvWLNAnIEF8vGzuczoaJhxWvypjyZ8HzjQW
VNHx+izZh7J+FiyIevjKMouOOy3+4Bo1swBOTtO8GkLH8GSjFk1kQVhgWN7M
BJrKhwU7qhZm3xTSsHiW1+IWL/l6qUW812Np6NLG+Xicz4LB6vWnshrsULDT
RNJkwQJyxcnG4hw73GMz1jVAjwWseOcK8JZvb3opE44w4Y1ssZ//FDucH9UY
ntHHhICBhxdetNri2ZGyRNuHTEh0r3704b+2uDZjjwuzhgmGXYf16tNsVD5M
CG44bFXKt8GtVYXDMd5M2Fll2+k1OA8PWEt/nuLIhANnAm3Pn5iHpdfM3nta
y7efMJzevHgeNsSHBJsbMGHZL3G55zXmYZ+fpCZrvHz942GXvS9Yo4ZfyySp
jAG1RX1xZRHWaLlFP8RykAGu57/XNehb44Lq4dylvQwom2jaeTbZAjkmZLS+
PwPEj4LWLsTZaJx85sQHEQNuX5sx20R9Nt4rWyqMojGA9affGFPnWeha6gzr
DRmQZTpZ2yvDHP+TEF2spcWAfLOCuLB9ZjjH5vDLyOd0kC01nJM23RTvq93z
6LlIB9u3h37UyjfG8ZsS4lNz6MBrm5T4epYRtuzMi3ELo8NMg92mdiUzVc9j
dKipnnTBhG+AM6vjv33SooNe46kn47qmY1Jgoa5jJw30XJ33DxydhuGjt88q
Gly2/fSkYc1UxOaykfB9NJi8vfxCwaIpWFCR/dhpIw0MBdvMYtwmq+7PNLgf
FWBkv2QStozuzqIB86uw5FviRLRpytTTNKBBimxtzuZV+sr/g2o0+D/odbsS

            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-22.000000000803368`, 40.}, {-1.8733653626927094`, 
            39.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJwlkmtI02EUxpeX5Y1YhoMgY2JhVl5q8d9e6XJ6X6NAKJFcZSqYSZZNB26F
U4eaiDUzzSKlTFfBUJfOnPUhyyNGTTFFKbvIWFlGy5k3NizDtdUPnvPwcM75
9oSdykvK8uLxeJvd8nhivrd7csj7RzyIC5qzKoM5dFSl9az8YhB9FXb5RHCo
vVGqP7nIgHV8ycnfw2G/8Hyf0M5Abr0cNJ7MYf260IDYrwyMoWLhdgWHAs/D
BIPAc9ZKVRWHW4rHIorHGGheVJ9+1MrhJ9v4H6OZQUDU/pbJQQ7jRnU89pyB
4b5Txp/hUOyhi0H8KKTtEEiQ3z5WadEz6EjvbLsoluC89ZWj8Q4De8Ih+kHm
zuZgtbKWwXK9b5hMLUHfs10hGRUMLAdsB382SjAaW8yZhQxqkhYf6/okKB92
XC9SMBD2hucqpiSIdbeUbVkMFFq1PMVfipGCa/K5FAbZpu5G54gUE2qt+ksi
BqmaAn34dyk2WZan1qx37zcYEzUuKR4eTF+9aS2DK9UnGvhCgsnH/IL6/Rjg
G1VpzzaC3eVLi9MuCoJZH/9mIJibFNN710lBZeHHdh4lWIIG+YSdwkJToXP2
DMHpYYVLN0mhnMtMTVUTNBYXKhfeUYjSPctwagm+HvJAYanDa8lwh+DL6HRX
Tx8Fx85WQZ6BoEgY6X3kCYWNW01tu58S/FgW9b7sIYULN0UDIQME55U5muMP
KKwoZ7N/vyWYbZ90jNymYDKLtD8+E9xnq9trq6PQUGOK+WYnqPKcV1FoH2qV
zTgJBubfY6sqKMwVefoT978/JRT+AiOAGdQ=
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxVln1UDWkcxxO1qTbLHpbUbou2I6q5uZO579+ZkVOkkry0lfKel6IX5G0t
tnRbi2S9pI1Dis5BhbydY5/D0vWSFUlySlgWJW+xKrL3zp0/Hr8z997zOXfO
M5/5zPPHfD99YcQsWxsbmzzzx/Ibntrd/B1AbKQZhSu3Ew4XvGGJttx/8t/t
IgovHvHUPmLJwaG1fQpei2g01M2qq2FJ4Oxn/gueiUgTHySlnmOJS8LCE6r7
IuZVV+HLwyxx8Ju1x/62CPI07+7+7SzxP3Pl+Y0r5vM3BBt0q1lidN63u+BP
EZmn7sy/OZMlvQc3H59bLuL9orHTEoJYYuraxygLRVRfnPJFgIolkUOS/dt3
iQiq3BNbNYwli7Y+mRuXKyImZfBMXw+WDAxzvD07W4Sjqck1qh9LJkTWLuu1
RsREU92acS7m/wtDIqKWilCnOu10cmBJij4xflSiiLOm9Pjc7iyZNJgrvD5d
xF2TR90/Niy5HHHIvWuyiBKpD0uUIywjokzmVTe8zIeI0zKbkt0qk91EnJO5
T2/LiDDJHFNqF11qJ+KazPvDOgrDOgTUyPyy1TIC6mVWbXzIbXwo4J7M63zq
1vrUCXgus6RzVMA2mVdafIoFbEixcqXFJ1/AlUWUT46AyCQrR1t8MgQMnU/5
LBcQNMfKLyw6SQLKp1M+MwTMiaV8pghwDaZ8RggYINJ9BFzXUT5uArQquo+A
WJbysROg9Kf78DjnR/m08rDztTIn9eHRNZzuw+P8cLoPjyfD6T48RvlQzyuf
R70P3YdHoS/dh0eRH92HRxND9+ER7k/34fF+BN2Hxxg13YeHTkv34eGlp/vw
6AErS3l686jh6T48tot0HyA8kO4DfBhN7x8gP4juA5SOo/bzUcA9jPIpBsaF
0/sH0I+n+wCt4+k+QFyElYukPkBOBLWfk4B1EXQfICCC7gP8EE73MZ9P+3gB
baF0H2BZKL1/gF6hdB/glHx/Y3a3Be9uM2CJzPcaLGPAaJlTLMtVGuAts720
gAEeMs+WxoBEmdsLLTdowGT5er9Z8nIGNMi+g6Qx4IPcpyLeyXwYcDKS9tGj
1xQrN0o+etjGWFm6vUo9Nsdb2U7y0cM+hfbRw3epld9LPnocW2Fl6XFzeuxa
beXBko8eTWtpHz0yMqw8VvLRIXs97aPD8yy6jw5lRrqPDolG2kcH0Uj30cHD
SPvo0MNI++jQmkX76NAoc7Dko0VtFu2jRc1nPlrUZ9E+WjjK68+RfLRwk7lD
8tGC/cxHi8jPfLRYaqR9tNhrpJ+XBtVG2kcD+2zaRwMhm/bRwP1Xuo8G47bs
XFDZpSSb/jt7Zmu4BlOKo8vdO5Xkoc+73L1aDTSXg6tt3yrJjJ7OLzZ5a/C2
Y8alJS1K4pxtUxXjqoFRVZK37L6S3D9y06enswbvMtwCnWqUpGl5Ru/fP6mh
bTptGvaXkjg29023eatGTFCG590yJYmzyZg2tkUNl9eHsjOOKUhc1o5txe5q
VPwYfrE8X0EY27EHvPupERx9smFypoK0TEr8976zGqY3j66nJStITuanCVXd
1GCG3Nndc6qCfJfTrbWlTYXMlpwx/UIUZMeS1ON4rMLFkK+q8zQK0hEwscR0
S4VXoyJHbB+uIIE3iq7+cl4Fh1uxyU7fKciKoAS3xUdUeDdtVX5yOyP3UeF8
/cyG/q0Mqak9Frs/TAV17InNZx8w5G1J1cBHnApTn6ZVTL/NENOD0j2eg1Tw
Xv1HqN1VhoT/NLVltpMK+75VRBURhmSvqu060MbhQqVfbeBxhqQ39a9rbuCw
ZfnOCw8PMsS12DPdr5KD08gkr58LGJJU/aExtZSD78dDna65DFkcV+B8aieH
mvzAuE/rzde/6VC3ZR2Ho68GpGWuYsjjilLnsiQOlzq91aWpDAlx2FbydTSH
fmfSy1bOY8gg08my00Ec8v261zdPY8i8d/0HFY3kEBV1+ejHKIYMya3ovOXF
IZS7pi+PMPsX5OjHDOCw8qrLip4hDHn5TckzW2cOTX03JHQfzcjvYxz+B1+W
lQo=
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxVlgtUTHkcxyONV1bpjhmERGK3hKU7r2a+917lrbSdbFuI7a0jzzgbtR7j
UaS8n3VCWbTIZq217N+ulV06FKsxI2wRq1VZ7Qnrsc39d87+/c48zufMnHs+
8/n/Zs4MmJ0SGtvewcHhQOvd/hyy0LH10Z84yDMGWW/zYu/7jCZ3q30c419K
ONfl7rSd/UcRP8v5n143SXi4g9zytowkzQ2njBfqJLwrDKrJDh9Bhnr2WFJq
leCRdL9592g/Ujn/xpxbVyX4ZH5hLBv/EWmofunufU7CwOLIgv1/DibL4syZ
RUclOF1f1ddX6UnSu6aWhu2UkF//MLZ8Zy/y7OqV3SNWSchNudy7ndSLXHB+
PfzBCgkwrrBMalGT2Q2/hcVnSDgyzSX/xCk1uT1fozibJqH87OK5Pulq0m/H
mMB7qRKKk0qCSIia+M9odL05T0JgzM/eyb5qMqBMk7wrUcLur466DufUpLrC
I8xvloTDfFIHZyc1SU4/9Ou2aRI2dn/XOioy6mP7SGj5gPLySu/Wm4QnbXx5
vnvZfHcJ0W3v7+FqHwlRLpSjTjhFnnCScM+VcmHwq4PBr0Q8dqPc1GAfEak9
KWuzazXZtSKyelFe5WtZ6WsRYfWiLOt8I+LaUMrL7D6HRDz3pVxm99krYuxI
xidXxGV/ypF2H7OIpXrG5wsR4aDcaNeZKyImkPH5XETBBMbnUxGLohifj0Us
m8X2EZEby/i4iziRwPYRYUtifJxEuCSzfQSEJjM+DQLy5lDWyH0EtCSyfQTE
RbN9BDydzvYRcDKKOa+9Akqj2D4CmqazfQQkR7N9BHjGsH0E9Exk+wgISmH7
CChfx/YRkJTD9hHgu4PtI0C5j7Kcx1WAx362j4CQIrYPUHiY7QP0L2b3Bzj/
NdsHwHFmn79pff93jM8hwK2S3R/A/Q3bB+C19t8JdVsfIGEN5SK5D1D8gLK8
z3MBRVg7mWkfYMFNyrQPsIE4ykz7AKmhHWSmfYB+NynTPoA50Elmuj/AoSKn
/32cgLUtlCfkN4/PbzbBW6OQ+V61fUxYmUB5gf1yZSbsXUdZIV/AhPLDlOPk
MWFxZG5+8msVMX9WeNExxIQus0akn3ymImfPbDo9Q2eC+fu6PRX3VKTTai/T
Ei8THseXvPj1kooknYmLnOxqwqjE3K17ilTkQcQnzn+8MSLh/JqUoAwVWRRb
P3VkvRHm+Nz1v4WoSO87w3yE20ZkxpTUePdRkapzffd0u2zE+H+9zAUDlCT8
n7GzEsYZUTsxsq/lAUeGiDUxf/NGNI1NSx19nCOPBlbcOD/YiJRGc86ZLzmy
cTd3rJwzYqaYNicmgiPuRcXP+7U34idEdvTXcmR70K6DJxsCsP2JV8wwD468
TLOSddYAVJtsKyZ/wJExQfPGFfzS+jrSorc4ciSt8DP96+MBcHhm78u19QlA
7XPKLw/aFyAAZS8oy+unCUDxO8oDPe0TgOxOCpm/je7aegvAAjfK4+XzMiDc
g/Jd+bwM0PpRpudlgDso0/MygGRQjpd9DMjaTPmV7GPA0AMKxseAXSUKxscA
yznWx4AnZZTp/uhx9Rrro0fG76yPHh1usz561FkVTB891DYF00cP3sb66GGy
sT56DLexPnp0tbE+Oly3sj46pFtZHx3UVtZHhzgL66PD0yrWR4ftVayPDjPb
eJDso0NQFeujQ3AV66PF0irWR4sLVayPFh9aWB8tnN/ro8UOK3teWijaPu8m
2UeLaW0s63hqkfVeHy0K3uujwV4b66PBUhvro4HGxvpoUHeb9dGg0XYx27s9
Rw5nbK38OViDmpq3urxOHAmeMqlxhlYD0lDaIcaNI2GVG3/gB2qw5l1d/VJP
jpzuGqGb0k0Df+W2pjujObL81dcJ+1t4VPr92CNnMkf2520YO6qGR3hwbOjm
xNbv74vmW47lPC4tXHu8dj1HnDs+6un6HY9++7w+XH2MI6FXZneMOsBjS96G
7t3ucGRz5+fdh2fx+CuTVxKFkvzT8cs55kU8vGYP1u8bpiSplzr3jprJA4Mi
Vhz8REncAnP6lE7kYai49uj3xUpSscpt3kYtj96JmXNHbFOSYyu3qB4P4WGt
X6c8XaIkRwSXHhd78VgeceVO3BUluUTWzxzgzMPh5NSLqFG2/T/k8R+UWnwN

            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
RuZUW+b/Dgf+B8uxWJE=
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-24.000000000803198`, 38.}, {-19.000000000809905`, 
            37.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-24.000000000803198`, 38.}, {-26.000000000812122`, 
            37.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-24.000000000803198`, 38.}, {-10.999999999922693`, 
            37.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxVlXtQVFUcx7cIkYBKxzHylUrJNKIx67J3uffu3e+9PhI2Q1fTxRcr7C6L
CEL4ACZDXu6Wz6IxTQUmFnQcX6OZNmYew1kyY1RsZC0Cn0wBFVNWiMV09977
x+k3Z+/O559zP+dzdmYnZa61uZ7U6XQb5E/oe2JRmPw0EZ0yM1HT7jlW+wdD
zCf1S64+kpAVOP4y/4Ahh165ObL2dwm7LEFX8DuGzHT36Nf0SBgz825+0VcM
ifasPZN8R4LueitijjHkqVdd9cPaJcz6+eMfGj9iSMK5K7+0XZHQvTXFYi5j
SEV0Q13tBQn3zt7KveFkSGRc7+mckxKEAusqz1yGnB9qSDT4JYQF7BHGZIZY
XyrUP9onYW6gfkXrVIas/vCnnIwaCZGFcc7pExkyOu3pdvd7EmYHbo9JH82Q
+YtuljxbLvsEguXznmFIrP91W/pGCaaCqL1RwxlSIOQ5ZuVJ6LtU7KgJY8ji
OJP/WqaECZcmBu/rGPKN7ej4oSXy+XNDfRgyQxkJGatV3tQWLy8JpTkqtxSO
k5eE0x6VR44IjYQYjZedCJeXhKpslRvTBv1pgyJe0Pi3X0MjotWtsmnHPXmJ
qNe4clqwYlpQxC435XNKxDaN3w75HBRRrfHXIZ/9IordlM/7IpxuyqdahNVN
+ZSKSHBTPvkihmucHPLJEtHlonzsIuCi+4iIdNF9RFx20n1ElGus5Bkhv89J
9xFxNYvuA3iy6D7AQCblcw94J5PuAwQcKhuUPkCig/I5CFRkUD77gXMr6T5A
cAXdB+hYrnKT0kfef5nK/UofYM9Sug+Qlk73AU4tovsA9oV0HyDeRvcBXlxA
/34AYT7dB/ClqZxa9zCl7qEFg2+o3PVjaCzYrfFboe1aLEjXeJiygQWpGruV
saBG40f+0AEtyNf23x7Ka7Lglvb+ycpYcEPz/cwRJS8LMt6kfQSU2lXuVHwE
TNH6KcdrEZCl3Ue44iOgvoD2EZC3XuUBxUfAiRKVles2CXBuUjlO8RGwdTPt
I2BypcpWxceM6dW0jxlHttB9zKj10n3McmDaxwy7j+5jRq6P9jFjg4/2MaPU
R/uYsVHjFMWHR76P9uGx3Ef78Jjjo314fK/5ZSs+PD7XeFDx4bHfS/vwqPTS
PjzWeGkfHnYvfV8cUry0DwfeS/twMPyvD4c4L92Hw4F1HRnNQ0ZyeNXmusb5
HEabs8tiHhvJgpuPJ3fzHHbcbljZ+dBIll4K9sdP5aDL+ODfpD4jaZ76fGTu
WA5FZ/XLR90xkp3RZ3KPx3C431dVWnLDSL5wn4398wkOtn98dlezkaSyY5/j
B1h82S381X7CSDhv14KqfhbxR5oWXt9nJNvnhXe29rDY3dZx4OTdJHLx3d7U
hmYWEX02f0RyEolNbfKfr2NRMjA8+1qtgezckdQ7roxFz99DD6JHGciUJXsn
XFzFYkWPYdL5PTNIR8N14fBrLNquHo69kzCDfLqu0xpMZDHnkOPb4mt6cvTy
hdnW8SzOFS3mqyr1pOWT9QlhMSwS9ds8YXP02v8pi/8AB26tRw==
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxVlX9MlHUcxxEGmwkDJE9ImEE02MTm7qnunnuee+79PDCH5iYx/2AjsPhx
nJySqLUgGSDcYUGULl1ZQQRGYiokZW7lvkkO8o8mIsSowEJxoUNMYAKF3T3P
d+3jZ3fP7bV7nmev5/X8is97NbMwMCAgoNL39f8+uTfIt7SyAH1Skcp5tiHn
u6V5DcWc69+vbs++r+Eo54umnT+Y7mjo4fxBVNxjG25omOMc7t/gVw0p+wxO
rriaVHFVg5Pz9b+G/uns09DK2dbfEpB6QcMNzoJ/zmqIfM3g/f7N2zWs4txb
Gttb+rGGab7+ykjfHNLQxDm7Mzi706MhkfPxrQttW8s1VHG/u1O+KdHQtcdg
sXHc2piv4XypwTXrhw+sz9Iwsov4CBq6dxqsH06Shq/cxCdWw2Ax8YnUEFNM
fII11OwgPgsqInYQnykVzGWw1e8zruKIi/gMq2h10T4qOly0j4pOzn16HxVn
XbSPitMu2kfFFy7aR0WTi/ZR8Z6L9lFRRX2yVDxPfQQVMS7aR8VMEe2j4iJn
PU+kitoi2keFXET7AJNO2gdocBKfcSDRSfsAnxYY/KzeBxAKiE87MJ5Prx/g
y3zaB2jMp32Aes6f632AVs7Teh/gWj7tA8QX0D7A24W0D3C/kPYBMpy0D/CR
k14/wKCT9gGWOG9untnUPONANO819rt/HIjnvMe/u14HnuAcou/Age/59k59
HOjjPN/mP0AHUvj67/jzWh2Y5JygjwML/Px+8/IK38eBvGLqoyCR3x+juo8C
qcRg/fB6FXTsNjhY91EQUU59FAzuN/iB7qNArTRYP91WBduqDX5K91EQWkN9
FLhrDX5B97Gj1EN97Ijz0j6+/720jx1zHupjR6+H9rHjMw/1scProT527PNQ
HztcnDfpPvL/bPjI2O2hPjJqPNRHxjjnIt1HxkPOC7qPjNVe6iMjxUt9ZFi9
1EcGvPR8SUjzUh8J2iN9JMiP9JEQ4aV9JN/z9LftPUsW1vFKVfPxDAn3pKLK
sEULyxhaTJiQJeSNteaOzlhY1o/D00nrJFzJOfzvc3cs7MK61cvdayQo58wv
Pf6HhdWFnnOfCZNw8nZtedmAhXU6v42eXSbBtHgwq7DHwiTbmgj5gQ0Hbipz
v3RaWFLd2Iu10zYEbTCldw0ILDBr/Ov5OBvePPnu3q5ugXVHbq53m2wou9R4
68RRgf3cZD0SFWbDYkVU27EygW15eHrg3jIblq7FnajJEdgzwqmNIbMiai+f
mivQBPaGTZjKmBDRmNvToCQLLHmVerl/UETsoVx3RLjAlJ6hkYM9IlLyKg+P
zJnZ+bSZta+fEcH6nw78ZMzMjn3oHxF/H0kvqvjJzPyv07IaEX8WjJa0dJuZ
IyUzpKlERL1yK3p5i5l16TeEiOmE/MLuRrPxfkwXEb4yc1trhZldGb50u9ki
YnJF983BXWb+/BBRHfFWzJbtZjbpXz1GxMDa/rvBmWZmmkirCwwVcV1scAVt
NPP3u4j/AL5i2gk=
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxVlQtQFHUcx1EGMgVLhiYHEEMYKXlE5wF/9vbuvrsZDaCDYCNoJY/iOJ4G
YSQjQsKVNsSIGWW8GjjQyIChSZoM+RONaNTEwwFsCIYIKyBCxeJh1N3eDv3v
N/+7m8/s7M5nP7u365F4ODpprY2NzWumj/n3sVdtTd+E2kjzNMo3VkclOBCq
blXE/LAo4uLWmB+7XAhtfGLQqfqOiLgG/w+9fQgN1U0p0qdENNd6lZWoCXXS
H24LGRdR5RzScSeK0I1PJn1kPyRix/00r4N6QrnLPX/094jYd6Cdfl1IaLlD
XU11hwhXX7+zvhWEenhOf57SKqIw53L1+22EjqzUBSiNIt5zb1q4fpXQl72y
FIsVIta662oVNwjNP/tbSty7Iq5lT1T0jRHqFbl+SPe2iHG37ZMNvxN68LnB
ow+9ISLazf94621Ctxp3Rx/IFeGStayb/5vQHE1G/K4MEcS1tCb9PqGxnsTY
myiiyeWWt+u/hPZEf7plJUZEaKa5TwjdKY2IzgwL5/d7m5aIMJm7s9xMS8TN
dAs7bTKPiGyZn2+xMy0Rj8hcH7lkjFwS0Jlm4T9nzSMgV2ZSOmFaAoJlLvIb
PuE3LOB0KuPzmYAEmY+Zfc4L4GS+ZvapFOCayviUCViTyvgYBMymMD55An5J
YXwyBYzKHGL2eUnAeArjEyvAnvXZKcAhle3z/3ZLHwH35P2lPJsE3Ehh+wj4
mPVZAl5hfWaBHazPBHBTz/YBypMtrJT6AFwy43MeuKtjfCqBKzq2D1CpY/sA
JTI3SH2A0zLPSX2ACzq2DzCgY/sALclsH+A26+MNbNezfYAoPXv/AJl6tg9Q
IHN4zXxYzbwWb8o89pN5tKvbs82H69au7m8vHUALG5l10mhhJ/Oi0XyCWhyS
+R1zXqLFBrn3Nmm0WCdfz0vxG0xLi5g01keDJfn+HpV8NJiT/z/S6XVrEJJl
YTvJRwPHPNZHgwvHLLwg+Whw97iFpctNNJgutLCn5KPBmROsjwa/Flk4QvJR
Y7qY9VGjysD2UWPFwPZRY8DA+qjxpYHto0a9gfVRo8zA+qhRYGB91MiUOUzy
4ZFoYH147Lfy4bHHyocHJ3Oy5MNDKfOS5MNDYeXDI8DKh4e/lQ8PPwN7vVSr
2y0+Kjxl5aNCkJWPCqFWfVT4NnskrmvF9H5IKKyp36vCblVygeMyoXsHl7fd
4lXoGa07NDpver5+Mzzn7aPCrhfP/BM4Q+gVn0cfTHNV4atLihecxwk96dCW
1uyogmK6OO/oAKGtui8231ujQt3SydikLkJ5zvVhfoGD06Tmr6EWQh9/ayyq
eI5DfmPDvj7T++PIHrvR76c4TPSNVLX+HEybT02H13VxCJyJNj4QEkzXhzcY
22s45CyuS+6tDqLFpYHTbgUcKhZXJh2cg6h7zDn3zgQOLTNKj/YPAulwXZ+m
8VkOTf2Nm8d9A2lrzmjEcACHc5/Ef/d6r5JevN7xTMQWDpm5+/niIiW9WnvE
19aRQ0BQid42VCm/Tzn8B3asteE=
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxVlQtQVFUch8nHNmojIIFmpKWJaIGPpeWee/fxuxfbCZ2AycRXOJYjWjwE
QURgBWwWkJAU34qhoWiNECOGjaKeUINZFVA2QgUfLD5K8ZUW4KTt3nvHOfzn
7O58Mzt3v/udnXPf+WLZJ4v7ubm5ZTpfrs+3k/o73znqJk8Ioq58mlLix9FD
8Y991vdI8GwcsJlEcjTrzd899zySYAjz+qyhkKNLNQceTr0j4dqcrLNRTRyN
nRRT9WG7hJ77Mxy3RxKav2XUvEtNEtZ6pJTGxhN6Wqjt7KqVUHT8+ZB7NkJH
jI6c+XWVBI9/bvpGT+ZpHi7v2/69BM3R91ouf8fTYbvD2iavl7Cncel0YxVP
beLCMRMKJFxw76kUzvD0RdnOt6blStiY1jao2c7Tika3huxsCQ53r1kDOnja
cuxbbUeahPrG4qLGezxNjfkobHGS0//oqtqgpzzdcnXiqCExEkIaf+jUPuNp
oHdwafPnEtqGBvSce85TuMe1n5gtwbbS1UegWnkkfKCy5eJ455KwLUXhukRf
55LQtULhYZ6ukRCk8vzKgc4lISFZ4X3hvXvDe0WUJCn84L5rRNQuV5grdDiX
iNZEhb8OaF0T0CqiPJ7xqRJhj1M4w+WzX0SIyvUun2IR3bGMzwYRj2MZH6uI
oDjGJ01ETRzjEy8iX/094vJZJGL3MsZnjojIZLaPiF9XsH1EDF7J9hERmKqw
nMdTxPur2D4iNGlsH+B4GtsHCEtnfBxATTrbB7BkKBwk9wEqMxif/UBHBuNT
DLxuYfsAegvbB4hWuUzuAxSo/FDuA1RY2D7AeQvbB/BbzfYBIlazfYCdq9k+
QL9M9v8DrM1k+wCBWQpPL3kSWvLEhMcqX2t3jQkt2Qovd12uzoRLaxTWyBcw
oSxH4Wh5TDiWq3DPXtcNmrArT+F1rrycCR+vVXiMPCacUbl64RDnMmFwPutj
hK/KV2UfI7rV78u3V2fEHpUHyj5G7MplfYwYoHK37GNEgeorbzdnxCSVx8o+
Rty3sj5GnFN5huxjQL2V9THgupXtY8DwHLaPAeY+PoaXfkofAxy5rI8B3nms
jwFT81gfA/Qqh8o+emjzWB89fPJYHz1u5rI+ejxU/ZbIPvqX+9cr++ixpE8f
5/X79NFDk8P66HHLyu6XgIY+fQTQPn0EHLeyPgLarWwfAQG/LLje5jwvi1KJ
YX6EgFfDE7KTnOfpgynXt9cIAuKmc45TzvPWUjQvI99fwNwfqwc2dPGU7DjQ
edpHQFP83TsbHDz1D7VdjNEIuLC1pcD9D56aS06aM//lMX9c6iNzPU83Fefh
xZ88EoY3+XBHeOoljqN323nYbv9ED50iqg+PK6U1icc2EXqkLD2nM5zHzNCy
resWE5r7150TNwgPbWvs1Ak6Qu1TKtwXvMtjZYSHVKghdEfG2dS57jzGHFr/
W00LR6/a0NvcS6D7r+vk4TKOlvgO3XT+FkHFFP/AlBSOtiVqzeZmgsJwk+cr
Zo5utlV6GCmBPVL75Sxvjp71y/n7cDnBsMgb5Z6NwdT3fM2gqI0EAaXp/lnr
gumB7BOX69IIxhv7XdodEUyTpn0T/XQRwTO/FSeTRgTTZO+x5TfDCA5G2a90
d+po1RNrxTaBgO8YHTi5WkcDO6q+GjqRYO/h2dVvFOioo/3gDfNIgi57evLP
0Tpqv53gJb1G4BFSsLS/Wac+3wn+B0ONBzQ=
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-6.999999999946567, 39.}, {2.3874235921539366`*^-12, 
            38.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-6.999999999946567, 39.}, {-6.9999999999457145`, 38.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-6.999999999946567, 39.}, {-3.000000000005116, 38.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
u2lWrNciHvzNSw5ScKL+P085PPgfMJBwVw==
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{5.5288749455487505`, 39.}, {-8.256772652701443, 38.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{5.5288749455487505`, 39.}, {-6.9999999999457145`, 38.}},
             0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxNkw9ME1ccxw+0w1gQW4zDlBHYMoGw8q+I1Dn4vndxRIQ5NToUMTA226Cr
q2bCNiWom3EJwtgIYiMaCETUBEUw/kPfmag1wSwMJnSiEelA/APlj05tRb3y
mthfcrl8cnfvfe5zufCvt6z81lcQBMiH+yzo27+p+GCuGwWhRMTgLmHpkHUO
goaeFPzwo4jjptPXEuYFQeHD8pLMIjLe9N3+XqVCd/r2/6hBxJ+GYNWSvADs
uaaesGSLSA821pQP+2GWuXJ/yhciLs1uXnfF6oPCTFeLNlVEZ+1gReu9Z6mX
16VtNMaIKL2+nXTF9Kb2VxfVj2hEJG4wh77MsrMBv3KT5Cfi3nsnb10VBtnH
ltdhxQoR7ENLS1XWEGvoL42L8hXR1ZxwzpT7iOXd19dcmaQIaS2yZwQ/YWur
FIa0FxTVUZsXxJcMs3Kf0f0XxijS1QFNmuoRNu2jlyrNI4o4U3amf66DtTrD
Joz3KZZ99lXQNJuD1e0zxNf3UOg+dYcZZTr3tFDk6jnv6IzY2XmUQkjmbDWH
WM2HKFQLOatV8lRQVCZxzj6lyD71K8U+Dzcsd9Yv/4nC4WHHiDwmCqvneX2Z
PbksX17Ps98erW23Nkv2SfXy0VFUeXin2yeC4t/FXj4hFK4kLx8VhVPr5aOg
sIV7+TgJKtVePiMEMQLnZLePnWDFrTfyOLiPjUCI4cz7EHQ9fz3FvA9BwmXO
N6b6EITu4sz7EPwOzrwPQcWrySnmfeT7z3DmfeT1CjjzPgT/aCbf+WTJPrNe
vfPREYRFf3fjrlp+v+izT/WRBLMfXwgvXDbKjN1rGwJDCTo+f6C8eUz+njrN
ktY5BBtSxvfe0Y6xPurqivAnaPu794/GnjFWOd25omA6wUOhPjbu6DizFL3P
fp4EBtrTc7YdmmCjh1dp1j8HTid0aLaefcoOFDZtVI4DGQsSN33y4hkr842s
/W0YWJySWV581cVuFyXaLb2AOT8lsr1UkHrmHxwIaQdqDHk9512+0i/+axoD
24C6E4GrlbEKqS9qU/S2JmB37NJaNt9PGi62mdLqgEUTAW3d/TOk48rDW0sP
AH/9n9PwZf5MaW7HxSRaJl9fpM/RNiol3c34i8a9QMmlI/bNzf4S/9+Btxcd
1eg=
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
PQ6wxqSCcdhWqX0+pHDwf40F0hc=
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
aw==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{5.5288749455487505`, 39.}, {11.99999999985323, 38.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQzWB5OmWirJgDiMnQ4OzwvkipUnWWmEP4hPjDmyqd
HY6bsQd/0RN3EF/UeVi7yNmhpaXy09/b4g72pnUM2ZnODhoxleFOCyUcznja
VhXEOzts2svWdLBO0uHA/WMGNiHODoorFYuqS6QcpL9LqZxzd3aokDulXtAk
7XC33zJEzcrZYYssw+L5K2Qc2FYpHXTRdna4vuzwY87nsg7TXK9laUoDzdul
0HAqRs7Bc/UK2ysizg4dr07wp52XczgiXi/3nNfZIdJsz6Q7dvIOrN2RvEls
zg7K835x6K2Wd+BhteBy/efk8EXAyVKXS8HhRquU6ISvTg5XEtY8N7BVcMjh
ZdRzfuPksN5uD/+iPAWHY7Nfh8Q9cnLoXFW4sWGegsMzg1udD687OSQsOQME
Cg5nQdQZJ4e9Ee1MPD+B6vXi/u856OSg8yX682ElRQcFMU1m/+1ODqvLvOZ/
8VR0uNWke6NprZOD1YMgtnl5ig4fS7LrIpY4OdwyKNU4MEHRIePNo6/nZzs5
dGdsZI3eoOhg/3Ky3cvJTg4+7ezz8s4qOpSClPc4Ocj1ln/89VzRgbt4kTNj
m5MDQxUjMKKUoPHl5AAAqla1TA==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
o5Qda3sFv6r2RYiUZcLyxf8BvbIZrQ==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
+JwbGV8ndQOeniw1HJdAxC83/B+U8XLS
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{11.999999999851354`, 39.}, {11.99999999985323, 38.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-1.8733653626927094`, 39.}, {-3.000000000005116, 38.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-1.8733653626927094`, 39.}, {6.9999999998593125`, 38.}},
             0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxVlX9Qk3UcxxeKiqJiQ01URAT3o/C2B++AZ8+29/OQqMW1TuvEPC9SHGqg
pwYWIREchj9SFK5lzpZKUJqIYvTjiPuyHPMouaATfxTqBdqhYs7EhBa2Pd/n
rm+f+2671x/f7/P6vra7zV61ccmaEJVKlRt4BT+LC0YE3hOJKjjFEnz5lAd2
r2wafktCyBbKu6rerV2xRULDBsruKTktU3IkjFxP+UP1zLGGLAkDWZQnyhsk
bH+VsnZbp2bbEglfLad8va/LX79Iwo6llPmOw6pUi4ShdMqJ8kioSqMc3N6p
kXAVlL2bZgSWhCsmyk9OCk7geUmUV9SHBpaE3kTKn9qGqm1DIu4bKP9xNzgi
6udRTt7TE1giYhIolyZcKkm4JCLiacanQUSFnnJh0KdWRLTC54I+ThFNOsZn
n4i1OsanTESsjvEpEHFLy/hsEOFWOCXos1rEZ1rGJ0NEpZbt8x/TPiKcWraP
iDqF5TyTRLRq2T4i+rRsH0CtY/sAaTrGpwco0bF9gPXK/efLfQCnnvGpBY7q
GR8nUKRn+wDP6Nk+wAnl/Bq5DzBS4XtyHyDhf30C+zVsH2DOHLYPcGs22wf4
IYbtA3hmsb8foCua7QOoFH7O9WCx64EV0kzK17qDY8WhGZQ3B4/zWhGh8Cj5
ACsaoijb5bEiXeHB6uAFreibRvn9YN5kK95TOFYeK+Yq3Jg5LrCsOPcU62NB
jsJXZR8L1ArL1/Na0DSVcqjsY8GxKayPBRkKP5J9LBinsPx1J1vgnkx5juxj
QeFk1scCQeHnZR8zhiNZHzO8kWwfMyoj2T5m/KNmfcw48tMsTcVjjmge2W5/
bTPDNyrfiWGOLDTwSxJTzLjZGJo5yc8Rz4T4gxdizSi53r4pZJAjzsqIVle4
GWdLOzrUAxzpbPZ37nso4OQn44sX3OOIvaKv5fh1AUgqLXTc4sjLYy7u728T
ULCQ84b1cuTwXM+CZV8KKK1Zat7g5Ui27CPg83mbe13NHBGWl9+5YROQW6dp
/usMRxxnpi/7PUVAe/wbbXnHOLL1zZia9XEC2qqWhUW5OHKl+oPLGycKyPq7
o6B3P0e+TynyPRwy4aPlPdEXyjhiSLrY//imCbkndw3c3sqRmEOH23f+bEK3
v21Yuy5w/uvdlQ5iQuo70ecXRXFKHxMyusSCe6Ec2Xu6v/ahzYS8dSMzx/iM
pGfaqWf1vAkHku1FFb8YySpnvfBEvAme1OwL5R4jGcvf2ft2hAmDO0ev8dUZ
ydX7qy0H/DzmT1iY0OYwkl9bpy56pY/H1vPx89TFRhLaOPpEcxcP97mj2T9m
G0kGScxtPcsjUtVyeeAFI+m6cbB8UwOPg+YvchbPNZJrbqv9hoNHvrsoLEdl
JJ2e/SKKeFTvSa5f2W0gJ+9WRZXYecQduZwZ/Z2B5JvTfMde5DHof216nctA
4k7XeL4VeMS6Oq6FlxlIc3qj45Sex8fl2jo+10As4/Oy90bxyP3Gvj0pw0CO
//nb/JfCeVQYd68dkWag/18qHv8CqhF7jQ==
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxVlQ1QFGUchw8QGswv0ADTxiSVJlT0lrPb3fv47WYOoqPG2GgqmR/cgXyJ
GClyiuKdWkrJWFmhRKJMmh0FieNo8yogWjaJjoqFEKGiaYp1MoSC7e6747z8
Z+9unrnd95599u529NLMhCR/g8GwQXmorx15AcqzQAzq5MsYpvPD7YnHe9fK
iFxH+YNdG8sXZst4PpfyqbC0k2FpMrrWUN499IX+k5bLOPUe5cHaATKycyi/
7LoQ5UqQMehdyn/cvvy4Ik7GzmzKQkOp4TWbjJ4sypw2MjJXUlYPvxAlo18m
5fqskcom43g65dAQdWR8kkZ5YUWgssnYlUp5/+zustndEqpWUL5/Tx0JnSmU
zYVtyiZhkc4FExo3TWiU8NjJ+FRKKNU5T/UpV/bX+YzqUyxhopPx2SnhOSfj
45YwxMn45EoY42R8MiTM0plXfZZJKHQyPvMlnEhm+0iYlML2kXA+he0jYbd+
vlqeEAmeVLaPhL1pbB+gOZ3tA8RlMj5twO8r2T7AQf36xmp9gIVrGJ9y4OJa
xqcYCF3H9sHT7xvto6yv8wGtD5Dsotyh9QGOudg+yvoutg/woovtA9zKY/sA
dXlsH+CHPPb7AxxhfQKBczrHl/iml/js+Ffnlmvq2DFe/7xV6nL1duTqHKQt
YMfp9ZQd2tgRs4Hyf2XqCdpRrPMONa/ZjuB8ypHa2JGj85F3nlU2O67nsz42
vLmRcrPmY8NpnbXTq7dB2EQ5UPOxobKA9bFh9GbKXZqPDR6dtctttqFN55c0
Hxsmu1kfG1brPEPzseJbN+tjRZOb7WOFn4ftY8U0D+tjxTwP28cKh4f1sWKV
h/WxIsfD+lixRufpmo/lKVMfC7I8rI8FyX18LJiis1PzsSBK527Nx4IRfXws
COnjY0FQHx8Let3s9RLR1aePCF+fPiIeuFkfER1uto+IjOymxTW9PDm4JL9k
/xwRd0TnhoGPeDLn8qPImxYRjpZ9bzf7eDKvtrEjKlrEtcSiHtNdnvwYHR6c
OkJEQrVx0bBWnngGVKd6B4qovbM5d+1FnlQ4jkY89BMR+2jr/KQangjCiCGW
LgFf3bB1XqngydgtLW9s7hDADX4y8plxU8jKpr1cUoyAkaKvfZ3PRCJmHQ2P
GSPg/Df2qBU1JtI/8MTMPeECZixv/a2hyESm+h2+4A0WsGPJVf/KpSZSJ2/9
2tHN49OyqJKBnIkUnZ3VcPI2j5QJ57ytASZy4GND/MkrPPo9Ph0bcymW9Cvf
MzSplodjSMTEzgOx5FDP2ImHvTwWiH4z3q/nyORNQlYNeOQkty8NP8SR9KG+
6FuTeVx78Ms/sz/kyKgzgmFUJI+PrlR1c6s58vqXg+45Q3jsGF6cW/MWR5q+
yHx46okZl6oLVvXaOdJ+LDFs0t9mJH+f+uf1cRxx9DTO8V41Y1rw3J9yBnFk
wbLWMtSZkXnc8kpVp5GQuzmh171mtP081n9Pi5F8/pk6ChfGOV1njaRQvZ0W
mOFd1JxRWmUkGJ8QtDfDjHhTe0RwqZF8p/1AzaiIWJZUVWjU74/K8UEJc/e5
jOTXxro7Ja8q/KTyxqV0I1mv/Z8p+wdsGz5zsZH8pe4+XFkvtOF+YIKRhN2c
usV/gPJ+9PbkgGlGen83mPE/q/ftUA==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQGtthDa2SHtzaOv56VbbL/2xO7599PJYQmPzd1Z
8s223VMal0d/dnLYnsC9LYG7yfaQWM5BsTdODnNfBDQo3m+wnSEsy2XwxMlh
o4dkxS7Telt+kIbbTg6X1GuBqMZWA0RdcnKYl3cWKFVp++DltT8bTjg5iIC0
VZfZWl1cyOC8z8nBGAyKbcHUZpj9BbY1IO3LnRzkQMp9sm2PF8ocL5zj5PDE
ou+xRV+6rZAgEEx0cpizdNKOHJZU2+gNrNEbWp0cPAJsk8XXJ9su9f+1xL8K
pj7Z9v07IMhzciiOb7W8uDDF1hIs7OTw5bBS6oOXabbNujeadCOcHM6eAYFC
iHuMnRze3J90v3t+8f7eGZ78vhpODmb2C4H8yfvZuxbzx8g5OThMnBFdK7xs
/0J2R5MEUSeHUomlQPnN+yMFlWojeZ0cAvYX9Xqt3LffeLnbK3c2J4dp82YB
1R/br3NyXbU2g5MDm2eZnh/Puf0u5VGGLL8dHar1lwH1X95fu9GT+9I3RwfT
Aj72t1dv7L9aXsM59bOjw111b4OKee/3H9h0vj3xgaND4I1/+k1zf+zX+j//
95Fzjg6ztiw/ohbAcEA09m3K/n2ODt6LuYXOv2Y+UHdm++GADY4OthbaDLsU
2Q+k+f4Xr1zs6JBbzNb//CPngbP3DydazHB0uB8yd194DM+Brc2sC/v6HB0m
3Hnfx5XId0Da8sjV6jZHhwauf////+c/AE4+DY4OAPtWB1I=
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
WspCRrQF9e4Zr6bfPyz8PwqSrjM=
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-8.256772652701443, 38.}, {-10.999999999922693`, 37.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-8.256772652701443, 38.}, {6.99999999985954, 37.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
5v83BPB/z3X3Bg==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxVmAk0lPsbx4dLspOdGTNmJ/s61nlm6ka3REqJFLqpJN1SKteSrVVEqKuF
JCqpSYtbKQ9dQnIjuUNXES0iKkWU/GXm/z/zf86c857PmXf5zPd9fs973jEK
2eyzVppAIBhJEQg/tqA+OVUGSJiuOTA5S8SfUwMrvo/xYUhTxAezEooDhvmg
rCPiau3wKu0BPqzQE/ExDZKCZS8fWg1ErPrjgKd82G0oYnZsCyu2hQ/+RiLu
6mv7JqjjQwhdxE7Npwlz7vIhlyVimx91lQ/bTEQc8+PwYj6sMRXx/S3E+1tO
8CHMTMSz1Kcqgw8pYg4QyAYIUvhwXbz/Wa/xQq9oPoyLzzc0OFURfPBli9gx
rYeTtoYPtWKfJDNhopkfH2y0JHxs+NCtJuLpn8PiwwNlCR8iH94rSvio82GR
ooSPLB9eK0r4jPOgQlnCZ5AHDeLzc3749PBAU0vCR8iDULZkPjzQ2Lf/irYU
Ebm8ZI+2Yh6057Jr/WWI2GKa9mn3CR5cC/rXtVGeiH2fvR1sMnhwtr1Qd6M6
EZNPNKq9S+FBqWziMgcDIhZRpBIuRfOgsTdy1JJFxIWJg3t3bOaB9I7or8vt
iLizKovh8SsPvCqyQy7+TET2s+EVlBU8OP82pJaxj4jNP8+IfGjNg9Z1xqf+
PU7EGendOomsqesV2spZXCYipSjT0ZbIA4PTyVKkaiIaHtQT9qjxwCpQ71BR
KxGl3KKGD8vyYED48fyDV0S8f/fcQedxgIWa6n6pX4i4VflKfs8ggJfqtqNv
5EkobZJuvb8HYKTeYH2XPgm3a87hmQoBCJfrNyzyJqHtdD4AV09yT8WHkHBI
+uuzN8UAOdeTXnnvJGG6zYZFD04AXBjJ5ldnkFCrJjahIwPgbVBU2eNLJIwp
5+zU3gsQ8Ilun/I3CesVcq3jYwDGBacftg2TcPzuaYHmVoC6nIGddQaGqNLq
9bFtHUDtWVmOv7shzvilcLQmEOBaZFFjnx5Z3D8AywbTg88sJeP2HcueK7EB
epX3lqodIeM52X+8AkgAq1oOCqyekPFh57VkQw2AbpKXXZIyBbsnh2KXyQPI
MZ5vcrem4OuN+5x/IgAUfv+c8NKPghVzvkXPH+TCjQtHtgQmUHDfnAK5qE4u
uBn/6XK5hIKO/0iTUh9ywdPx6S1anxGGThcX/BZ50rUsqcjN6hqT8eZC6O2l
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
HyL8ByfYZfw=
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-3.000000000005116, 38.}, {-7.99999999993679, 37.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1A9MlGUcB/D33jt4ySOJzCvkgEASEzANJYTZ+30fNHVaIppeXLUTMCkb
cOqWqJQCBXR1k7SCy8E0FLY2dnIlrQU9WMrfad7QXXVGciQFyNVCF3Cc3d3j
1vvb3vfdZ3vfd9/nu/d5Y3OLsnfxHMdt8B3+K5fsP4VQLjCZUC9hvvPBK996
pwi6FzGbThxt0v9DkLqQ+YLmzU7NOEFWDHPtvKg5y4YJoiKZw/wP/EJg0TAv
LrUnlNp97wtn/u3P6x5rN8HZUOb0q6e4zA6CFQJzin9sBLE882H/400+e+/5
RqBdRm2X8STBUzPMD4f7poZg0xSz3hqkt75LcOBf5jObpxs3HyRou2/3hG8K
CZTTzKvMrjRzHsFOD3N5sqMsWUdgC5HlSSFofoA5sJwEgnoVcyCPluDTKVme
cIJjf8jyBBGYrsryTEt470tZngkJZTXMaf48LglHC2R5HBK4Hm/ArB8J1+uY
WT8SdMXM3YF+JLy/ySvrR0L+Uq+sHwnj872yfiTEKb2yfiQo787K+pHw0cSs
rB8JK9yz/+dJkfAd3/BixoxA2zY8afk9QQIyyrbfHhfouRfiMjq0Etpqm3jN
NYHGkGhNe7iE2MiwnK9sAuXjoxKHgn3rv/D1y31VAs2ZjD6Y7AF+MjfO0W0T
6CLbQmXD30D8EXueXiPQAkPipdQRIP8TUnDtcjCN8az8ftIJHBi8vF61Loim
L//cUtECuG+PDtz7S0X3daXvi2kEhqrcRX0NKrrtTpntZB2QZXVG7N6qos5v
Duk9ZiA1v9VuV6uo+rEn9jxbAdQ2Flvm9iipK/SdodwSYL/xUeMCk5Lm1lV3
vl4I9Pae3X53i5JWta8J2ZoHfGaN3ng6Skl3lFjPR+uA8/N3pj5XydOZI2Kc
82lg5c3TLprD00vtsa0fJgAjHc43rizl6VjPF5GrtUB/y9x+o5Kne87ceHX0
IcBlTROaHQqamdV26OMgIOlijnZvi4K6TxiHD0+KaB7br/6xQkHVi3+o6L0h
Ykd85UCnXkF/fuk1x7wuEauKat5al6KghiW6QZ1VxPP9xycNagW11PlHxPLj
ux/8dZijJt92LykXURl5q9xMOSomZQfXF4rYuCtMt7eeo+f8n69eRGmxq7r6
bY7e9O/f9SIeX50bMWDg6BXHxbGGZ0Qs6zMFZ6/l2PeYIKJ1gWGLMomjo/7b
I0ScShycGnmEo5pbayr5UBGcN7DB7v9/RPwH+PgTEQ==
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxNlAtQFHUcxw+FA5S44+48REBFKiGTGEQEH3vf/csQBQhDgAGDMoiSBRIY
EJR4lFgiLyUYi/RUTm0wwhfaw+RnmZCKCg0vA4+Hk4FoysgoRtrtrjP6nd/u
zmd297/f/ezMuiWlR66dJJPJIs2bcJTNF3Y2JBOzHCkO7cVT1tiQ/zGflVfG
GU4ad7fN7LChKs8O1Z5RhpG/YluXxtrSjHXDPqnDDJZdttuSR2zpXEr6qYB+
hkkf1o1Xlk2hSq+1e+WdDEPnA91b2VQq/vHi7baLDA3nrlhp5Xb0zdQaw55G
hpSMFfuSu+3oltuthvXHGJ5corHTp1+gqP9qvH2NDNVzYn4L97MnL/cMn/Fq
hgE3rbpynz2VV/y9fnUFQ8cFman4sT1lr5jSua6IIdNV67koTEF9b3XkKgoY
vneKuVdRoqC2mtDI2ByGw420qKZRQcFcWmJgGsPripiJ5EEFBbr7G68mMZTZ
aHXdDxV0PrLO9fFKBn2o4EVJC8QwFOzOSqyYrKR5dZEDFh4MjbvaC8LslaTv
aYp/zZUhgJud7DXbfP3ZnYafVAx3SqKt/QKUhPjjdQdtGPo+y3ovOVZJtbWe
W+8+5mH/qr78B72SMuvHPL4c45GTl5W9sF5Jlesdq/aO8HDZGO3adUNJ2u7S
FvkNHr8YTXmrrqvIbpLR7IfHS8G1A3Od1TT0suCHRwQr2nYhQk3vVgl+eLCK
zelBm9VUGiH44fFocdEX1QfVFBMt+OGRG1D78PfzajprFPzwoFJTdatJTZdF
PzwuL34l/9g9NelFPzyMy4oMqRNqahf98NDvf2KO+qkfHr6HJN7UNtc85j6H
JW7KcDEPj47vJHYQY36foxLHH7EyD4/pJyQ+EP7IGP4I6GiQ+J87QoB/T0oc
UDroXzoIFJ2S+NP5XZ/M7wLo6Xlfoc5xwKrxuT6HAH3Xc32+BnwmC99XQyqh
zg7ASSex2KcQ8C2W+KDQJw/4fFjiu0KdDYAizkJksc8aoOWaxGKft83Pa54s
suQH2BJnKbLkB8j7U2LJD7A6xOpZHwfAu9bqWR8rYPSBxG8a7r9huK9Dja9c
ZFOvEB1YosSZwnJNOlzNk1guLqDDxq0SrxNjvn+45XqhpYZifx3qWxmhQ8S0
Fz9yVGnILmGfR/0SHbLktu0nPDSUv6BkWaqHDqozH48kBGuoPqhuVplWh3lL
N59VZWjIUGVxxVGuw2m9MuqP/RoKdy8KkT/g0Lzd22jo1dDPI0GVcUMcwhJM
R3PcptHw6KJvNb0cQsdcNsVvmEadCxPKfds4BEy92Z6Ur6X3x5YfWHCEAw1m
H52Z60jbJ1o9e8o5mPIvKcpWTac5IdYzvT7gUNFz8+5xLyfy6x8s8Izj0D/R
HFUy5ETNZ1KiLzMO50zpS5zLZtC1wZ27XLw4oLDHmDDLmd6JWBuiceEQddt+
R9RXzpRtaUprsOMgm25t9uPy9H/I4X/8kzkU
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxFlHtQU0cUh294JJgqlIiIGuxQxKgMGvGFtjc594IVp4oOoqCI1YBBefqg
tIriA0GwVqU6pYIFkYAWKgREGECzq0gMRNQiJZTGRigqIijEgEIJNA9m/M3Z
3flmdme/PX+siyjWf6cFQRDBhmFcCQ/jZIMJU7xh03r3/QOXWPjLMs/AR0M0
pMhFHu1zWfja3BZOtpaG9LMF82sLmJgSd3tGddOwv2gwPmsyE7N3xVYub6eB
P30DM2KPNWYs2HmZqaJB8XeNev5tK8yrUfY2KWnw6uMPvxqyxIcm5uVkIxqS
Asu2Zc22xITr65u7y2i4ag9sb28LXDaax18socETF66Q1jMwPWuv51AWDSW1
3T0R2xg49ELX7m/O0+DMJVz2MxiYs46tEp+iIaG+u0VRRuA1AS0H7I4Z7lcW
2kbtI/BUyRr/zd/RYOMKiq1A4FhB9HafaBqWPiq0zOISeKOrl+SxiIZNj7vx
bBaBG/yvO48G0pDJMzUGLzKFhp/czHy4iWcoGqJnmvn+Xq6haJjDMTPH3hga
7pkbi4Ol1oYyvLd5zBiUv25Ysm6YAvjVzG/fGEPBrWAze53511AUjNqZOcmj
9bhHKwVEr97EJp0bFDRkmPmQ0ecqBeF+ZlYYfS5R0PypmU0+6RRM0oyY2OST
TMH0qpGPPgcpGMwe+egTQ0HOOTMvN/qEUjDjzMhHnyAKMsfPm/tDgaDgvShD
O4bERU68/3gGv7VdP4Q0jKGoPzUxDs4UrJA+POh/cgx5l6ayj3AoON1YuCB+
7hjqFUweXmFDgTz/UKFCOooiEo+QvqMAnV4+r1c7j6Kq2MbmAp2BUxjaoRg9
auPo0abXAA/Olsta80fQw3DbscAOgNiVOT6d1wfRoH6JSFEEkM3ekrwjewDJ
ipP5g7kAE9Krpnlk6NBuvz3cgQyAktbbjFW/vEPv1QNudT8CnG0XkyW5WhS2
xXGtOAmgqKj8wc4b/ahC/kd66/cAjGVXSyIa+9Arlzm6GTEAs1mHHyRo3iJ9
5LQ4fiiA7POBZ7LFb5BOkm/vGASwaGqIMIXzarw/AL6Jd5tDjr5EF2p7yCc8
gGGdW3xq73PkupTfEMcF8E446crc0onaT+lVU+0B3OxfqlvqOpDyTkD4LWuA
yxU+V4b57UhxM7Lvnk4IESp42bFUg4J+p6Y4/CME+XZdbjxbjehwd1J8XwgB
EyRxUnUrSn0xZ1eNVAi23wZnRnHrUfX9lRPJzUJI3acoEapq0bN+O7lgpRCG
ye3JF3fIUMxML79evhDUulkFPP8KFLZWJvHlCiF4sixpA1GCcOKV+vUsIbz9
wC0VqvLQibLOW9ZaAagXN17j+f+MirtOJIarBbBRE1khVCUhcEmyjZcL4Awn
VylUhaLlWzVRC6UCyLxoiEvPbbEpAtA2lntxmXFoinWfqnq9AE6Hu8/nMi8g
Iqza6gtSAKXhqFSTUoBmJdX1vHAXAGpLc+cyy9ERkf05GVcAF/3SLE+vRmiK
RfabO3aG/axYqSZFjjp2RNr0Wxnut73nEvzbQ9R97MDTr0dI0D5tn8dlNqN5
IkV00wAJbaxlBTWBf6E8i6CqE/0kvE9zswx1/ICkYc3ifgUJN9zYdnbuVrgy
3WpfYx4Jn1l6OJ879QmuTOtqczpOQk6xfmObgz0uWnM090koCezM6hCBlQPO
bFPW6X1JeOzd6BZ33hEfXaRclbGQhL6iJcUJd53w1sBE3mVnEiKb3g0GpE/H
nl89D3OaRAJUsgzfB3f8fybhf+7hxiE=
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{6.9999999998593125`, 38.}, {6.99999999985954, 37.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-10.999999999922693`, 37.}, {-5.000000000013529, 36.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxNk2tIFFEYhgftQhcrFQ1Da3bX0Si7gBvaUp33nC3qR3ZxySwzTLNMbEvr
j5axaiq1ookb3cxuWhFBVhChXU5BVlia2mWj2i5bQRcqTZFMrZ09/piXb5h5
YA48vDOfLnVbfLqPJEnwXOpdSvjnicLVR8nGcGmIe8qSbwzmMmSvFmx3FJxL
2sGwOFHw3eCsO8FZDDPXCD4cGDZ69kaGyLWCx3sPMEQnCZ6a3x6ZH88Qv07w
uy/P++uXMBQmCza1nZLMCxia1guO9obBJ0Wwerw9kiF0g+D72aGeYQhOFRzg
r4bhxxAn1Q/3DMOZNMF1y/tql/dRxG4U/POHGoqLQxxb7vYMxcAQF81wFs5w
UuxI1/hcpbBtErxb9TlHYd0i+IHqU00x16rxqaT4sFPjU0yRka/xyaNoKdX4
WCkCHILnqj5pFNGnNT6JFHFObT8U+9zafig2ubX9ULheCPbW40/RxbX9UNTW
aPsBurZr+wFcMRofN5Dxe1DTDxDoHvCy0dsPUHqsI6p9QOHNt7eY9OeB/m2r
ri7pVfhgRPiN+uNATkpRVdp3hbdkpF53VQGfs5If698oPKY4fNbF/cC6g+6U
kocKn787Uw4pBJ68DFpWflnhrjhjmZIHLDJ1O0wHFR7SV5DTlgM0XNszx75T
4Z02S0doFjxCi12XGg2cbX3UXT0NeJrZXHB8l4FX/Hp9dJQOCJiedyFsnoE/
Dn31h0wEei2WxNkDet7f2eQPP6D4U4L92S09n7T95IdRvkDj271mvwI9t8xs
dZo6CY6xN7YXZg+3xK7veUWgH5diNo7UcyPPX2VuIrAwP7uhWcd7fWtuhdcT
RL39uLquQsePHlFDcDZbsgYl6LhdXa8igsaS3MrWKTpOouJH1FgJMievuNvx
XeaX1c+TRHAldq+kvynz9959IXA8C1racEDmrc57307EEEzoGVZXvVkW/2Mk
QcShlWMeUpl/VV8PIXje+HcPmSLz4M8LS33GEshpvp5Fl8W+SwT/AZXdE7g=

            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-7.99999999993679, 37.}, {-5.000000000013529, 36.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJwl039Q03UYB/ApCpPmANGBHOT3I92YjJIfeiJy+P5+E4ciKqMQE3WAZdRA
JTh0oDCulJRxh4eE6wh/FI5fBZJ4ZsUDpFanHSwaqNi4YWeRTBI4qzNI/D53
zz3P64/nr/c9LH2f9s3ZEolk1bOemZKRqenp6SU0s0qKBTQ+ED1ZtvPrqUMC
FL+JPlFpvLDjPQGxDtFdCn2nQi8gzC662jvAPXSPgKG7oj2eHwhIHBCtOmwN
OqwVYOwTPfSH7WlLnIDcHtFRvWclr8YICLopOuJ5CbDIo1p+mMXR6matY5ZK
QI9shJRuHF0ZvLFjeYCAcp1HuI8nR22dJ2uvLhBgn9fg8rE/Ry+ltjXXSQVc
l3618mIIRx5Ny46OTfHAzrXfp4Kj3NZJ1elJHlvdoq6at3GUqPepOvOQx4Rr
g1yfw5FlsPyW630eq8Z/1tdnMnp76MdPT33GY2/O4rdKShmd7/Y56FnDg7mN
h0SfY5SpjF6zspJHRquu09bO6LI00ulygscrB9IDtdcZlb/zQkWhkUfx+r+1
n/cwehTfHlibzyM1bOnWP39hdLspsu7dLB4dYUN+82yMNplO+jrSeTRpwtvc
ehnFjXYbZqfw+DCuI/mbeka70hoD68J5TO5zboivYTRVWSXNCOLhk+Cs9ahg
dDHm3gF/fx4j9m9T3D9gZNhVtNvqyWO/Spe75hCj1ycKe9+fy6NBaX18LotR
rMR2I+JfoPrOwj6kM9pQclywO4HIdSrfRdsYpRnM/LFhoCxD1rFkEyPT73Ov
qQeAhPtdCfuXMVoxE1cb8GV9l2nAn9GR5ImFSRYg2HysP0XG6KZxszL3E6D5
kpf6ryccBVzi91adAmKe6krP2jnKHrvVf8UE3MvKe5TZzVF3xHj+r0eB4+5b
dBvPc+RX1KqZYwRiraN3hCKOcqxSjboQmH8tcXfSs/x+evmfvKSDwLDDMFqg
5khdUdJXmAf8Fz9/RUFyAHktL3rsSAOODNe8GFzlR9vf2Oz1cAugKbtgnqPw
JRfvsdDqtcBr64Mt7rZFJN++J/FBKGDxUmqibd5kCGnMuR0IrHOa808rFtBG
03eV2b6AcrB09dKPPMlQ0HK5Tg6cabcvbv5CTrIn2XeNrkBxf+2wvlUm/pcE
+B+5w5XQ
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-5.000000000013529, 36.}, {-3.999999999942986, 35.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxV13lYVPUex3GorK6IiCQNMHMOjMgMO8zCDMMsnxlxIO1GGtdkie4VwUgu
iTuWu4i5EptoilmaS6lI5JVVCYVMM9cwFVnUXFKywNRR486cc/748nvO8/C8
nxnO85rv78cB/CZ/MCHjOScnJz9nJyfHV5Q96+/v94GTYy224KvVFW0aNzGO
4cnCx3kW/NDt+YvUV4wT6Y8OWGdasPHTzBeaFGJ4ZD0svznNAs+Da5OGx4nx
6ZuPlFfSLbAq1lz0fEeMKd5PlvqnWBAwbPKSU7PEyGnpzz8y3oJDCW6J0evE
OJT4oqEyzgLb/eI3394tRuyxobt69Rbc6/19jrxFjGEir9ZVkRbMmBs/bGyX
GAUtJf7LAix4GqsxDH8ixtYr417K9bFgZWr9s8UeEkxKNn6QOMzuaWwbXxYk
wX5TdmroIAt2ZX0cPQES7Fxz4dSTx2YY3j1TXZ0oAczzWw73mHG+Yn9zw1QJ
8t5JHp13zYzpcv/M/+ZJ8FbX7DHyi2a8/tF4t+l7JRi6R7a0u8qM3h1B0pP1
EngEraor2mnGgz2DaxpPSNBW3/EXNpsxbvUf5+IuSTBxslx1r9CMR9aOGVNv
SVDkPWXmhnwznrWfK5X8JcHqG0XVpvlmTHrzJ/37zzNAc/XDGzlmDK44M/Wf
wxhUfXNcvyrdDI/WS56tYgbdB88sC5lkhnG7tWTPaAbzdpSo3JR27+PYqncT
GKhtc4cclJkx+vnhpy4mM4g4fcEpVWxGVdPemyMyGWTJ9rk7u5vRqBL1e+Yy
6Oh3Mu0YZEZW6vhXrnzIoDjp1Mp4G1ClTZJlrGCQr/L8/U4PUH48XFtVyKC6
8GLummsA43bB2ryJgTRnhHvoReDCOtdZy2sZNBmOSH2/AaoVq+76H2VgW9ef
3bzT/v13/vPh1h8ZvFrRYMzcDCw4WOLb9zMD0TTbhpc/AaaUSa9IOxk8ffDt
vD35wBurXPYF32ZwzHi/c9x8QFeUUDb0Twa5Y3afvpsDyPf1lJywMXAe3BW3
Nh3wvnpr9+TnWcxes8EaOgnwfUW/bR/D4soi755AJXDJ7dAtJxmLguOSoBMy
4GnR5SRjOIs7360MzhYDK7Z82ZepYfFSdsqfQ9yBWeFeNfNNLC4fLV24dxDw
Q7xyZ14ci9ObPvjs0z4TCm73NaYnsEhyWXbqcrsJe9zTnKLfZjHhckaBT6sJ
6qacaY/TWDQOFp1IrjTB++62LT/NZZHJLRN+Tg65tHwRi5upLtN3JJjQcuAb
/eQCFtZmWcYNrQk372uOTV3PYsnGujEBUhO0opqZpRtYlHW0uL/nYkK9TBP/
21YWK0tfO76nz4jpbJUlaxeLSXWjs3vajUjsD0x3O8DCefy3NkWrEdmtFbvb
a+zvn1gxa16lvRNc5bPbWITXnP/qRoYRNczunIcdLLYNl8aaEoxwFddOz7vJ
Yll/w75SrRHvxyHsyT0W5xbt+u2WnxEtn8Xs/KiXxeriLpvWxYhg+deXnz1k
Ua3LupLfZ0Bp+ycnFj5hMXa2qfCndgNeaLo7p/8Zi9dHT/H0bDUg72x9+6J+
Fg3b23KSKg2wXnI8eHyF+RiwsYXvx9sTbNsTDBjxLd/rrmntlwG1O/geKXUs
AwrK+T74bxf7ZcCCtXy/trXPfumxeTnfV9sdS4/rC/ieIW7NFbfqkZjH94sp
lYNSKvXoncn3VM6jR9sMvm2cR4+QGdSjR08u9ejBzKAePRqFHst5YnByJvXE
IH429cRANZd6YvDWIjqfGPywhM4nBkOXU08MmBXUEwNbAfXEYNvH1KPDiNXU
o8O/1lCPDpPXUo8Ov66nHh22FFKPDvGfUI8ON4T25zw6zCqiHh0eFFFPNLKK
qScap4upJxryEuqJhmsp9URjXindr2ioy/hez3miYdnAN8eRRqNiwPmJxthN
1KOFdTP1aFFUQT1ahG2jHi1e/Ip6tOjbS+ejRXkl9Whxv4rulxZPq6lHi8aD
fI/jPBqoDlGPBu/WUI8GqKUeDX6sox4NNPV0Phpsrqf7pYGtns5HgzcaqEeD
LQ10PlG43kA9UfBvpJ4opDZSTxT6GqknCqLDdD5RCBV6LeeJQsRhOp8o+B2m
nig8d5h61DjbSD1qFA7wqGEc4FHj13rqUWO/0I84jxrX66lHjaUNdD5qrG2k
HjWcj9D9UqGziXpUCD5KPfbXW6hHhcVnqEeFHefpfqkwrY3ulwpnfqHzUaHt
Mt//4zwqLGznm38eKnHsKvUo8XUH9Sih7KQeJayd1GP/hdpJPUpYOqlHifhO
6lEisZPOR4nMTrpfCizupB4FKjqpR4HvBngUSOyiHgUWdtHzo8D2LupR4FgX
9SjQ0UU9CvR1UU8kXuimnki4dVNPJF7ppp5IuHZTTySGdNP5RMK9m3oiIe6m
5ycSQd3UEwljN/VEYOIATwRmD/BEoHyAJwK+16gnwn5uqScCy69TTwScfqXz
icCgW9QTgcI7fJcYbxcbb4fj83t819c5Vjj0f/DN3W5dONIe8O3C3SAc3oOc
uf7xpGOFofYffPdxBzIMra58SxwfJzcMJne+x8Q6Vpj97zm+pzV5Zjd5hiHH
k+9SzhOKUSJn4gmF1Yvv65wnFOeFHsJ5QuHhRT0h6BBRTwh+E1FPCFRe1BOC
OqGzOU8Ilng7k/kEI9+HeoLRKqaeYMQz1BMMnT/1BME2inqCsEDGN7fduUFo
lvNt5TxBOBlIPUHYGMR3MecJhDyYegLxUTD1BKI4mHoCcU74fo5zUo5tQvdy
HjnKgqhHjgNCc5xYOXqC6H7JkRhM5yPD1QEeGdaHUI8MGaHO5PzIcCSCzicA
30fS+QSgVUE9AahT0v0KwBcqOp8ALFFTzygkRlHPKIg11DMKlzTUMwoeOurx
x1Ud9fjjegw9P/4IMFCPPz43Uo8/kkE9I/G6hXpGYn4s9YxEt5Xu10jUJtD9
kmL8BLpfUpQn0vlIsWYi9UgRMol6pJifRD1+mJNMPX5gU6jH/noK9fghIIXO
xxeDU+h8fPF3MvU4nlvU4wsmhXp8ESe0fMFZ2YKzLJYKPW+uY7E4JfT3jtuJ
WQSn8v0qdwMGX77D96aNjiXB8DS+b3E/IBJkCh3NPRDF+ELoVSsdS4xWoS8u
DbVfYpxLox4fHE+jHh98mUY9PsgWWsR5vOEtNP//hTcaBZ96zh+2m67eeE/o
vyvjvebVekEk9FHHOLK9cFL4fEt2pvQ2S72QL7Qx/dX9i66KECv0A27eIrws
9C7H2zNEOCvMa2K5h2RwhAifCe3ELRH+D05iBIM=
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-3.999999999942986, 35.}, {-3.9999999999616307`, 34.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-3.9999999999616307`, 34.}, {-3.586633470833192, 33.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-3.586633470833192, 33.}, {-3.586633470836148, 32.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-3.586633470836148, 32.}, {-8.000000000394323, 31.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-3.586633470836148, 32.}, {-2.000000000261707, 31.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1H9M1HUcx/EbckqdW3Lf792p6B8ipS6NSrfv7+/35cSfuIGomw0pB/PA
cCBUNpdCZoVsDOZN52TMs6Fy/pGcP8hZtO+3gVwabkbGtRZEnkggNUya/EjW
3ffzz/u973ffPbfPPnvs8933u6SwPG9vksPhyI/fiefH0WBs/5W5lsMeoCIi
FawKuayO4qba154aWOd750Ju0YtW9Z7jgY9iBia7XmrvfZBiZY50LBy6ZyDQ
m/2F+coc66fknPSKbwy4NnA7XZlOqyy84tKCZgMlHn/05nSSNTO6vXWgxsDF
rKzlP9Q5rE+/vruma5+B+pb8hqrOaXNm/mnpzqb4fp+tL1058a9ZlhL+djTD
QN6pP9Iqb4ybx9Ka3xxOM1CE3QXvNT01c+/sur0x1UDn522Zr7f8Y/bwPx5N
cRp4v+SvQCj6xEyedu1+9ZmOg4Ozan5b9cQcPfzCrvCQjq7nE67uS2NmbePt
D0736ii50r3kw+wx89ftW9sGOnS85aj+vs89Zv4eOuGta9XhL5kXP5cx02+P
DivIeuJ8ztT5HB3Pf2ZdHxPjl47FrlS7l6YnJt4G66/2uOKXjqRK1tnB8c3B
cQ2RZtb9fYnRUH6fdeWiSMWiiIbJWW67Z+eHnflhDY1n3MSjoeUW60nbo8H7
t5t4NDx0c8Sjwb2GIx4N57ax3mx7VDSUcsSjou8oRzwq6k5yxKPC/x3rYtuj
4sBd1lO2R0VqlCMeFVv6qUfFwhj1qKgeZL3F9ig4Mkg9Ctwx6lGg91OPAkcn
R85HQaidI+ejoPYG9Sg4d516FIxeox4F5W3UI2P5TeqR4TOpR4YeoR4Z/sfU
IyP0jHpkVDl54pExwrPOsD0yhl/miUfGYZEnHgkXtvLEI6GwkCceCdcP8cQj
wd/NE4+E3CGevC8JXyZ77G6wPRKqMljbnHQJ1gYP8Ug4WOohHhHBgId4RKjt
HuIRkf2nh3hErP7ESzwiilu95HxE1Ee9xCPi4pSXvC8Rl+f7iEdE6A0f+b4E
nFzvIx4BFTt8xCMAb/uIR4CjiHXjmcQIWLGXdV1B+8yhYwJWF7NeuzJv9tky
AYv3sb7qTGwg4NG7rAeGe/8LbxIQ2M/63i+3HgeF+Poy1lU9y470LBNwvJz1
SGL5AgH3D7D2PsqqSZob91SyZv9nAf8Dy+xO5Q==
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQ3XB9/uOcjTwHGMDAwaH+rleZERvfAXaDrd6tn+0d
rBbGHVWYzn+gr/H1rGtP7B2iJua+kN4kcGDil0VvP1+2d/hskHBm9zbBAwKd
t53vHrB3yNJv5yu4KXSAx37q3Emr7R329zxaZyElcqBN7MIv4Sn2Dp88itaK
VooeqOXviU6ssndgTjHjYv8mduCD5sn9VXH2Dh/v6h3lmShx4EFqu3qCg73D
pmr23EXBkgdKda7umGlo76DDfSdtn4jUAU958Q+PFO0donvWbEq4InUgys73
rLWgvYP9/4qAzknSBxZ3lgcs+W/ncCvZ0cHCX+aABuO0Spm3dg46u1ibcrlk
D7xessJjyU07BxOmY6KaR2QPvCxZv9f6qJ3DJ+um31k1cgeUC1fdeLTezqFm
W4XjJQ/FA6uPL8o/rWvnMLNZXN0lX/GADPeJ4NdKQP67d7oGExUPHBLcmbVU
zM6h9vu/0GnrFA/MuF265SeHnYPzPPf5ZccVD8zJ+Gfw4qetw9tHJzgv3lY8
cHlH0IOCl7YOVUebpi59rXjA5kzRocnXbR1euZY6ffmmeODKorjrAUdsHWxT
Fgjs/at4YL6NmPyK9bYOxQoswHhSOjBrJgjYOnhrQ/g9sXv+VTbbOrSaQvj2
OkFs8/JsHRTtIfyNrNEbWKNtHWQ9IPxHL6/92eABtD8Awr9w4+jr+ea2DlYR
EH7dJfXaS+q2DlHxEP4rkHJJW4e7qRC+2DOXdiYeW4cD2RA+JP3YOgAABIH8
ng==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJwtk3tMWwUUxouphDQt9/LqHLj2trMsFlg7xmu7t/ee1T0kssIYW2SJhJc8
dNnoRAWCQCuDP9hGtvEYSESgNduYUipmjg08KxtLDTqJQJEE/6hDS5XHLAEs
jlmJX3Jy8iXfSU5+ySfLPZv+9gs8Hi/RN//tGkfnr6f7hcjbEgCcSDr2/s9C
DKn1X3ji4WCwN+G4zl+EOK6mTvzGgWumfX4tUYTPXVVtaQ4Ovnfmh547I8IJ
+/KbjlEOikeafrp3Q4RcaV3W/IDvvlK5a3pehODibtZ1cXA/MJJ4sDsQpxQ7
mL4LHNSU1zfUlAWiX4wkNO8DDlbu6TpEjwLR9kwb253FQabCOXQ3gMB6lVJk
TObAG5s/1KclsDv++o/qOA4m5iba50sJDCaHKr+UcPBEE3eyuJPAqeGioI0A
DtS0cWm3jcDFA72XxB4WBmaHC/bPEniqrXaFN8tCicJ9t2GZwPCHK9rBURaK
gvlL8n8IVD3cKNdaWPhqr7+PC4kFW2LhIrnp/J1P4it7rkra01hIt801dIaQ
yIYekX7DsOCXPOSNjCaxnzAWoZKFFlOtqkpHYsXOg15rOAviSVppriCxI/Xi
RKOQheoZp/sTC4niprfWTvJYGB8o1+cuk+haHsgNWNWAMJ83vL4vCEMLropN
Cxr4zmH6YvVdCf6ljGyG7RqIOXye339fgqptIpUlWANlKebeo4QUeUtt8iSB
Bm65+T1jGVLMsY6dnX7OwChlcsdckWJ6jll82ePzi0aj/pEUHRs7t+XOMWDJ
6HqndUWKi4bX9W9MMnDgRvX4YyGFLZ5gxdERBnaU/hB2KILCx2kfxxb2MTDQ
k/maIYnCwi0+DKQOakN0WgqbcsIiBGkMXOL7GVd1FK5NpgaV7WdAb2xqrMii
sHEkLNmiYGB17zN6poTCU8pCmzWIAcl2uj6szucFBz+q3qThjz06ffSnvnze
rXLxnzRkViV4JXcoXI//7PaHMzSc3vTIFqZ8/xmkiT12GuTWOlfLGoVFh5Xr
1+7QYG3+xX4mQYYv10apbR007HLus46VyPDBoaiUvw00GFqvdVk+l2Few6sp
bDEN337tbQ2fluHTjEj15XQanEx2s+BFOZZ2y9afamhwR9vbamLk6H4vwpQd
RcP0+Xhz5TE5HreHxM2G03DziPn2ZokcLd2C64VCGrLPvTTuf0H+f79o+BcR
xYfq
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
GKs=
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
zv0P/FDjcw==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-8.000000000394323, 31.}, {-7.000000000412911, 30.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-8.000000000394323, 31.}, {-8.000000000399552, 30.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJwtkmtIk3EYxZcbVhgqlCI5cHv/s2U6mRXo8v++e7IwiZqpDUZQmZbKIrZW
moW4QClKE9S2lhStgRfMC8lwWklPFql5ySmp2Ye8MZQRaVk405VKPzjnfDmf
DkecoUu94MPj8cLXtJ6iTP66I28DJVwuNjo+7RWh/o+o4uhPDhxdFlmKXoTR
zVV29zQHC1HJGYY2EcaHXsqednIgtNvUCj8xlist9TEdHHCnKzfX5IgxTigs
HKnmIGW3OL9tUIyRz5cmnSUcaIKO1eoPMaj1ykaIjoM0yQ7TADK4xH91qi+Z
gwT19YNDSQSH3th0vTIOfEiI9LCOYKFvd5qbWevf+y6TlxNU+Ldrq4M52Hf/
r9rcRHB1LNfu2cKBLTbpSV4Xwf4sr3zWw4L1Ws9W5xeCzxypE/o5FuQni0zV
boKmXkNn5SgLqv7chMXfBO/azoyeeMfCypQ1sGOVYCkNDqtrZiHLLFjbRYJZ
G7DQiEllRV6CEekp3VPJLBRwQQr/ZYLHB5XvxxUsfAzQ8qw/CDpbY9JVEhZq
9h+ZiZsl2LJdamYDWBA0NsyMjRNcdIXl1C1TcOVXbbr5geADuXCkzEVBZQmM
j3YQtMyHTswPUTjgF1A+bSXo2RV2a+A1hQaniW+9TbB9OLxb2khB60oVFJ8j
aIyINH6roKC54v66wBI8z6u9arhBQZ9/1jwnJKjVPKxrzaRg/9UkvehlsCTG
J/SFioLE/bkyb4rBvpLJ3oJ4CqiZGPfrYTAqO/alN4LCHa5zZU8Lg/Vv+XPK
nRSMj4ye4ccMJj5NVMM2ClZDiNO3lPn/Hwr/ABoYC9Y=
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1F1IU2Ecx3HRlCh7QcI2nfM17aLEIPC89wu6UAkMG144lFJKinzFSjHn
RYW9oGbd1AK15cpG6EZLMCyeQpnWLJ2vlIo2MueKBLtQK2nbORfPn2cbXxjn
fJ7nwIkvLMs5ExwUFJTp+/h/44pC/N8kKDBHoDbubNEZY8nNP3F3s1YlJKXN
dOTHxpKWbqPd65ZQeKOMj27WkihNSbF7VMKIaVDX6IkhmqP3LYdeSyip/77y
IjWGmLQaw6RZgqR17mou0BCzfW1h9Lav6y/ZtDXRJDkkdTKxTEKFaXGi0BBF
krf15TmzJYw3aOr0pWpiHjKVfTgoYXplznY5Xk2ehw+e9Cb47peQ1tE2qyKr
Eb3nzZES+mJ268ZMKlI9c9G+vlXCwwXD24gKFUk/t5m2tC7iQumVH/kZvu7N
mS/3iDjcv3XCvl9FqpyV7+5Nifj1NbF2b4SK/DQVTJ3oF9H6fnju+hYVMQuR
sZ3dIoglzHcuKnI2MCL2vZF7vSN7oyNbhPaj3E1uxrdEWD7LnZjgHxEOt9w9
p7b7lohqj9yZbb99S8Arr9xzs/4RcGdZ7kqNo0LjELD2Te4wvTVUbxWwY1Du
4oBHwKLi2Qh4BHh7aI8AlZX2CCi30B4Bq2a5swIeHu0m2sOjup328Khtoz08
8h7R58NDZ6LPh0f/Y9rDo9NMe3j8e0p7eDgstIdDWBft4dBjoz0cvrykPRyO
D9AeDs4h2sPh2TDt4bAwIndSwMOhaoz2cCiaoD0suiZpDwvdFO1hkTtFe1g0
jtMeFtYx+nmxCFW6OeBhccsld4CTwAIu2sMi2UV7GIgu2sPgmov2MNh00R4G
T5T7GR/4h8FpxdeU37dZc5XBHmW/OJAT1lrKoE9pW6j/Agxylf3Peyb/WjMY
LCn9aXrA25bOoFTZv8GVUudKYeBRetn/dzUD/bTckYvHGoLDGRCl5fcPg/8c
+rZe
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-2.000000000261707, 31.}, {-8.000000000399552, 30.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1nlQlHUcx3GO0VweIschRETjMN1ddpc9nt199nr4mCceUdo0lg6pJf0h
xmGSgtcQmSJqJo5FBVSgZuSgjTCNxwOWkiZOnksp6ihgyDDNwGqCuE/s89uZ
vv1mgXkP7LMvvt9nBxKX5yxYERYSEnJs+CPwNcQ/KvC5KUQ5aRh4VqX0g3HH
1z7tF/H1C6xjNOEZjV0iBsysS/Rtxfo2EUOzWBunOKOX/iqiPpN1gvIEEWM+
YP3KYE3GYI2IpN2sm678MLBst4g7daxXfzMtdMt6EfPPs85SjogzXawfB56e
IeKgzHrnPWH4IaIvOkLp5KTAEbF/MuuGpdzwQ8RpnvXcKl96lc+DWWmsb7UH
jge2mazz41vy4ls82JHOeuTi+hGL6z34cXoE8Xhw+SXWA4rHg/SpEcTjQTSo
xwNrGvV4UCeyTlc8bhSK1ONGpUg9boxNox434oKv/67icWNasJXxZrhxDtTj
xmEP9bjxt0A9buwys56jeFwo01KPC10J1ONC5fPU40JrN92XC2dvqsh8XNBc
ovty4eFZFfG4oD2lIh4XzjeoiMeJy/Uq4nFievB+YR4nEr5TEY8TcbXU48Sl
WupxIuwQ9Thx+AjrSYpn+PVOUI8T+b9RjwPb26nHgYn91OOALpLOx4HWbHr/
OFBQSvflQO9+1rsUjwOG06wVTpIDzpt0Xw6MeUj3JaAhkiMeAS8mc8QjYKnA
EY+AuLUc8Qh4tZQj8xGQXMERj4CyAxzZl4AdRzniETD5OEfeX3YsaqYeO5LP
UI8dH52lHjs2N1GPHd+f4sh87Kg+yZF92ZEZbDYfOzpPUo8dvMSR+dgw/38e
Gwy/UI8Nf7RQjw28l3pseHKDzseG2jusdyie4et10vnYsK+bemy420s9VkT2
UY8VMY+ox4qwQeqxwjIyknismHuifdkmvyy9vEZ3uzZj+HonDR8/HZClrkl1
ifcFK+qiuNzCPllKWdOp1yZZMelIfvyj+7I0PqstPIezYl3NirLcP2Xpp39K
vj3m43Hor3tS9zlZCtP2RPrbeTRu6G1Y1iBLj4ciMLuFR/XbxXltVbL0RW6H
u7yeR2X8PM1Xs2VpbNHWoQlZPBIXZh8YkypLWbvG/7wyg8c0IXT5tlhZUoU/
lBoFHqoLEW+EjpAl+Vp0f2gSj1VR28oKfX4pfVTRkjkcjzy5aMjX5Zc6P58y
9InPgrFV9w7m3vRL10vjLl9rtyCzV9rde9Uvjbux8FZsiwUzHoxuXPm7X6ov
vZLwZr0F/JfXY3su+iU2Hws+rWTN7h8L5CrW7P6xoLCaNduXBf7g99m+/ns+
25cZluD12b7MuPsZa7YvMyrLWbN9mVFRTD1mvLeRNbt/zEjfQD1mGDdRjxlx
JdRjRlQZ9ZjA7aMeE0bXUo8JExuox4TWQeoxYclzXjIfE64leonHBKeZNXt/
mbAVXuIxoWmel3iM6HjdSzxG9GV6iceInne8xGOEJcdLPEb051GPESXvU48R
nQVeMh8jotdRz3AXsS4Xu/eI3anoWM/6xPHASUXJRtbK5XamwreJNadcIBWt
H7JuvRA4BhSUsPYpf6ANSA72hMCvk2fA1WLWM6YHjgFbNrNe2RyT3RxjgHsD
672KRw/fWurR4+hq1h2KR4+8VawjFY8era9Rjw4F86lHh56Z1KODeir16JDq
Zp2teHQIF+h8UlDNU08KnjFTTwoEI/WkoFVPPVpATz1a3NaxVtadp8WBYM9U
PFrs1VGPFoeCvUfxaPBARz0aLNBTjwZ39dSjQYWBNW8JHA3eSmUdF/h3daQG
8UH/xkU1ke52NS4Ge7mycDXyTayblf8/1eCCv3/Vke3etBw1KoL9RLkf1Zhg
YX018ONmNcqDrbuwLWpErBohwXmGKEeNfwGnk+Ed
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxd139M1HUcx3GmiIlm09tMm9XSO37/uN+/73i5xJlaappZWommOTUBf2WJ
iEgEIiD+qO6AA4oQLZVGpU0d6PyxEnEzSg/k+DnR/BEJLn5Mi/t+7o/X9dkX
2HPHvjzu/f7CxkvLE19fOSwgIODS0If3a8CTp7yfawOkE4dI57mmBfEDNVd/
fq6w66Ed7XG/nnwwqqfmSOXOG++12zGtcX5MWWFnTUGd9uTqejsCbpd5tvQn
1exQaM3DTthR8HL4vOi3uuK2Ve94N6rIjnvNVRda/uyLS9/yrKJrux3TRw12
dzcMx771g7nqpXZcfnFDan3vaFQVRjrGGuyY6XbFZ6wZj+uPD83YNtaOz6IX
2lw146F3GfZFB9vxKLY35MdgGRJSM6f8MNyOfa2pw36ZLcMbrgP/jB20YWlc
71V3ugzjnySMs3fbsHDOwvyu4zI4ix8kTuuw4ZORJXh4TYa7KWbZpAYb6pMa
OvrvyhBUFD94/pwN87J6tz4ZGHp94Jmw+OM21Ob9O3RkWCUdG44eFt1fPneg
fK4NXbWi8zqMQ5cN6xtET53iPTagU/RPy0YPXTYs6xb9Sknv0GVFXZ9oT7P3
WJHxWPSGyZeSJ1+yIvuJ6KAlVSOWVFlR8bfoDySPFYvvix6QPFak3mGPFZNu
sceK0A72WHGkVfQsyWNBmYc9FoxpZo8F95rYYwEaeT4WNLl5PhYUuNljwQo3
eyx41c0eCxa42WPGJjd7zDjmZo8ZgY3sMSO3iT1Dr99kjxnJN9ljxjVfyyWP
GaHN7DEjqZk9JhxrZo8J7X7zMSHYwx4T3vawx4SNHt6XCXt9nS95TKj2tcSZ
YsJ1D3tMCGxhjxHqFvYYsaqFPUa4Wtgz9Hore4wobeX5GPF7K3uMCGzjfRkR
3sYeI2b6erbkMSChjT0GbGhjjwEpbewxIK2NPQao23g+Bsxp5X0ZcNlvPgYc
u8keA/r8nh89Kv9gjx5nrrFHD1M9e/S4dZo9epw9wfPRI7JadK7k0UNxnOej
x9Fv2aPH+Ur26LC6gj06FJezR4eEr9mjw5Uy9uiwwtd9kkeHR6Xs0WFnKc9H
h6BS9uiQWcL70iKghD1abHaxR4vOYvZo0VPIHi2WF/K+tLjl5H1psd3J89FC
7usTkkeLVodo8fdQgyoHezQocLBHg0wHezSodrBHg4sO9mjQ7mCPBoF+Hg0i
nDwfDd508r7U2ONkjxoXnOxRI6iQPer/zUeN2UX8/KhxsYg9arxTzB41ZC72
qHHbxR4Vmv32pUJ3KXtUmPIVe1TYU8EeFc4c4vmocKCSPSoEH+bnR4Wph9mj
gsfveVbCVskeJeyH2KNE2zfsUaKxhD1KDHexR4lFfvNR4qrfvpRIdLBHCf2X
og/Y7+y334mF/AvRp095TyxMn4uWbpcXiy0HRY+WbhCLiv2ir9R5Twye9nWv
9EDGYNE+0c97305yDNIKRMdP954YZO0VvfbshHVnJ8QgOV/0QckTDXMee6LR
uUd0p+SJRlKO6DGSJxohmeyJQlUGe6JwcBd7onAjnT1R2OTrdZInConpPJ9I
XExnTyS27mJPJLIy2BOJ3Gz2RGBUDnsiMMv3fqR1J0dgbq7oGZInAhPz2BOB
Cl/vlzzhGPCbTzjG5bMnHPfz2BOOjb77S5y6MPT4fn6P5AnDh36eMHT4vBJn
ehjm5/C+wnBqN88nFC/sZk8oUrLZE4qGLH5+QuH021cIGj7l+YSgPYM9Ibiw
i/cVghS/fYVg5E72KLBqB3sUKNzOHgXKt7FHgbSPRWuko8Cij0RPOrX1cU+Q
Aq9tFp26uHyMtVmOlRtFJ0g3kMORLLr2t6P9CQVy/JUo2vV9zvW4RDneX8+/
r3L0rRPd4P12tRzfrRUdWZc9dsREOdLWiBb/X8jxH/qI0Xk=
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-1.0000000003411742`, 23.}, {-1.0000000003710738`, 
            22.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-1.0000000003411742`, 23.}, {-6.1809003054237905`, 
            22.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-7.000000000412911, 30.}, {-7.00000000044912, 29.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-7.00000000044912, 29.}, {-15.273489507895931`, 28.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-15.273489507895931`, 28.}, {-16.273489507901047`, 
            27.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-16.273489507901047`, 27.}, {-16.27348950789161, 26.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-8.000000000399552, 30.}, {-9.00000000051466, 29.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-9.00000000051466, 29.}, {-9.27348950789866, 28.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-9.27348950789866, 28.}, {-9.273489507898546, 27.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-9.273489507898546, 27.}, {-18.27348950789218, 26.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-9.273489507898546, 27.}, {-20.273489507895817`, 26.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-18.27348950789218, 26.}, {-18.27348950789917, 25.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-18.27348950789917, 25.}, {-18.273489507886268`, 24.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-20.273489507895817`, 26.}, {-22.273489507907527`, 
            25.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1: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
AfwPyfMUXQ==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-16.27348950789161, 26.}, {-15.273489507885245`, 25.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-15.273489507885245`, 25.}, {-14.273489507881152`, 
            24.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-15.273489507885245`, 25.}, {-16.27348950786643, 24.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-15.273489507885245`, 25.}, {-6.000000000398529, 24.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxN038sVWEYwHE3sUJRVzfFEuK6P5yJ95zzRvJcogm7YlqIKTTRukuIplUS
JSObjFVY2SpbRRMh7d3aDVMtP8pl86OstGYxES5N7n39cZ+ds3efP56z7/nj
dTipCk9aZ2RkxK++unN3pE2PaRFDjPSzD4rCqX/taMv69wfDSyX1domxsvkH
hooQ6jw3Ta6bBgMKonYXe1nHd2IoCqC2F+kWMFQpqMO0tUptLYYUH2rS93Tx
RCmGGUx9/oG/ID9n9XuI+pR+MGxyp17UrSsxxLpRl4zj4nGMwUFO7eSoGwxR
a26KN199MJgw1MHVs0HVszy47qUeGdYND4SlTrPrOGfXwcN7b2rTmHqTmHoe
+iMNe3i4HUut/x0lD0cSqYv1PTwIU6j1OY48aM4a9vBQlUZ9WN/DQXKGYQ8H
6IJhDwfGWYY9HIRmGvZwsEeW0C0oZMjSgmrCOYyDDcH+rTPXGFLu2eo34cXB
3OdX9wezGcKLArLqXDiY7H6b0ZTKkKEaqxsqIQdT8kS/m1EMye2zS+MEHCwv
VBqH+zOEeXaaW5liwdo9qcVKwpBR9/n+rlEW+F51gtqMIWUx6tDyTyxEX9qW
LZmVr/WwgKKWhbhZTtoSQm7ZhLHQaOnG+GTLyd0RWW+DFwuamkcd2EtOBAPr
vT1cWKiyODMm1crIZMiAunIrCxsjLmYJW2QkHh6m/VxBsDO9t2QmU0aiG5IV
u34j+KhKd+n0lJGharGH9zACl8D4/WVTUvLVfOyg7wcETvN3eo7WSYlqrjRb
+gZB/bHUfIWdlCRvnvSJq0HQlnjv8tUKCXn8/MW713kIwFbSLrKXEPngd2Fg
6qpztvgK6l3J38LrztoIBO0FkSaKYFdiqi5d0hxA0OgzZ/llWkyOF5iVf5Mh
EFdNx5EaMVnomZoV2SIQPTk0sxItJoO1CptMCwRX4rRdZfbitfuF4D8HznQu

            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQreAjcZGtR+cAAxhYOByF8l9K7q74+9ncodoXwhfX
ZPbf/szcwcUPwm/RvdGke8PcQcYfwjdQtxJJOGHuwBEA4SuIgTSYO7AEQvgB
v5b4/1pi7iAUBOEfvLz2Z+JEcweDYAi/eJEzY1uNuUNCCISfBgbmDjcMejl/
d+ocmCHMUKkVYO5w7vDrTdebdQ5wzvvV8dPK3MGN1+TsnEqdA9tZw6ZdVjN3
sOJNi/DK1jmwyEto4Q5hc4e1hxtDHkToHDido79yBaO5wwKD9oNxTjoHjHLW
rlv8wcxBIKRs/lF1nQNXPXo2rnxg5vBf1/+dCKfOgW1MZzbuumjmsNljhdPz
J1pQ95g5HL+60rVtqdaBFVlLtyUHmDmYeS74ezBF64DXr/76e9ZmDoyLu7Nm
KWkd8BZVO3hNw8xB/XF2D/99zQMrdqdX+4ibOazgdExWnKV5IOVtyDp7djOH
FjHu9+eDNQ/UrXobueGHqcMezlP60jyaB759Mqyb99rUwe9xrSrzYY0DZ48p
SnM9MHWwWax2ob1C4wCT2l6Dz1dNHXI3bO5elqB+IOSkrojmZlOHT16vL72N
UztwhGmvkMJkU4eTRWeXxharHgi8lKVzo9TU4b16FMu3uSoHfpmbJwZGmzpk
Zk18t+2e8oFDxkobu51NHUysilMWmCofWHZUW6Zdz9QhcPr/1E2LlA4sexu8
yFnG1OFAo9nnN6pKB46unuV8kMfUoeGnOE/AfkVo+jF1AADJDP5W
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-16.27348950786643, 24.}, {-12.273489507882744`, 23.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-16.27348950786643, 24.}, {-16.273489507868987`, 23.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJwtkm1Ik2EYRtf8KrUWOHUWrK1wfoTtebD3fQq/bpfOGWiiIBhozWZYmpqG
gQWBmhWoqSRDJqKhFEtniqZF2t2sBbGl4RQzsCzSH4qEK0XcspQOXJz/F0ee
W5yeJxQIBMH/tu2v/rX5bmqCgh1OQHmf4oUuneB1XZ6pzcGg3/xF9e48wbSM
7uDoHwyakoeER68SrLLa82bsDALUPRv3qwj6TcwVlZkZwPDrkDU9QWHOe9hr
YiBq/1WbbSKYWq7/3KVnUOlKDLNYCK5L1HExtxgYJgadynmCrsTpgkkdg6yg
BC+Di6DWlaTN1zCoG+O1Nl+K1ZpvulXGgIytePMHKL4J/Tg5qmCgkhS6TwVT
lLWJTTYxg1GzKcWopKh/3O2QChkYzc8WBhnFCE1LZ/8KD+6S6vH1GIpzN2fx
7iwPVnPA7hIVRaO6RNPxlgfBWFGDNJHig66zUc5eHq4Ebf9D8eIOPGR++nl6
MYHinr6ZhylpPJyTHFptiqdo9csmNVE83JkOyPGMpthf79i3P5QHm99Mffxx
igPy1tglfx4iJ3KrE8IpTlszXwV68DDsMxQrklKUNBxpbP7NQbbFPtIholhR
IBzQLXIgF7zc5fxDcDPHEXJ7lgO354Xe0mWCrZfXltc+cFAh+/7Is5dgpXZL
1tnDQWT6001jOcGkG3WahXoOSKrdw+cUwaWh9gsjpRyUiM9YFGKChYEnS8Oy
OFhIjq9wTirR1pJ5LVzFQdlWo/3wPSX6xm1cwggOapIbDJikxDAvecbSQQ5k
odHjUyIlKlZtyie+HIChuTh3/tj/fjj4C0vaBUY=
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-6.000000000398529, 24.}, {-5.470950191007887, 23.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-12.273489507882744`, 23.}, {-6.1809003054237905`, 
            22.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[{{-5.470950191007887, 
            23.}, {-6.409552343556564, 22.1372296027863}, {-7.677035990471438,
             22.}}], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[{{-5.470950191007887, 
            23.}, {-6.738433837922947, 
            22.862770397213616`}, {-7.677035990471438, 22.}}], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-5.470950191007887, 23.}, {-1.0000000003710738`, 22.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-7.677035990471438, 22.}, {-8.87365758698138, 21.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], ArrowBox[BezierCurveBox[CompressedData["
1:eJxV0ksoRFEcx/FBLIyVBinllaSQ8xBZ/YoFNiOJhWQoFCEsmKJEsaKsRKGm
SRE1UmNBsSAWioimREpNeZQF5d6T173Xf3H8O7fbp+45fTvd7Pb++o5Yl8tV
bD32e9xMS6rbzz5wOVOKHvJj+u7I15tEEzmlIM67E5UAebIoMlEUkcgjl+RX
eHwnEonkzFR7g8SL8ec6FfSqoMQp+eBy02ybk1gnDwUqY6ZGJabInc5IdJGd
7V6rhzz7UG4tiUZybo49Eq3kHZ877HNLDJNrVt6tJbBEvru1R+CcPJhxPJBx
LJBM/QnNofjmkECW0nsEepXeI7Cm9B6BK6X3CLySw06PgCLXOj0cb0rv4bhR
eg/HttJ7OKKm3sOxSjadHo5uU+/hkKbew/Fj6D0cZ4bewxD4dz8M/n/3w9Bg
6D0Mgry4YA+DhzzTsvftn2QwPv6MwvqE5T6GO/JWvH0AwyH5/vH6M1TNsEE+
jxw9r5QxzJPHLvKtxTBBfrI/T2cYIKdGq6Zjkxh8H/r/zPALgNA+Qg==
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-1.0000000003710738`, 22.}, {-1.0000000003680611`, 
            21.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-1.0000000003680611`, 21.}, {2.0551573088222312`, 20.}},
             0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-6.1809003054237905`, 22.}, {-6.180900305424757, 21.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-6.180900305424757, 21.}, {-2.925517174746574, 20.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1F1IFFEUB/DtQ1+UHkIsS4kMZmY/ZnfmXsddP2b9UxoYyFqQFPaggfWQ
sKkvEUFLQRChFFb0tlA+RFgoQh/YgwZhD6tBBS2EgSRrRm8ukUKUc+cQx8Ms
wx9m7vzuuXfvwbPpE33bA4FA9+bPuwfi452/LgYQUFWH+5R/VE1f+rMm0Zzw
c2VwR+pFQWKN8nUzf83MS7xs8LOlN1b0vJMYbvTzAfWCxGCTnzs3xlIbYxLn
m/088/Hpeu8diX7Xz0MPj2y7cUUik/TzOVUSvS1+Vq+nJBYoj3xLbF4Sbykf
qvVKoo3y856yzUviOI13LFtszxYFCvT9r4teCZSSb7B6bqB6TmCS5lfaPVHS
PSGwL8Y9An0RP68rj8DJEPcIrBjcI1BtcI9AUeceG2mDe2wMB7nHRirMPTbm
JffYOF3P+2PjdoJ7bAzSeihOrY2/Tdxjo8HlHgs1Se6xMJ7kHgsrSe6xILes
l4WfLvdYeORyj4Uul/fHwk6Xeyw8o/W5m1wdTa7G0EX59bRXMfwmvxpuJIYH
lMvUADF00Hznc15FsUL705tdezaKDOUabzoDUeyn3NbqVRRT1L8Ls5X9s5VR
dFC+pzwmCnHuMZGhvKw8JqoolyuPiZzDPREMOdwTQdzhngj2ONwTwW7K/coT
geHw/oRxxuGeMJ443BNGRT33hP/7fU8IfQnuCWGaslrugRAKlI8qTwjfE9wT
wgzlUeUJIp3gniCKW/oTRGpLf4LI1PlZcXIGXtH+XlMeA6bkHgNfhJ8Vp9XA
G8HXy0BB8P7oOCy5R0deco+Ox3V8/+iYov5JVTo+UP/UcViqY4n8V0+NlTcv
alii+faqATS8b+Dnm4Zx2o/ZyVufW9IaLjfx/4eGOO3vT97jQsMy5XDu5q6S
vRoyLj+fNfwDwTlp3w==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-18.273489507886268`, 24.}, {-16.273489507868987`, 
            23.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-16.273489507868987`, 23.}, {-16.27348950788462, 22.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-16.273489507868987`, 23.}, {-14.273489507885756`, 
            22.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-16.27348950788462, 22.}, {-11.561682044808151`, 21.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-14.273489507885756`, 22.}, {-15.44020413113833, 21.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-11.561682044808151`, 21.}, {-11.561682044804229`, 
            20.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-15.44020413113833, 21.}, {-15.440204131132191`, 20.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-11.561682044804229`, 20.}, {-11.561682044803945`, 
            19.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJxNlE9IFFEcx8dSO7h0SZYSQ7ODNLN/ZuZtkBH2hfKwXQwPEXgxSSVWUneR
NjPciv6Y26JmipYsLAtloml/zD8Rmgcl9FSYF7skgZ2ihFBXaOf95vD78obh
w7z3+Lzfe2+OVDdU1OxRFMWffqy3Uh2INtftm1VkfEjZ/OvQTHj3r8CBy8TO
Y3vL3/8UKKshvuNeve1eFeisJdaLT+ZWLQr8qyMukAMEwleIz28ny7eTArkB
4tkvI1uXugQ+1xOHEmcy7rUKDFwlrpURWGwklsPLBfpDxLEfJ9JNwHGN+GiR
FYGCG8QTVTnpJrDSRnwuvumPb5rw3CX+vmbFRHEHcTB/oSl/wcR8F3F25VhW
5ZgJ5SX3MZEcI96SPiaa33EfE8FJ7mNiYIr7mPg9yX0MBCe4j4HC19zHwPYw
9zGgdHIfAzv3eX0MTN/iPgZKbhJLnSID4Rbuk+br3EdHSQv30THdyn107Ea4
j45IL/fRkXrGfXSMJriPju7nvD46hoa5j44/o8Q9pRuPSze8aBwn/jBjxYvC
N8RyupgXmW+Jc+QEXtTa35eXrHiwZdfTWp0/7kGFzYet5TR5ELLnLztrxYML
9v4G5pz1c04PMl4RP5E+bgRHuI8bL2z/denjRnKI2CF93MhLcB8XluPcx4XB
Qe7jQvQp93Ghr5+4Xvq48LGP10dDZi/30VDTw300rHdzHw0R+3z7hBUNPvs8
5VnXPVtDKkbcdjHpOLWmYuURcbUssIpPUX5/Vczb9yc+3vHtdEO6/0O+/yp2
2om/Wt1NFcdt1pba92cdVBF5wP8/Kv4DNNYC9A==
            "]], 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-15.440204131132191`, 20.}, {-11.561682044803945`, 
            19.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-11.561682044803945`, 19.}, {-11.561682044805593`, 
            18.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-11.561682044805593`, 18.}, {-8.873657586980414, 17.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-8.873657586980414, 17.}, {-3.92551717476465, 16.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-3.92551717476465, 16.}, {-3.925517174763911, 15.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-3.925517174763911, 15.}, {-3.9255171747662985`, 14.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-3.9255171747662985`, 14.}, {-2.9255171747509507`, 
            13.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{-2.9255171747509507`, 13.}, {-1.9255171747529403`, 
            12.}}, 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{-1.9255171747529403`, 12.}, {2.05515730882297, 11.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{2.05515730882297, 11.}, {4.999999999966008, 10.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{4.999999999966008, 10.}, {5.161988507179103, 9.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[{{5.161988507179103, 9.}, {6.737417653925547, 8.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], Dashing[{Small, Small}], 
           ArrowBox[BezierCurveBox[CompressedData["
1:eJwtk3001Qccxu/uEOsS+f3u+3Xvj2usg9I1FNd91jK0hjS75p1l1a3DXLRe
ZHmrTt6bzpUUbUicY5eoUadTph3kellrLOmNsG6JeZuXMXZ8znnO9zx/POd8
/vlSkTF+UXQajYblrFxaea3vszJipS5jjtoIT2laNYGHkkPjc8MUqi32Lhn/
TMDGT+9StIbC31oj1ckmAnpBat0gNYWkRpnOSw2BSO946zu5FD7Pmf3E5hEB
2f8DCkqFa1jwMIGSSa/iSS8KvZ/qf5YwRSDlStDEL+YUTktCjL/VITG0/RSd
MSvCCcrlagRBQtO+ggi3Dd2Vs2ISI0WJ9T7FImBM8CvdkcTo+mHhk1gRdFrv
lR73INFvx2Ac3i7C2gJXI8WXJOrGtEcELBG+CEmhtxxY3qsZD4oeCDHIViWr
kki4tF+vJ48IUdd2NKM3j0So5I8LZWZCtCptRRllJPyHFOk7m82giRM8vDlC
ovD8CgLI2HRJ+yIJBz1NwEaZAA28D+hDLCb2yQUz8y/5cE06u83AgQmHrDPx
S1l8NMvcJj/czUT+FaJ7ixMf/uE2rIMJTGSX32RUPefhzdPgqqpCJoRnvrPa
ncVD5u1O9WQTE55+4dTmrTw4LKRZeYwyob8UMucxwkXgoE9lQh1r1YeDbY5c
624tC7a1ijWeMg6CdY2jTSzZ8FyTXxM6xEbFLvtEx3A23hSQBf3ZbIh5SX64
yAZ779vGZmc2fouYHrN7zMb9WIpLDLJQY1kopws40Guoqr+fy0LT1/tPNoZx
0OaanaV1Y0HXcs9xeSkH5L8tl+OWvWg5TRVn/+Su+pBQd9i7O9rywJ2JWpLK
SFQyhoaFKTzMc5PzHIcI/OX5NNenlweprtYnNZvAwVQB7m3k41n9j1vFzgSc
bpVMnTjNx4BN1S7OgCm8JvbVpLzgw1PxzrnIHFP8YH0ork0qgGF0uQ5NagpZ
cItLQKEAEufCknHteky4TCk32ApXfUzQJ7EqmisU4m7JBbstMIGJ9nJbvK4I
+Xfl3havjBGeZ/nTMTcR2Auaf+QqY/RnXprPOyyCh++ibY+HMU71M9Q3romw
I7G776OZdQhL/ab99VsRIjO4sYqoddiT1Oprb0vhd00Pz/qREVQdLGn6AQql
Hxs8PupvhJm4oLyRSgodr6trInsMUdKw6fv3xeZ4It9fqhxlILAm5tW1fHNg
56Y7DkwGqCC2KnfBHNOt7+pe9V6Lmesbzt8KssBi14CyU/Ue+prLx5xqLRAQ
0WVQMW6AzrTMi3SaGHrHWls3Bxuga7qvmO++3M06a2N69PGCe24mPVmMwB3P
m0O/0gdt/EapW7149d/18R9RZaZ1
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{11.99999999985323, 38.}, {9.000000000171894, 37.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1wtQVXUeB/CDiLZo8nC3aU3WewF5P+6D+359z01IzRlDx8EiB0Zd2CZq
8bG15OXhi2oNiyxlBRUbQaEw2lYwRcVtNyyxLZuIYS2uC1js4roN5BZTuPf+
z5nxy3/ODPc75zGf+/2dcwDt+t+u+vUMSZIiQiQp+FN6LvBBikXwo1Tlxf/K
lPzdS+u6psq8uKnmPa9tP56/xYshNf/lvpKL95V40afmuvkx4bqNXnyk5ghx
ghddak4qv5pYvsqLNjX7R/t+bF/qxWE12z89Kj3o9qJGzUaxvNil5uDpVxO9
2KPmnk0LA5sXTWqOjgouL3rVnN8eFti8CFO/X9PKyWMrJ2WsVPOt/wSXjBNq
tu4dCmwy5m9T8s70/h3p/TLe9ZHnXRkp5Ur2BT3HZdSo+VLQ0yBjoJw8tTIi
K8izW4a+gjzPyXBWkOfpu/ttQc+Gu+cLz1oZOeXcj4zwcu5HRr+P+5HRrmZR
T5SMWh/3I6PCx/0AW33cz90sPENApY/7AXrVnCX6AYZ85DkOjLOnAbjj436A
0HLuB5ih5mbRDzCpHv9f0Q8wxp4NwAB71gJVPC8j8Hv2JAIHp/UDDLMnCshj
TxgwoeblRyaWHZnw4D11HoNfBpcHJyqVvDl4uR4PuquUPEtcwANpt5KLxPJg
TM0/HAt+QQ/Cq5VcE6zX6kGeuj9WLA+u7lRyR+GcwOZB1Xb2uJGver4SHjeK
1PtZfL0eN974nZLDhMeNfevZ48aCdUr+XnjcaFmrZDFuqxveNUqOEx43rq9i
jxsv5Cr5YeFxwZrLHhe+zeV+XPjTau7HhRvr2OPCFwXcjws/L2CPCw357HGh
ZA17XHh+hZKXCY8TY2CPEw0G9jixX8seJ4q+kkQuFh4nNn6k5EnhcWLvaYk8
TgyfkMjjxIZ6iTxOzHtFonk5MFwtkSeQKyXyOBC5TSKPAwNbJerHgeItEvXj
gHUzexx4eBN7HGgsZU/g+FL22DG/lD126ErZY0dtKXvsuLmZPXZ8PM1jx62t
7LFj+TNKjhceO64/yx47/lzGHhv+to09NkRXsMeG+ir22OB/kT02vPESz8sG
7ctKfll4bCiolej5suHRfeyxIfJ19lhRvZ89VnQeYI8VzXXssaLmIHus0NZz
P1ZcrmePFS828LysyDvEHischyV6viwwHGGPBa5G9liQf5Q9FqxuYo8FrzZz
PxZcO87zsiCjhfuxoLqVPRZ88yb3Y8bqNvaY8cFJ9pjhbWePGfZT7DGjvYP7
MSNUfb6U96EZhve4HzOcZ9hjRuxZ9pgwfJY9JuzoYo8JP3Wxx4Sb59hjQt55
JSvvQxOiLrDHhPu7uR8TSi6yx4R57/O8sjD1V/ZkwdHDniz0fMieLBR+xp4s
mPp4Xlk41c/zysL1Ae4nCx3XlNwpPIHz1feZ8j40onCQPUaY/OwxosPPHiP8
fvYYcc3PHiP6/Owx4rKfPUac9nM/RjT6eV4G7Pazx4CN0zwGuKd5DGgbZI8B
fxjk+8eA7YPsMeDVQfYY0DnIHgNuD7JHjxXTPHqcnebRQ77OHj0Kh9ijx9QQ
96PHrmH26DE+zPePHktH2KPH7hH26NA6wh4dOkbYc3e/4tFhwQh7dEgcYY8O
7SPs0eHUDe5HB9M37NFB/y8lv+Ye3ecezcSJMSV3nQ2uTBy8pWRxub2Z+Nm4
kueIC2RihaT8fr3SG1wZMM9U8oS4ITPQNFvJMeIPsgz8MVzJ2UuCKwPR9yr5
yYvBfzgyEBGh5NeFJx21kSHkSUddlJKHhScdcdFKnis86bgSxZ401EaxJw2W
KPakoTuSPWlIUnOJ8KThGdWj9JOKpnnsSUXHvexJRetc9qSi+x72pKBuNntS
UDtLyWLcm1LwVpiSc4QnBV/PZE8KvGreJzzJ6A5lTzIKQtmTjEWh7EmGf4aS
Bac3Ccnq/nHhSULsTPYkoVf1CM6SwP57eF5JSJnD/STCP62fROTMZ08iHr8/
hO6fwPGp3E8Cjuq5nwScNLMnAbMdPK8EtLi5nwQckNmzGJ88yJ7FWJ3NnsXQ
5rBnMZqz2ROPndnsicfBbL5/4jGWzZ54lOWwJx7eh9gTh5yl7InDrmXsicPU
cp5XHHof4XkF/s+2jP7w9k9atJ2beOVyYyzqbzR+feG2FiH7e2quPBt4zguS
Psz8txaX1mS/fzU3FucbKw/fGdDizo9P6f+REYvSN5uLMz/QonWP3H9jXizM
lYfiL7wVOD6ku/O7b7WIXLjx85N7tcgrGP377H4tpB2TZVNPavHYsXOamIta
hL1TGH1yiRYff+JsNbVpYene4jzarEFxy+fR+cVapLywaCDmFxqMV9z5PjxR
izNRl/oe0izCU7lnHs8e06Bx1w5/Ueav8IVmlju8U4O5Tzz9aV1eDAw3/9nw
6PMa3D6/p+XLuoWo6HikzLhOg/XVA78xjT+A076Vnx2wapB74bGIxqIHMOwZ
bK3+pQbdT8w9FDO+AJJYGvwfI4U/Kw==
            "]], 0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{6.737417653925547, 8.}, {6.7374176539250925`, 7.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{6.7374176539250925`, 7.}, {8.000000000158082, 6.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{8.000000000158082, 6.}, {10.000000000156035`, 5.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{10.000000000156035`, 5.}, {10.353993556455066`, 4.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{10.353993556455066`, 4.}, {10.353993556455407`, 3.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{10.353993556455407`, 3.}, {11.251488225338505`, 2.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{11.251488225338505`, 2.}, {12.251488225339415`, 1.}}, 
            0.38104098918987583`]}, 
          {RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]], 
           ArrowBox[{{12.251488225339415`, 1.}, {12.883311517056939`, 0.}}, 
            0.38104098918987583`]}}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], EdgeForm[None], 
             PolygonBox[{{-0.3586266340417706, 39.880457915666405`}, {0., 
              39.64137336595823}, {0.3586266340417706, 39.880457915666405`}, {
              0.3586266340417706, 40.35862663404177}, {-0.3586266340417706, 
              40.35862663404177}, {-0.3586266340417706, 
              39.880457915666405`}}]},
            TagBox[
             GridBox[{{"\"Axiom 1\""}, {
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Axiom 1", $CellContext`x1 == \
$CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, 
                 $CellContext`not[$CellContext`x2]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], EdgeForm[None], 
             PolygonBox[{{-13.615399286744863`, 
              38.880457915666405`}, {-13.256772652703091`, 
              38.64137336595823}, {-12.89814601866132, 
              38.880457915666405`}, {-12.89814601866132, 
              39.35862663404177}, {-13.615399286744863`, 
              39.35862663404177}, {-13.615399286744863`, 
              38.880457915666405`}}]},
            TagBox[
             GridBox[{{"\"Axiom 2\""}, {
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Axiom 2", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x2]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], EdgeForm[None], 
             PolygonBox[{{-22.358626634845137`, 
              39.880457915666405`}, {-22.000000000803368`, 
              39.64137336595823}, {-21.6413733667616, 
              39.880457915666405`}, {-21.6413733667616, 
              40.35862663404177}, {-22.358626634845137`, 
              40.35862663404177}, {-22.358626634845137`, 
              39.880457915666405`}}]},
            TagBox[
             
             GridBox[{{"\"Axiom 3\""}, {"True"}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Axiom 3", True}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], EdgeForm[None], 
             PolygonBox[{{-24.358626634844967`, 
              37.880457915666405`}, {-24.000000000803198`, 
              37.64137336595823}, {-23.641373366761428`, 
              37.880457915666405`}, {-23.641373366761428`, 
              38.35862663404177}, {-24.358626634844967`, 
              38.35862663404177}, {-24.358626634844967`, 
              37.880457915666405`}}]},
            TagBox[
             GridBox[{{"\"Axiom 4\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", "x3"}], ")"}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Axiom 4", $CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, $CellContext`x3]] == \
$CellContext`or[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`and[$CellContext`x1, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], EdgeForm[None], 
             PolygonBox[{{-7.3586266339883375`, 
              38.880457915666405`}, {-6.999999999946567, 
              38.64137336595823}, {-6.641373365904797, 
              38.880457915666405`}, {-6.641373365904797, 
              39.35862663404177}, {-7.3586266339883375`, 
              39.35862663404177}, {-7.3586266339883375`, 
              38.880457915666405`}}]},
            TagBox[
             GridBox[{{"\"Axiom 5\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x3"}], ")"}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Axiom 5", $CellContext`and[
                $CellContext`or[$CellContext`x1, $CellContext`x2], 
                $CellContext`or[$CellContext`x1, $CellContext`x3]] == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[71, 255], 
              Rational[182, 255], 
              Rational[109, 255]], EdgeForm[None], 
             PolygonBox[{{5.17024831150698, 38.880457915666405`}, {
              5.5288749455487505`, 38.64137336595823}, {5.887501579590521, 
              38.880457915666405`}, {5.887501579590521, 39.35862663404177}, {
              5.17024831150698, 39.35862663404177}, {5.17024831150698, 
              38.880457915666405`}}]},
            TagBox[
             
             GridBox[{{"\"Axiom 6\""}, {"True"}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Axiom 6", True}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[146, 255], 
              Rational[10, 17], 0], EdgeForm[None], 
             PolygonBox[{{11.999999999851354`, 38.57412953843193}, {
              12.42587046141942, 39.}, {11.999999999851354`, 
              39.42587046156807}, {11.57412953828329, 39.}, {
              11.999999999851354`, 38.57412953843193}}]},
            TagBox[
             GridBox[{{"\"Hypothesis 1\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], " "}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Hypothesis 1", $CellContext`or[
                $CellContext`not[
                 $CellContext`or[$CellContext`b, 
                  $CellContext`not[$CellContext`a]]], 
                $CellContext`not[
                 $CellContext`or[
                  $CellContext`not[$CellContext`a], 
                  $CellContext`not[$CellContext`b]]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-1.8733653626927094`, 
              39.42787092676131}, {-2.299235824260774, 
              38.690243778026776`}, {-1.4474949011246445`, 
              38.690243778026776`}, {-1.8733653626927094`, 
              39.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 1\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}], 
                  "\[Equal]", "x2"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 1", $CellContext`and[$CellContext`x2, 
                $CellContext`or[$CellContext`x1, 
                 $CellContext`not[$CellContext`x1]]] == $CellContext`x2}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-19.000000000809905`, 
              37.42787092676131}, {-19.42587046237797, 
              36.690243778026776`}, {-18.57412953924184, 
              36.690243778026776`}, {-19.000000000809905`, 
              37.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 2\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 2", $CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-26.000000000812122`, 
              37.42787092676131}, {-26.425870462380185`, 
              36.690243778026776`}, {-25.57412953924406, 
              36.690243778026776`}, {-26.000000000812122`, 
              37.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 3\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", "x3"}], ")"}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 3", $CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, $CellContext`x3]] == \
$CellContext`or[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`and[$CellContext`x1, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{2.3874235921539366`*^-12, 
              38.42787092676131}, {-0.4258704615656773, 
              37.690243778026776`}, {0.42587046157045216`, 
              37.690243778026776`}, {2.3874235921539366`*^-12, 
              38.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 4\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x2"}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 4", $CellContext`or[$CellContext`x1, \

                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]] == \
$CellContext`or[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-8.256772652701443, 
              38.42787092676131}, {-8.682643114269508, 
              37.690243778026776`}, {-7.8309021911333785`, 
              37.690243778026776`}, {-8.256772652701443, 38.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 5\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}], 
                  "\[Equal]", "x2"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 5", $CellContext`or[$CellContext`x2, \

                $CellContext`and[$CellContext`x1, 
                 $CellContext`not[$CellContext`x1]]] == $CellContext`x2}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-6.9999999999457145`, 
              38.42787092676131}, {-7.425870461513779, 
              37.690243778026776`}, {-6.57412953837765, 
              37.690243778026776`}, {-6.9999999999457145`, 
              38.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 6\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", "x3"}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 6", $CellContext`or[$CellContext`x1, \

                $CellContext`and[$CellContext`x2, $CellContext`x3]] == \
$CellContext`and[
                $CellContext`or[$CellContext`x1, $CellContext`x2], 
                $CellContext`or[$CellContext`x1, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-3.000000000005116, 
              38.42787092676131}, {-3.4258704615731808`, 
              37.690243778026776`}, {-2.574129538437051, 
              37.690243778026776`}, {-3.000000000005116, 38.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 7\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x2"}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 7", $CellContext`or[$CellContext`x1, \
$CellContext`x2] == $CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{6.9999999998593125`, 38.42787092676131}, {
              6.574129538291248, 37.690243778026776`}, {7.425870461427377, 
              37.690243778026776`}, {6.9999999998593125`, 
              38.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 8\""}, {
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}], " "}]}], 
                    ")"}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 8", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
                $CellContext`not[
                 $CellContext`or[$CellContext`x2, 
                  $CellContext`not[$CellContext`x2]]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-10.999999999922693`, 
              37.42787092676131}, {-11.425870461490758`, 
              36.690243778026776`}, {-10.574129538354628`, 
              36.690243778026776`}, {-10.999999999922693`, 
              37.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 9\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 9", \
$CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-7.99999999993679, 
              37.42787092676131}, {-8.425870461504855, 
              36.690243778026776`}, {-7.574129538368726, 
              36.690243778026776`}, {-7.99999999993679, 37.42787092676131}}]},
            
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 10\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", "x1"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 10", $CellContext`or[$CellContext`x1, 
                $CellContext`not[
                 $CellContext`not[$CellContext`x1]]] == $CellContext`x1}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-5.000000000013529, 
              36.42787092676131}, {-5.425870461581593, 
              35.690243778026776`}, {-4.574129538445464, 
              35.690243778026776`}, {-5.000000000013529, 36.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 11\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}], ")"}], 
                    " "}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 11", \
$CellContext`and[$CellContext`x1, 
                $CellContext`not[
                 $CellContext`not[
                  $CellContext`not[$CellContext`x1]]]] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`not[$CellContext`x1]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{6.99999999985954, 37.42787092676131}, {
              6.5741295382914755`, 36.690243778026776`}, {7.425870461427604, 
              36.690243778026776`}, {6.99999999985954, 37.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 12\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], "\[Equal]", 
                  RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}], " "}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 12", \
$CellContext`and[$CellContext`x1, 
                $CellContext`not[$CellContext`x1]] == $CellContext`not[
                $CellContext`or[$CellContext`x2, 
                 $CellContext`not[$CellContext`x2]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-3.999999999942986, 
              35.42787092676131}, {-4.4258704615110505`, 
              34.690243778026776`}, {-3.574129538374921, 
              34.690243778026776`}, {-3.999999999942986, 35.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 13\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 13", $CellContext`or[$CellContext`x1, 
                $CellContext`not[
                 $CellContext`not[$CellContext`x1]]] == $CellContext`or[
                $CellContext`and[$CellContext`x1, 
                 $CellContext`not[$CellContext`x1]], 
                $CellContext`not[
                 $CellContext`not[$CellContext`x1]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-3.9999999999616307, 34.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 1\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 1", $CellContext`or[$CellContext`x1, 
                $CellContext`not[
                 $CellContext`not[$CellContext`x1]]] == $CellContext`not[
                $CellContext`not[$CellContext`x1]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-3.586633470833192, 33.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 2\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 2", $CellContext`or[$CellContext`x1, 
                $CellContext`not[
                 $CellContext`not[$CellContext`x1]]] == $CellContext`not[
                $CellContext`not[$CellContext`x1]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-3.586633470836148, 32.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 3\""}, {
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Substitution Lemma 3", $CellContext`x1 == \
$CellContext`not[
                $CellContext`not[$CellContext`x1]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-8.000000000394323, 
              31.42787092676131}, {-8.425870461962388, 
              30.690243778026776`}, {-7.574129538826258, 
              30.690243778026776`}, {-8.000000000394323, 31.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 14\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "x1", " "}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x2"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 14", \
$CellContext`and[$CellContext`x2, 
                $CellContext`not[$CellContext`x1]] == $CellContext`and[
                $CellContext`not[$CellContext`x1], 
                $CellContext`or[$CellContext`x1, $CellContext`x2]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-2.000000000261707, 
              31.42787092676131}, {-2.425870461829772, 
              30.690243778026776`}, {-1.5741295386936422`, 
              30.690243778026776`}, {-2.000000000261707, 31.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 15\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 15", $CellContext`or[$CellContext`x2, 
                $CellContext`not[$CellContext`x1]] == $CellContext`or[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`not[$CellContext`x1]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-1.0000000003411742`, 
              23.42787092676131}, {-1.425870461909239, 
              22.690243778026776`}, {-0.5741295387731095, 
              22.690243778026776`}, {-1.0000000003411742`, 
              23.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 16\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 16", $CellContext`or[$CellContext`x2, 
                $CellContext`not[$CellContext`x1]] == $CellContext`or[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`not[$CellContext`x1]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-7.000000000412911, 
              30.42787092676131}, {-7.425870461980975, 
              29.690243778026776`}, {-6.574129538844846, 
              29.690243778026776`}, {-7.000000000412911, 30.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 17\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x2"}], ")"}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 17", $CellContext`or[$CellContext`x1, 
                $CellContext`or[$CellContext`x1, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-7.00000000044912, 29.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 4\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x2"}], ")"}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x2"}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 4", $CellContext`or[$CellContext`x1, 
                $CellContext`or[$CellContext`x1, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-15.273489507895931`, 
              28.42787092676131}, {-15.699359969463996`, 
              27.690243778026776`}, {-14.847619046327866`, 
              27.690243778026776`}, {-15.273489507895931`, 
              28.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 18\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x3"}], ")"}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 18", $CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`or[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`and[
                $CellContext`or[$CellContext`x1, $CellContext`x2], 
                $CellContext`or[$CellContext`x1, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-16.273489507901047, 27.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 5\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x3"}], ")"}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 5", $CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`or[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-8.000000000399552, 
              30.42787092676131}, {-8.425870461967618, 
              29.690243778026776`}, {-7.574129538831488, 
              29.690243778026776`}, {-8.000000000399552, 30.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 19\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 19", $CellContext`and[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`not[
                 $CellContext`not[$CellContext`x1]]] == $CellContext`and[
                $CellContext`not[
                 $CellContext`not[$CellContext`x1]], 
                $CellContext`or[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-9.00000000051466, 29.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 6\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Substitution Lemma 6", $CellContext`and[$CellContext`x1, \

                $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
                $CellContext`not[
                 $CellContext`not[$CellContext`x1]], 
                $CellContext`or[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-9.27348950789866, 28.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 7\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", "x1", " "}], ")"}], " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Substitution Lemma 7", $CellContext`and[$CellContext`x1, \

                $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[$CellContext`x2, 
                $CellContext`not[
                 $CellContext`not[$CellContext`x1]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-9.273489507898546, 27.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 8\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Substitution Lemma 8", $CellContext`and[$CellContext`x1, \

                $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-18.27348950789218, 
              26.42787092676131}, {-18.699359969460243`, 
              25.690243778026776`}, {-17.847619046324116`, 
              25.690243778026776`}, {-18.27348950789218, 26.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 20\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x3", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 20", \
$CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x3, 
                 $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`or[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`and[$CellContext`x1, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-18.27348950789917, 25.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 9\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x3", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Substitution Lemma 9", $CellContext`and[$CellContext`x1, \

                $CellContext`or[$CellContext`x3, 
                 $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-20.273489507895817`, 
              26.42787092676131}, {-20.69935996946388, 
              25.690243778026776`}, {-19.847619046327754`, 
              25.690243778026776`}, {-20.273489507895817`, 
              26.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 21\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x3"}], ")"}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 21", \
$CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, 
                 $CellContext`and[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`or[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`and[$CellContext`x1, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-22.273489507907527, 25.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 10\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x3"}], ")"}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 10", $CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, 
                 $CellContext`and[$CellContext`x1, $CellContext`x3]]] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-16.27348950789161, 
              26.42787092676131}, {-16.699359969459675`, 
              25.690243778026776`}, {-15.847619046323546`, 
              25.690243778026776`}, {-16.27348950789161, 26.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 22\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 22", $CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x2]]] == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x1, $CellContext`x2]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-15.273489507885245, 25.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 11\""}, {
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Substitution Lemma 11", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x1, $CellContext`x2]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-14.273489507881152`, 
              24.42787092676131}, {-14.699359969449217`, 
              23.690243778026776`}, {-13.847619046313087`, 
              23.690243778026776`}, {-14.273489507881152`, 
              24.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 23\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 23", \
$CellContext`and[$CellContext`x1, 
                $CellContext`not[$CellContext`x1]] == \
$CellContext`and[$CellContext`x2, 
                $CellContext`and[$CellContext`x1, 
                 $CellContext`not[$CellContext`x1]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-16.27348950786643, 
              24.42787092676131}, {-16.699359969434493`, 
              23.690243778026776`}, {-15.847619046298364`, 
              23.690243778026776`}, {-16.27348950786643, 24.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 24\""}, {
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 24", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x1, $CellContext`x2]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-6.000000000398529, 
              24.42787092676131}, {-6.425870461966594, 
              23.690243778026776`}, {-5.574129538830465, 
              23.690243778026776`}, {-6.000000000398529, 24.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 25\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 25", $CellContext`and[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`not[$CellContext`x1]] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`not[$CellContext`x1]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-12.273489507882744`, 
              23.42787092676131}, {-12.699359969450809`, 
              22.690243778026776`}, {-11.847619046314678`, 
              22.690243778026776`}, {-12.273489507882744`, 
              23.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 26\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 26", \
$CellContext`and[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`not[$CellContext`x1]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-5.470950191007887, 23.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 12\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 12", $CellContext`and[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`not[$CellContext`x1]] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`not[$CellContext`x1]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-7.677035990471438, 
              22.42787092676131}, {-8.102906452039504, 
              21.690243778026776`}, {-7.251165528903374, 
              21.690243778026776`}, {-7.677035990471438, 22.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 27\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}], "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}], ")"}]}]}},
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 27", $CellContext`and[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`not[
                 $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`and[
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x2]], 
                $CellContext`not[
                 $CellContext`and[$CellContext`x1, $CellContext`x2]]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-8.87365758698138, 21.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 13\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 13", $CellContext`and[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`not[
                 $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`and[$CellContext`x2, 
                $CellContext`not[$CellContext`x2]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-1.0000000003710738`, 
              22.42787092676131}, {-1.4258704619391387`, 
              21.690243778026776`}, {-0.5741295388030091, 
              21.690243778026776`}, {-1.0000000003710738`, 
              22.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 28\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "x2", " "}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}], ")"}]}]}},
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 28", $CellContext`or[
                $CellContext`not[$CellContext`x2], 
                $CellContext`not[
                 $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`or[
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x2]], 
                $CellContext`not[
                 $CellContext`and[$CellContext`x1, $CellContext`x2]]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-1.0000000003680611, 21.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 14\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "x2", " "}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 14", $CellContext`or[
                $CellContext`not[$CellContext`x2], 
                $CellContext`not[
                 $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`not[
                $CellContext`and[$CellContext`x1, $CellContext`x2]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-6.1809003054237905`, 
              22.42787092676131}, {-6.606770766991855, 
              21.690243778026776`}, {-5.755029843855726, 
              21.690243778026776`}, {-6.1809003054237905`, 
              22.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 29\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], " "}]}], 
                    ")"}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 29", $CellContext`or[$CellContext`x1, 
                $CellContext`not[
                 $CellContext`and[$CellContext`x2, 
                  $CellContext`not[$CellContext`x1]]]] == $CellContext`or[
                $CellContext`and[$CellContext`x1, 
                 $CellContext`not[$CellContext`x1]], 
                $CellContext`not[
                 $CellContext`and[$CellContext`x2, 
                  $CellContext`not[$CellContext`x1]]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-6.180900305424757, 21.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 15\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], " "}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Substitution Lemma 15", $CellContext`or[$CellContext`x1, \

                $CellContext`not[
                 $CellContext`and[$CellContext`x2, 
                  $CellContext`not[$CellContext`x1]]]] == $CellContext`not[
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{2.0551573088222312, 20.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 16\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "x1", " "}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 16", $CellContext`or[
                $CellContext`not[$CellContext`x1], 
                $CellContext`not[
                 $CellContext`and[$CellContext`x1, $CellContext`x2]]] == \
$CellContext`not[
                $CellContext`and[$CellContext`x1, $CellContext`x2]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-18.273489507886268`, 
              24.42787092676131}, {-18.69935996945433, 
              23.690243778026776`}, {-17.847619046318204`, 
              23.690243778026776`}, {-18.273489507886268`, 
              24.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 30\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", "x3"}], ")"}]}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x3"}], ")"}]}], ")"}]}], 
                    ")"}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{
             "Critical Pair Lemma 30", $CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, 
                 $CellContext`and[$CellContext`x2, $CellContext`x3]]] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`or[$CellContext`x1, $CellContext`x3]]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-16.273489507868987, 23.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 17\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x3"}], ")"}]}], ")"}]}], 
                    ")"}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Substitution Lemma 17", \
$CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`or[$CellContext`x1, $CellContext`x3]]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-16.27348950788462, 
              22.42787092676131}, {-16.699359969452683`, 
              21.690243778026776`}, {-15.847619046316554`, 
              21.690243778026776`}, {-16.27348950788462, 22.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 31\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x3"}], ")"}]}], ")"}]}], 
                    ")"}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 31", \
$CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`or[$CellContext`x1, $CellContext`x3]]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-14.273489507885756`, 
              22.42787092676131}, {-14.699359969453822`, 
              21.690243778026776`}, {-13.847619046317691`, 
              21.690243778026776`}, {-14.273489507885756`, 
              22.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 32\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x3"}], ")"}]}], ")"}]}], 
                    ")"}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 32", \
$CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`or[$CellContext`x1, $CellContext`x3]]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-11.561682044808151`, 
              21.42787092676131}, {-11.987552506376216`, 
              20.690243778026776`}, {-11.135811583240086`, 
              20.690243778026776`}, {-11.561682044808151`, 
              21.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 33\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", "x3"}], ")"}]}], ")"}]}], 
                    ")"}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 33", \
$CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`or[$CellContext`x1, $CellContext`x3]]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-15.44020413113833, 
              21.42787092676131}, {-15.866074592706395`, 
              20.690243778026776`}, {-15.014333669570265`, 
              20.690243778026776`}, {-15.44020413113833, 21.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 34\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x3", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 34", \
$CellContext`and[$CellContext`x3, 
                $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`and[$CellContext`x1, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-11.561682044804229`, 
              20.42787092676131}, {-11.987552506372294`, 
              19.690243778026776`}, {-11.135811583236164`, 
              19.690243778026776`}, {-11.561682044804229`, 
              20.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 35\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x3", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 35", \
$CellContext`and[$CellContext`x3, 
                $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`and[$CellContext`x2, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-2.925517174746574, 20.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 18\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], " "}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{
             "Substitution Lemma 18", $CellContext`or[$CellContext`x1, 
                $CellContext`not[
                 $CellContext`and[$CellContext`x2, 
                  $CellContext`not[$CellContext`x1]]]] == $CellContext`not[
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-15.440204131132191`, 
              20.42787092676131}, {-15.866074592700256`, 
              19.690243778026776`}, {-15.014333669564126`, 
              19.690243778026776`}, {-15.440204131132191`, 
              20.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 36\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x3", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 36", \
$CellContext`and[$CellContext`x3, 
                $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`and[$CellContext`x1, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-11.561682044803945, 19.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 19\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x3", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 19", $CellContext`and[$CellContext`x3, 
                $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[$CellContext`x2, 
                $CellContext`and[$CellContext`x1, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-11.561682044805593`, 
              18.42787092676131}, {-11.987552506373659`, 
              17.690243778026776`}, {-11.135811583237528`, 
              17.690243778026776`}, {-11.561682044805593`, 
              18.42787092676131}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 37\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x3", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", "x3"}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 37", \
$CellContext`and[$CellContext`x3, 
                $CellContext`and[$CellContext`x1, $CellContext`x2]] == \
$CellContext`and[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, $CellContext`x3]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-8.873657586980414, 17.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 20\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}], ")"}]}], 
                    ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 20", $CellContext`and[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[
                  $CellContext`and[$CellContext`x1, $CellContext`x2]]]] == \
$CellContext`and[$CellContext`x2, 
                $CellContext`not[$CellContext`x2]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-3.92551717476465, 
              16.42787092676131}, {-4.351387636332714, 
              15.690243778026776`}, {-3.499646713196585, 
              15.690243778026776`}, {-3.92551717476465, 16.42787092676131}}]},
            
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 38\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], " "}]}], ")"}]}], 
                    ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 38", $CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]]]] == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x2]]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-3.925517174763911, 15.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 21\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], " "}]}], ")"}]}], 
                    ")"}], "\[Equal]", "x1"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Substitution Lemma 21", $CellContext`or[$CellContext`x1, \

                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[
                  $CellContext`and[$CellContext`x2, 
                   $CellContext`not[$CellContext`x1]]]]] == $CellContext`x1}],
             "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-3.9255171747662985`, 
              14.427870926761312`}, {-4.351387636334363, 
              13.690243778026776`}, {-3.4996467131982336`, 
              13.690243778026776`}, {-3.9255171747662985`, 
              14.427870926761312`}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 39\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}], " "}]}], ")"}]}], 
                    ")"}], "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Critical Pair Lemma 39", \
$CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, 
                 $CellContext`not[
                  $CellContext`and[$CellContext`x1, 
                   $CellContext`not[$CellContext`x2]]]]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{-2.9255171747509507, 13.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 22\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 22", $CellContext`and[$CellContext`x1, 
                $CellContext`not[
                 $CellContext`and[$CellContext`x1, 
                  $CellContext`not[$CellContext`x2]]]] == \
$CellContext`and[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{-1.9255171747529403`, 
              12.427870926761312`}, {-2.351387636321005, 
              11.690243778026776`}, {-1.4996467131848754`, 
              11.690243778026776`}, {-1.9255171747529403`, 
              12.427870926761312`}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 40\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "x1", " "}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 40", $CellContext`or[
                $CellContext`not[$CellContext`x1], 
                $CellContext`not[
                 $CellContext`and[$CellContext`x1, 
                  $CellContext`not[$CellContext`x2]]]] == $CellContext`or[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`not[$CellContext`x1]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{2.05515730882297, 11.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 23\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], " "}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 23", $CellContext`not[
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]] == $CellContext`or[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`not[$CellContext`x2]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{4.999999999966008, 10.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 24\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[And]", 
                    RowBox[{"\[Not]", "x1", " "}]}], ")"}], " "}], ")"}], 
                  "\[Equal]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[Or]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 24", $CellContext`not[
                $CellContext`and[$CellContext`x2, 
                 $CellContext`not[$CellContext`x1]]] == \
$CellContext`or[$CellContext`x1, 
                $CellContext`not[$CellContext`x2]]}], "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[47, 51], 
              Rational[98, 255], 
              Rational[53, 255]], EdgeForm[None], 
             PolygonBox[{{5.161988507179103, 9.427870926761312}, {
              4.736118045611039, 8.690243778026776}, {5.587858968747168, 
              8.690243778026776}, {5.161988507179103, 9.427870926761312}}]},
            TagBox[
             GridBox[{{"\"Critical Pair Lemma 41\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "x1", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "x2", " "}]}], ")"}], "\[Equal]", 
                  RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[And]", "x2"}], ")"}], " "}]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Critical Pair Lemma 41", $CellContext`or[
                $CellContext`not[$CellContext`x1], 
                $CellContext`not[$CellContext`x2]] == $CellContext`not[
                $CellContext`and[$CellContext`x1, $CellContext`x2]]}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{11.99999999985323, 38.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 25\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], " "}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 25", $CellContext`or[
                $CellContext`not[
                 $CellContext`or[$CellContext`b, 
                  $CellContext`not[$CellContext`a]]], 
                $CellContext`not[
                 $CellContext`or[
                  $CellContext`not[$CellContext`a], 
                  $CellContext`not[$CellContext`b]]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{9.000000000171894, 37.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 26\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], " "}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], " "}]}], ")"}], 
                  "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 26", $CellContext`or[
                $CellContext`not[
                 $CellContext`or[$CellContext`b, 
                  $CellContext`not[$CellContext`a]]], 
                $CellContext`not[
                 $CellContext`or[
                  $CellContext`not[$CellContext`a], 
                  $CellContext`not[$CellContext`b]]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{6.737417653925547, 8.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 27\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], ")"}], " "}], 
                    ")"}], "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 27", $CellContext`not[
                $CellContext`and[
                 $CellContext`or[$CellContext`b, 
                  $CellContext`not[$CellContext`a]], 
                 $CellContext`or[
                  $CellContext`not[$CellContext`a], 
                  $CellContext`not[$CellContext`b]]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{6.7374176539250925, 7.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 28\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"b", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "a", " "}]}], ")"}], " "}], ")"}], 
                  "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 28", $CellContext`not[
                $CellContext`or[
                 $CellContext`and[$CellContext`b, 
                  $CellContext`not[$CellContext`b]], 
                 $CellContext`not[$CellContext`a]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{8.000000000158082, 6.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 29\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], " "}]}], ")"}], 
                    " "}], ")"}], "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 29", $CellContext`not[
                $CellContext`or[
                 $CellContext`not[$CellContext`a], 
                 $CellContext`not[
                  $CellContext`or[$CellContext`b, 
                   $CellContext`not[$CellContext`b]]]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{10.000000000156035, 5.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 30\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], " "}]}], ")"}], 
                    " "}], ")"}], "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 30", $CellContext`not[
                $CellContext`or[
                 $CellContext`not[$CellContext`a], 
                 $CellContext`not[
                  $CellContext`or[$CellContext`b, 
                   $CellContext`not[$CellContext`b]]]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{10.353993556455066, 4.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 31\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "a", " "}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], " "}]}], ")"}], 
                    " "}], ")"}], "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 31", $CellContext`not[
                $CellContext`or[
                 $CellContext`not[$CellContext`a], 
                 $CellContext`not[
                  $CellContext`or[$CellContext`b, 
                   $CellContext`not[$CellContext`b]]]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{10.353993556455407, 3.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 32\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"a", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], ")"}], " "}], 
                    ")"}], " "}], ")"}], "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 32", $CellContext`not[
                $CellContext`not[
                 $CellContext`and[$CellContext`a, 
                  $CellContext`or[$CellContext`b, 
                   $CellContext`not[$CellContext`b]]]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{11.251488225338505, 2.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 33\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{"a", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], ")"}], " "}], 
                    ")"}], " "}], ")"}], "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Substitution Lemma 33", $CellContext`not[
                $CellContext`not[
                 $CellContext`and[$CellContext`a, 
                  $CellContext`or[$CellContext`b, 
                   $CellContext`not[$CellContext`b]]]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[15, 17], 
              Rational[52, 85], 
              Rational[12, 85]], EdgeForm[None], 
             DiskBox[{12.251488225339415, 1.}, 0.38104098918987583]},
            TagBox[
             GridBox[{{"\"Substitution Lemma 34\""}, {
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"a", "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"b", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], ")"}], 
                  "\[Equal]", "a"}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            
            Column[{"Substitution Lemma 34", $CellContext`and[$CellContext`a, \

                $CellContext`or[$CellContext`b, 
                 $CellContext`not[$CellContext`b]]] == $CellContext`a}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            {RGBColor[
              Rational[13, 15], 
              Rational[1, 15], 0], EdgeForm[None], 
             RectangleBox[{12.547098857122284, -0.33621265993465455}, \
{13.219524176991593, 0.33621265993465455}]},
            TagBox[
             
             GridBox[{{"\"Conclusion 1\""}, {"True"}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"]],
           Annotation[#, 
            Column[{"Conclusion 1", True}], "Tooltip"]& ]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{317.59375, Automatic}], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{
         $CellContext`or[
          $CellContext`not[
           $CellContext`or[$CellContext`b, 
            $CellContext`not[$CellContext`a]]], 
          $CellContext`not[
           $CellContext`or[
            $CellContext`not[$CellContext`a], 
            $CellContext`not[$CellContext`b]]]], 
         $CellContext`or[
          $CellContext`and[
           $CellContext`not[$CellContext`b], 
           $CellContext`not[
            $CellContext`not[$CellContext`a]]], 
          $CellContext`not[
           $CellContext`or[
            $CellContext`not[$CellContext`a], 
            $CellContext`not[$CellContext`b]]]], 
         $CellContext`or[
          $CellContext`and[$CellContext`a, 
           $CellContext`not[$CellContext`b]], 
          $CellContext`not[
           $CellContext`or[
            $CellContext`not[$CellContext`a], 
            $CellContext`not[$CellContext`b]]]], 
         $CellContext`or[
          $CellContext`and[$CellContext`a, 
           $CellContext`not[$CellContext`b]], 
          $CellContext`and[
           $CellContext`not[
            $CellContext`not[$CellContext`a]], 
           $CellContext`not[
            $CellContext`not[$CellContext`b]]]], 
         $CellContext`or[
          $CellContext`and[$CellContext`a, 
           $CellContext`not[$CellContext`b]], 
          $CellContext`and[$CellContext`a, 
           $CellContext`not[
            $CellContext`not[$CellContext`b]]]], 
         $CellContext`or[
          $CellContext`and[$CellContext`a, $CellContext`b], 
          $CellContext`and[$CellContext`a, 
           $CellContext`not[$CellContext`b]]], 
         $CellContext`and[
          $CellContext`or[$CellContext`a, 
           $CellContext`and[$CellContext`a, 
            $CellContext`not[$CellContext`b]]], 
          $CellContext`or[$CellContext`b, 
           $CellContext`and[$CellContext`a, 
            $CellContext`not[$CellContext`b]]]], 
         $CellContext`and[
          $CellContext`and[
           $CellContext`or[$CellContext`a, $CellContext`a], 
           $CellContext`or[$CellContext`a, 
            $CellContext`not[$CellContext`b]]], 
          $CellContext`or[$CellContext`b, 
           $CellContext`and[$CellContext`a, 
            $CellContext`not[$CellContext`b]]]], 
         $CellContext`and[
          $CellContext`or[$CellContext`a, $CellContext`a], 
          $CellContext`or[$CellContext`a, 
           $CellContext`not[$CellContext`b]], 
          $CellContext`or[$CellContext`b, 
           $CellContext`and[$CellContext`a, 
            $CellContext`not[$CellContext`b]]]], 
         $CellContext`and[$CellContext`a, 
          $CellContext`or[$CellContext`a, 
           $CellContext`not[$CellContext`b]], 
          $CellContext`or[$CellContext`b, 
           $CellContext`and[$CellContext`a, 
            $CellContext`not[$CellContext`b]]]], 
         $CellContext`and[$CellContext`a, 
          $CellContext`and[
           $CellContext`or[$CellContext`a, $CellContext`b], 
           $CellContext`or[$CellContext`b, 
            $CellContext`not[$CellContext`b]]], 
          $CellContext`or[$CellContext`a, 
           $CellContext`not[$CellContext`b]]], 
         $CellContext`and[$CellContext`a, 
          $CellContext`or[$CellContext`a, $CellContext`b], 
          $CellContext`or[$CellContext`a, 
           $CellContext`not[$CellContext`b]], 
          $CellContext`or[$CellContext`b, 
           $CellContext`not[$CellContext`b]]], 
         $CellContext`and[$CellContext`a, $CellContext`true, 
          $CellContext`or[$CellContext`a, $CellContext`b], 
          $CellContext`or[$CellContext`a, 
           $CellContext`not[$CellContext`b]]], 
         $CellContext`and[$CellContext`a, 
          $CellContext`or[$CellContext`a, $CellContext`b], 
          $CellContext`or[$CellContext`a, 
           $CellContext`not[$CellContext`b]]], 
         $CellContext`and[$CellContext`a, 
          $CellContext`or[$CellContext`a, 
           $CellContext`not[$CellContext`b]]], $CellContext`a, {}}, {{{1, 
         2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 
         10}, {10, 11}, {11, 12}, {12, 13}, {13, 14}, {14, 15}, {15, 16}, {16,
          17}}, Null}]]}, 
      TagBox[
       GraphicsGroupBox[
        GraphicsComplexBox[{{0., 2.9391523179536475`*^-15}, {1., 
         2.8166876380389124`*^-15}, {2., 2.6942229581241772`*^-15}, {3., 
         2.5717582782094417`*^-15}, {4., 2.4492935982947065`*^-15}, {5., 
         2.326828918379971*^-15}, {6., 2.204364238465236*^-15}, {7., 
         2.0818995585505003`*^-15}, {8., 1.959434878635765*^-15}, {9., 
         1.7145055188062944`*^-15}, {10., 1.4695761589768238`*^-15}, {11., 
         1.2246467991473533`*^-15}, {12., 9.797174393178826*^-16}, {13., 
         7.347880794884119*^-16}, {14., 4.898587196589414*^-16}, {15., 
         2.449293598294707*^-16}, {16., 0.}}, {
          {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[
           0.012915614478114477`], 
           ArrowBox[{{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {
            8, 9}, {9, 10}, {10, 11}, {11, 12}, {12, 13}, {13, 14}, {14, 
            15}, {15, 16}, {16, 17}}, 0.08265993265993266]}, 
          {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
           DiskBox[1, 0.08265993265993266], DiskBox[2, 0.08265993265993266], 
           DiskBox[3, 0.08265993265993266], DiskBox[4, 0.08265993265993266], 
           DiskBox[5, 0.08265993265993266], DiskBox[6, 0.08265993265993266], 
           DiskBox[7, 0.08265993265993266], DiskBox[8, 0.08265993265993266], 
           DiskBox[9, 0.08265993265993266], DiskBox[10, 0.08265993265993266], 
           DiskBox[11, 0.08265993265993266], DiskBox[12, 0.08265993265993266],
            DiskBox[13, 0.08265993265993266], 
           DiskBox[14, 0.08265993265993266], DiskBox[15, 0.08265993265993266],
            DiskBox[16, 0.08265993265993266], 
           DiskBox[17, 0.08265993265993266]}}]],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->{346.25390625, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.771777469699024*^9, {3.771777823464171*^9, 3.771777831167096*^9}, 
   3.771777876674459*^9, 3.77177954672295*^9},
 TextAlignment->Center,
 CellLabel->
  "Out[203]=",ExpressionUUID->"245b67d4-d30e-4db0-a156-805806b9b7a1"]
}, Open  ]],

Cell[TextData[StyleBox["Neat, isn\[CloseCurlyQuote]t it?",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
  3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
  3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
  3.7716269406201468`*^9, 3.771626949020691*^9}, {3.7717710744851418`*^9, 
  3.771771115500502*^9}, {3.7717795129198523`*^9, 
  3.771779518381713*^9}},ExpressionUUID->"1a45ef32-42ce-4b8b-8bf0-\
aa3562a6482f"]
}, Closed]],

Cell[CellGroupData[{

Cell["How do the functions do that", "Chapter",
 CellChangeTimes->{{3.771625828418991*^9, 
  3.771625850533338*^9}},ExpressionUUID->"29c853d3-130e-4ed8-8176-\
913d1d4e63e1"],

Cell[TextData[{
 StyleBox["To provide a short step-by-step reduction of Boolean expressions, \
there are two major steps: \n\t1. identify potential application of heuristic \
rules and apply them\n\t2. find the shortest sequence of rule applications to \
reduce a Boolean expression to normal form\nThe identification functions use ",
  FontSize->20],
 StyleBox["pattern matching",
  FontSize->20,
  FontWeight->"Bold"],
 StyleBox[", the applications functions use ",
  FontSize->20],
 StyleBox["substitution",
  FontSize->20,
  FontWeight->"Bold"],
 StyleBox[" frameworks, and the search for shortest path uses ",
  FontSize->20],
 StyleBox["a dynamic version of Dijkstra\[CloseCurlyQuote]s algorithm",
  FontSize->20,
  FontWeight->"Bold"],
 StyleBox[".",
  FontSize->20]
}], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
  3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
  3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
  3.7716269406201468`*^9, 3.771626949020691*^9}, {3.7717710744851418`*^9, 
  3.771771115500502*^9}},ExpressionUUID->"e188d3d0-0145-4e54-9414-\
63e96674bbab"],

Cell[CellGroupData[{

Cell["Setting up: symbols I use for Boolean algebra", "Subsection",
 CellChangeTimes->{{3.7710161524133472`*^9, 3.7710161821909227`*^9}, {
  3.771097048948303*^9, 3.771097070178618*^9}, {3.77162658509308*^9, 
  3.771626590602467*^9}, {3.771774204230288*^9, 
  3.771774214134098*^9}},ExpressionUUID->"a1e82c2f-6705-4cf6-b145-\
67cce8bf47f6"],

Cell[TextData[StyleBox["Since Mathematica evaluates inputs upon entering \
them, we use the lower case version of Boolean literals and operators, namely \
\[OpenCurlyDoubleQuote]true\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]false\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]and\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]or\
\[CloseCurlyDoubleQuote], and \[OpenCurlyDoubleQuote]not\
\[CloseCurlyDoubleQuote]. We regard commutativity as a trivial property of \
\"and\" and \"or\" and set their attributes to be Orderless.",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}},ExpressionUUID->"a064d27d-8355-4cbc-b1eb-\
179984d78d93"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"and", ",", "Orderless"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"or", ",", "Orderless"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.7710973325510597`*^9, 3.77109736309226*^9}, {
  3.771097472997588*^9, 3.7710974736900473`*^9}},
 TextAlignment->Center,
 FontSize->18,
 CellLabel->
  "In[958]:=",ExpressionUUID->"1a2d70ff-86a3-4f83-a186-c30b9406cde5"],

Cell[TextData[{
 StyleBox["Notationally, \[OpenCurlyDoubleQuote]and\[CloseCurlyDoubleQuote] \
is written as \[OpenCurlyDoubleQuote]",
  FontSize->20],
 Cell[BoxData[
  FormBox[
   StyleBox["\[And]",
    FontSize->20], TraditionalForm]],
  FontSize->20,ExpressionUUID->"15125157-43f1-4574-85ba-6c54e5032f8a"],
 StyleBox["\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]or\
\[CloseCurlyDoubleQuote] is written as \[OpenCurlyDoubleQuote]\[Or]\
\[CloseCurlyDoubleQuote], and \[OpenCurlyDoubleQuote]not\
\[CloseCurlyDoubleQuote] is written as \[OpenCurlyDoubleQuote]\[Not]\
\[CloseCurlyDoubleQuote]. I also want to write \[OpenCurlyDoubleQuote]false\
\[CloseCurlyDoubleQuote] as \[OpenCurlyDoubleQuote]\[Perpendicular]\
\[CloseCurlyDoubleQuote], but there\[CloseCurlyQuote]s no corresponding \
symbol for \[OpenCurlyDoubleQuote]true\[CloseCurlyDoubleQuote].",
  FontSize->20]
}], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774232040411*^9, 3.7717742749106216`*^9}, {
  3.7717743320787888`*^9, 3.7717743864313097`*^9}, {3.77177829266096*^9, 
  3.771778329276515*^9}},ExpressionUUID->"6a432252-de6d-4458-805b-\
c0739c7c6535"]
}, Closed]],

Cell[CellGroupData[{

Cell["Identify Patterns and Apply Rules", "Section",
 CellChangeTimes->{{3.7713299722106657`*^9, 3.771329988589985*^9}, {
  3.7715277186269836`*^9, 3.771527722253913*^9}, {3.771626729154997*^9, 
  3.771626734154945*^9}},ExpressionUUID->"2cf047d2-8895-41dc-a660-\
ab4592342b09"],

Cell[CellGroupData[{

Cell["List of heuristic rules I use", "Subsection",
 CellChangeTimes->{{3.771773987807983*^9, 
  3.771774047801291*^9}},ExpressionUUID->"431874e1-f1c2-43ba-80f1-\
4841457b4950"],

Cell[TextData[StyleBox["The set of heuristic logic equivalence rules I used \
are:",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
  3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
  3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
  3.7716269406201468`*^9, 3.771626949020691*^9}, {3.771627231584917*^9, 
  3.771627332887401*^9}, {3.77162789638834*^9, 3.771627922432719*^9}, {
  3.771768440077969*^9, 3.771768445812234*^9}, {3.771769527934415*^9, 
  3.771769548265087*^9}, {3.771769605515828*^9, 3.771769631341228*^9}},
 TextAlignment->Left,ExpressionUUID->"130cc6ae-cfbd-4e84-8132-702952fcf306"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3Xt8FNX9/3Hvl1rrpdYrrYpttdVWv7aAbdUWQaOtCjZovyJtbAEFUQoI
fhuwWIJtiVQuioBiAA0ilxZUiIZQBBNu4VoJVxMkAYIJBgQEtL9/Pr+cgU12
Zs6Z3SS7ObvZ13l8n191mZmdOTt0z7z3XK78wx9//chJJ5xwwpNn1P6/X//+
/9oPGPD7zPRza//j/r5P9n60b88ed/Ud2PPRngNu+sPJtS+2Pu2EEx4/5YQT
av/vBKFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqF
QqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQ
KBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBQK
hUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqHEvOTOfAsA
AAAAAAC1EqXYrgcAAAAAAIBEkSjFdj0AAAAAAAAkikQp4ee0t+YAAAAAYAXt
UgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAA
gB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1
AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCA
LeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7t
UgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAA
gB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1
AHRWTR8qHTp1k64PxVanToOksML+9cVVZaF0bd1aWmuMKqq0f34xu87VMqRT
Z81n3FNmfVht//wAIAZol8Kuapk2sPa7Vdeuqv0OHjJ9ffTHqiiUJw3f23M3
1STAtQLwIq8B4Fcj0x5vq80bmq6z5LfwvGZX0UTj9Y9b2XLyml1rJhuvc8oa
8hoALQPtUlhVtVq6B7WrOo6U0iiPtWPxSMNx2sos8hogIZHXAPDbKEPaxiOr
aVi7IlmtmtTTcP3dpLDS/vnFyvrpfQ3X2VOWV9k/PwCIBdqlsGnPh7kR21ZT
Powuaykc3c1wjEGyPgGuFYAfeQ0An+350iEufWtaS4en8+1fX1wF9E3qOFZ2
WD+/2F3n3IG366+z08QWdJ0AUh3tUthUMntoxLZVp+zCKI5VLa88ZDhGj1zZ
lQDXCsCPvAaAV2mBqb9s0z05e6v164svc9+kDlmLEuD8YqVMhnVsSrsRAJID
7VLYND/L8NtIQ/vHVK2XPob9u760wvp1AtAjrwHgZe4v23TR9tlNWpUrjOPM
h+WV2T+/WKlYJJ1M11lQbv/8ACBGaJfCnnIZYfhtxCvSegZ7Ns2QNqZ9F7ec
ufWAloa8BoBbQH/Z1j0lf1u17KqolB2Nwhy0LcWOorGGe+R2mbvN/vkBQKzQ
LoU1lYXG30a82jw9L/BYW94yjatq+etAAMmMvAaAS9VqY39ZNS9Js4xvriyX
5YsXyazpM2TK9FyZMjVXZuWtkC0taK5eW/bU1m3JmtWSn5cvc2fPkVmOeTK/
oFBWbSqXPVEeZ/lLpjmVGzBnYVWlrF9ZWHseM+SVSZOdz3nK1BkyN+/YucT2
2mukdNP62uued/yaZ8i02usuXFMW9TWb7Nq+VQpr79f6+jxWp/lFq2VLRRP6
kzVr/QAwoV0KW3atNK83qftNLWiu//yszvr92j4rW6I4l1i1H6JXXfd+849b
tHKj7Ahaz6Dq2D6LCo7vU9DE70u+h5EAyGsAhNvzobm/bLznJdmzbbWMGxg8
FmvIpEVOm2DXysnSoXVb6dDx9jC1//14rn+u2+NjlNq0betW+9qT0zcGnFOl
vNKjbW1bxr9fp2zdXDTm7bvWbV8mozpptmnb1mlrLYrwG5f6fDoYrqWD6be1
qnLJnz5WuneKZo3226VP9mRZvi2oL1S1TOlh2L9HbsQ2267az/mVrJ7G+6xO
x24yavqiCHMXqzq/Xdq47oPa/669jlfWqKykRgpnj5VOQeudte0mrxQE3Qf6
OlieN1n6RFGnnR5/Vuavib5dF9v6AdBUtEthy6qppt9G9IYVmMZdl9e2PQz9
cgYG9MuJeftBHXOjDOnobb+p7+3OMmvTsXOd+9LQgHUvbpdh01e42hq7Nq2Q
cU8H1FXt9/yUoujHpPM9jERCXgMgnLm/bHznJSmcGnn9g7rn35cKZflUw1rS
D0329QHatWay+ZqC5pSpWm2ci0abXQVtPzq0fW2byTgWPdJYooC1p1rrx66X
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
UgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAA
gB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1
AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCA
LeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7t
UgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALeQ1AAAAgB7tUgCALYme1wAA
AAAAAKSyRCm26wEAAAAAACBRJEqxXQ8AAAAAAACJIlFK+Dl9+d//BwAAAFhB
uxQAYAt5DQAAAKBHuxQAYAt5DQAAAKBHuxQAYAt5DQAAAKBHuxQAYAt5DQAA
AKBHuxQAYAt5DQAAAKBHuxQAYAt5DQAAAKBHuxQAYAt5DQAAAKBHuxQAYAt5
DQAAAKBHuxQAYAt5DQAAAKBHuxQAYAt5DQAAAKBHuxQAYAt5DQAAAKBHuxQA
YAt5DQAAAKBHuxQAYAt5DQAAAKBHuxQAYAt5DQAAAKBHuxQAYAt5DQAAAKBH
uxQAYAt5DQAAAKBHuxQAYAt5DQAAAKBHuxQAYAt5DQAAAKBHuxQAYAt5DQAA
AKBHuxQAYAt5DQAAAKBHuxQAYAt5DaK1sniVdOx4u7Rvf1tM3XZbh6g9/vgT
cvjIUet1AQAAUgPtUgCALeQ1iNbQZ56RE044waozzjhDdpRXWK8LAACQGmiX
AgBsIa9BtA59flimv/mmvJ47rU7utDdcpr0xvc4b0990ufHGG53MpX//Ab4/
U0L7eY+phN5v8ZIPrNcDAABIHbRLAQC2kNcklx07yuXI0S+sn0dj3HnnXU5e
o7IZ2+cCAAAQDdqlAABbyGuSx5szZsgpp5wig4cMsX4ujUFeAwAAkg3tUgCA
LeQ1yaNtu3ZO3nHhhRdJzb791s+nochrAABAsqFdCgCwhbwmObz77nuueXfH
jn3B+jk1FHkNAABINrRLAQC2kNckh3vuucfJOq6++mrnn9dcc03SzWNDXgMA
AJIN7VIAgC3kNYlv7br1cvLJJztz12woKZGLLrrYyT1mzJxp/dwagrwGAAAk
G9qlAABbyGsSX/fuPZyco0uXLs5//3noUOe/f/7zX1g/t4YgrwEAAMmGdikA
wBbymsRWXl4hZ511lpNzLFnygfPazp275Mwzz5QTTzxRCouKrJ9jtBI1r3nn
nXnyas5ka2bOmiVffPlf6/UAAAD8aJcCAGxJtbzm4KHPpbBoqaxavUb27f8s
cNvDR47Kxk2b5IPCItm+/WMrz9RP//nPTsah1oYKfz3j4Yed17s+9JD1eyha
iZjXrFm7zsm9wudytmH2P/8Zl+s79PlhWbpsuawsXiWf1uwL3FbNh7Rp82ZZ
8kGhlJaWydEvvrT++QAAYBt5DQDAllTKa9Sz+Xe+8526Z2TVR+X+Bx6QDSUb
XduVbd8ujz3WRy666CLXM/UVV1whf/3b35zMpzk+m88OHJRLLrnEee/XXs91
/dnqNWudnOGMM86Q0rIy6/dRNBIxr1F13Lv3Y5KWlmaNytx2V+6J+bWVbNwk
1157bd39q+6Vzp071/49WOvarqJip/Tr108uu+wy1/3eqlUrZ+zd/s8OWP+c
AACwhbwGAGBLquQ1K1YWy3nnn+88h/7whz+sm7NX+da3viUf79jhbDd+wkQ5
77zznNcvuOAbctttHeT666935voNba9eq6reG/fPZsLEl+vO7/PDR3x/3rHj
7c6fD3rqKev3UTQSMa9pqf7z4Ya6e/z73/++K4tRr2/estXZbsrU15z7XL2u
/n60b99ebrzxRjnttNPqtv/JT38qu3dXWr8mAABsIK8BANiSCnmNGuehnkHV
s+fgIUOc19at/49rHMzvMjLq5vVVec2oUaOdvhehY6i85/LLL6/b/oHf/Cau
n4sae3XDDTc47/XsX/+q3Wbu3LnOn3/jGxdKzb791u+lSNLS7nTOd9ob062f
S0t3yy23OnXdt+8fnXtJjW9Sa4yF7t/09HT54x/7Of9+9tlny99HjHDdQ2pN
su9+97t12991113WrwkAABvIawAAtqRCXvPmjBnOM+dNP/mJ6/Vzzz3XN4+I
ymTUuCndccaMGVu3ncp68vMXxO1zmT8/r+5ZunLPJ9pt1Pwi11xzjbPdCy+8
YP1eioS8pnnk5R27d6677jrXnEtqfJP3fr/44oulaOky7XHUXMjh286aPdv6
tQEA0NzIawAAtqRCXvOLX7R3njfV82foNTUnx+mnn+56HlXjRLxz2YRTfxa+
/d133x23z0UdW71Hr169A7cbO/YFZzs1T0mizw9LXtM87r33XqeeVb4Yek31
MfPmk6ofmZp323Sc8oqdru1vvfXn1q8NAIDmRl4DALClpec1al0nNfeMWhN7
76c1da8vWFDgehZV28ybNz/wWN7nV5X3fFJVHfPPRI3VUmNXTjrppMD8SFFj
WL5+wQXO+fxrzhzr91MQ8pr4++STKmcebXU/q/s19Pqy5Stc967qH6b6nQUd
S62Ppu7B0D7q39XfJ9vXCABAcyKvAQDY0tLzmpdfmeQ8a6o+NuGvP/OXv7ie
X9X8NpGOpXIU73iSBQULY/6ZPPporwb13xk06Cln+9tvv8P6/RSEvCb+pr/5
plPHP/rxj12vP//8KNd9q9ZJi3Ss0rLtvvs90TNBAABijbwGAGBLS89rnnii
r/OcOXLkP1yvq3WUw59D1frdkY71zjvzfM+vM2fNiunnsWt3pXzta19zjp2X
925U+6j1x9V6Pqr/w8riVdbvKZNQXpM77Q3r59JSZQ4e7NTx0Geecb3epUsX
133b7be/jXisxUs+8N3vk17NsX6NAAA0J/IaAIAtLT2v2fNJlWzctMm1Hvah
zw/75vKIps+HWjMq3nlN1vDhznHVGuIN2e9/H3zQ2e/h3//e+j1lkoh5jZqP
d/z4CU5/K1v+8Y/nnXsyFtej1pkv2bjJdTx1jeHreStqrfhIx1LZjPd+D58D
CgCAVEBeAwCwpaXnNTrefgNqro+Knbsi7veH7t19z6/R9oGJhnrG/ta3vuUc
9+WXX2nQvoVFS539vvKVr0h5eYX1+0onEfOaDwqLfJ+pDdPeiF+dqLW5ve+3
adPmiPv169fft9+MmTOtf2YAADQn8hoAgC2pmNf87e9/dz2D/rhNm6j2U31e
vM+vG6N47o1WzuQpzjHVGsufHTjY4P1vvuUWZ/+n//xn6/eVTiLmNaqe/zx0
qPTs+Yg1AwcOcuaNjtc1jhv3kuuevfrqq6Pa72c33+y735evWGn9MwMAoDmR
1wAAbEnFvOaee+5xPYOq+Xoj7bNz125nzabw/dQYEzXWJFbn1bZdO+e4Q55+
ulH7vzH92Fyzl1xySaPynnhLxLwmFTzYtavrvn3kkUcj7qPyI7XOVPh+agxh
rMZtAQCQLMhrAAC2pFpec+ToF3XrX4e89fbbEfdT40C8fQ0yHn44ZueVf3x9
cTWeqSJsHeaGUOsvt27dOur5SZobeY0dl19+ueu+fe313Ij7qHF+3vv917/+
tfVrAQCguZHXAABsSbW8pmjpMtczqFpX6ZOq6oj7PfLII77n1/fey4/Zealn
4VjMFzwiO9s5zg033BDTvj+xQF7T/NTcw+H37IknnihlZdsj7vfkkwN99/us
2bOtXw8AAM2NvAYAYEuq5TUjR450PYP+6Mc/jriPWlvq0ksvde13009+ErNz
Us/Up556qvMsXbxqdZOOpbKn0NpX8+bNt35/hSOvaX6qn1VD565ROd93v/td
137XXXed0zfN9vUAANDcyGsAALakWl7TuXNn13PoY4/1ibjPP//1L18fhXff
fS9m5/T44084x+3Y8faYHO+JJ/o6x/vlL39p/f4KR17T/H77u9+57l3135H2
CY3Nc60LNWOG9WsBAMAG8hoAgC2plNeo/gEXXniR6zl08pSpEff71a9+5drn
oW7dYnZO4f1hVC4Ui2OqNavUGuUnnXSSs5az7XsshLym+V111VWue/eFF16M
uM//Pviga59OnTpZvw4AAGwhrwEA2JJKec2KlcW+fgNTpr4WuM+CgoVO7hHa
Xj3/Vu75JGbn9Nxzx8Znfe9735OjX3wZs+Ped999Ua8F1FzIa5rXps2bfff7
Cy+8ELjPsuUrnLF5oe3VOMDy8grr1wIAgC3kNQAAW1Iprxk1arTv+fUXv2hv
3L5i5y759re/Xbft2Wef7cxXHKvzUfnMNddc4xx7zJixMb3WBcfHtJxzzjmy
55PY5UtNEcprXs+dZv1cQtTcRH8ZNkz+0L27NQMHDpK9n9bE/NomvZrju9/V
fE2meaj3fFLlzFMT2vaMM86QgoKF1j8jAABsIq8BANiSSnlNl/vv9z2/Kuq5
1rut6kPzox/9qG4bNWZJrXEcy/N5++13nGOr9cU/rdkX88/2x23aOMcfOfIf
1u8zJRHzmqXLlmvvieYWjz5HKgvSvdfo0WN826r772c331y3zVlnnSWz//lP
658PAAC2kdcAAGxJlbxG9Sm47LLLXM+tagyS+qda07tLly6Sn7/AyWTUGKJL
Lrmkbrsf/OAHsnrN2pjXfWjM0qBBT8Xls301Z7Jz/GuvvTYh1vZOS0tLuLxG
1cvEl1+RrOHDrVH5iernE+trC/Xd8t7vam6je++911k/TPWf6dPncWnVqlXd
dmptqFj2IwMAIJmR1wAAbEmVvEblLeHPrmpOmrKy7dK9ew9jnwe1Tb9+/WXf
/s9iXu8ff7xDTj/9dMe2jz6Ky2d78NDn8s1vftO5FpVF2b7XHuza1TmXWK6t
Bb2PPip11jELv58/3FAiffv+0fd6iHq9Z89HpHrvp9bPHwCAREFeAwCwJVXy
GjU/TPizqeozE/qzWbNny8O//73ccsutkp6eLsOysuTtd96Rioqdcav38eMn
OOfxu4yMuH6+6lrU+6g1vm3fa2otrA8Ki6yfRyqYPHmK636/4oor6v5MjcNT
Y6VuvfXnzvr2Q595RubMnetkiLbPGwCARENeAwCwJVXyGu/cNb169bJa758d
OCjT3pguNfv2x/191LN7LNe0QuLzzl2j+jbZPicAAJIReQ0AwJZUyGvUHCXh
89EoU1973XrdA/Gi5qAJv99ffHGc9XMCACAZxS2vObJdcjIHS2bWcMmqldl/
sOQsrojtexwskayMdMnIyKhV+8+suXIgAerUhh2LJ0v/2jp26jpzgGTnLpPD
CXBeTXWgbKFz74SuKyunZVwXgGNSIa9ZsbLYN0+Hmt/Ddt0D8bBp82bfHDVr
1q6zfl4AACSjuOU1+1ZJeuvW0jrMHdkxnu/f+x5pE6QqAerUhuIx6a66bt1u
bIuoi5rise7rSmsZ1wXgmFTIa9R61uHPrldffbX1egfiRa13FX6/X3rppQmx
PhgAAMkobnnNwVWS4clr0sesiu97pE2QmgSo09g5KkW5z9X3UcocLgvKDmm3
XTs+w5NrmOoi+mMmgpp1E6K8LgDJKBXyGrV2cfjza8bDD1uvdyBeuj70kOt+
V3No2z4nAACSFXlNItsv49PcdTi6eK92W11eo++HEv0xEwF5DdCytfS85vPD
R+S88893Pb9OmPiy9XoH4kH1o2nVqpXrfn/uuZHWzwsAgGRFXpPI9ktOenTZ
yoYcT16TMc1QF9EfMxGQ1wAtW0vOayZMmCh33nmn69lV6devv8x96y15f/ES
5vVA0jtw8JAs+aBQXn5lknTq1Ml3vz/6aC9nvW51vxevWm39fAEASCbkNYms
YdnK4YNH5fCRWrVtJ/OcvOQ1ABJHS85rvM+tOl/72teY2wNJbUR2dlT3unLK
KafI/s8OWD9nAACSBXlNIotHtkJeAyBxpHpe0779bdY/A6ApunTpEnVe8+M2
bayfLwAAySTV85r6vihHrX8Wfkd92cr4dU2dGzgex4yfpuc1R52+2iGHj9i/
pqY6fHC/1OwLCepLBSS+lpzXrFv/H9m4abNs2/aRlG3/2FnDe/OWLVKycZMz
Dmr5ipWyb/9n1j8DoCl27totK4tX1d3vW7duc+730tIy3/2+99Ma6+cLAEAy
ScS85nD1dlkwc4Jk9s6QO9rdJOkZ6c4/70jvLdk5c2Vz5aG69/Cu5x3Ns3xN
2SrJyRpQe8zQvjdJO2cN7DTJ6D9cZhSsl6oonuurShZKbs40yc2d5vzz/S37
6/5sd8kSGV/7Hum15x1eB+3S0iUze7IUl5n7tGwumCU5tcecUVsH3jXR07Mm
1L4+69h75q2ve1avKV8vC/IWyoICJU/eX1fZ6GOWLJ7rbJsbMnNJAzKSQ1I0
N2zf3MkyZ+n2Rt9HjclrDldvlfm5Y6VXepp73+PuSM+Q7PGzZG3AZ6Byng3H
6yx0LTMKSgKzkQPly+rvh+P3RFF5cBZWs2VJ2D6TZcbircZrmjN+eO395L8e
df+mZwyQ8XOXyI6D8f3fCyDWWnJeAwAAADRFYuU1h+T98QO0z9he/XNqj3Wk
pGH9a45Uyoys9KiOr56Bs2euCnw+Lx7jzgPuGLO+9vXtMr73TVG9R3r2Qs3x
98votGjOT+VLY+vWgPKeS/ifNfSYM/v7X59RFmX/o8o8377tspY0+j5qUF6z
b7vkZmVEd52hc8sYLkXlums7JLnp3u0Hy44G3A/H7onge35Bpude6T3Xdx5F
OYMbcE03yfjFjc/HgOZGXgMAAADoJU5es19m9I8u56g7Xv/ex/rFRPMsX7lM
ejXg2HXP8/1nGY/pXUP7jv7DpX+0uchxvWaW+OphvC8nMEivv17fet7p4XXR
sGNWlkz2vZ6Rsz6qz33zzN7+rGdL48dbRZ3XHNkqmY34fI9Jl/cr/ccsnevN
SdJkvma7Y/bq69i4rrpSIVme/jLZi8P7RR2SOQ38OxGSVVBh/X9bgGiQ1wAA
AAB6iZLXFHvzhvDMJC1d0tPT3dmMjulZvnKJbwxQ/T4Z0r//AOmVoR874+Qw
Wbp+MO6MpO7cfONV1DiuoHNPl6Lq8OPul9yMKJ/L0wLymjR3XtOwY/pzhNbt
npPdET93TS6UNjaK/cyizWvWetczD30u6QNk9PjJkpszQbKd8WmG607X5CqV
C32fmzEH2bfKcI/Vfr77DNdXnuc5vnvb0jx9v5o7MkLXNFmyM3sb7q00bQYF
JBryGgAAAEAvEfKaA1um6Z+1+0+QDZXhfTP2y9q8sebsQ/ssv1fG6/q8pA2W
97d45i85uFeK5+qPr3tO92Yk7cKygDtqz31t+d6wnOeo7Fg311cnSmae99jH
1uX+8r+VvnFM2Usr6/48fO7c4Lym4cf0Ha/1TTIn0pgoTb7RK9fbf6hhospr
DpZo+k6ly4xifbayuyRPu32xL1eplGxPXbXLWqg/z2LPeYYxrb+1w5vHpE8O
uzZNZpY2XIorNX2VDlbK/Gx/XnVHE8ahAc2FvAYAAADQs5/XHJIZvf3PuL1y
zH1xDpcv0eYeumf5qsXPaXIg8xgn5UDJrKiO7c80jp/7+GXmc9/iP3a7/nmG
eXJ0a2/v1x43cl7TsGMeLpvrO8+MnODsZfNM79xDabKgiX08oslrfNuocUvl
wcc9XOb/HHTjtorHeOY7MvQzKh5vnhdJf98flfmesU6ubKt6idzhvaYIdenr
YxQ4FgtIDOQ1AAAAgJ71vEbTJ8PUhyHcgRJNnxzfs7xmfE674YFzxoZEkz3o
8pp2mXkRjn3Un0+ljTU8V+uyFX1fjablNbpj7vXPUWw8T0Ndu/qLNE5UeU3x
WM/7TpMDEY/tn29GVw8H1nnn8tFlUOHXXp/BtAs7Z3+9+efbCZ/T2d9fJ0PW
Rlr7yTfXc5p5LBaQIMhrAAAAAD3beY1/3pFo+2Qc8s/J4nmWP1w+15cFHRv7
E835r/edf1aBe1/dmKH52rWG3DZo+kE0LVuJR16jy6xukjmm66tc6OkPohvn
1XDR5DUHyhZKZu8Bkpk5WPr37y3Zc/VrYnvrwTtOTlsPR/xjrbIWe+6hfe57
vV3GAMlwjWXyz2Hj79/jzhH9fYZUn7NIcz7vlw3Fq2TtuvWO4uKSqNalB2wi
rwEAAAD07OY1/mfm1r1nRdE34pjdBcMDn+V984O07i0bon5+PeTLNbxrM+sy
kmjGn0S/RrXdvMY/Jqe1ZBjmo/FnO7r5YBquQet5N8AG39pPpno46luj6Y7s
JYHnmJm3XhZkpQUe21tfvrlm9i3Tzl+cnjlBissMnxeQhMhrAAAAAD27eY1/
TEr6+OjWjVZ88xR7nuXX+uYU6S3vb9kum0tKZEMEm8tKZHyG99xSLK/R9mHS
jYnyH7N1/7mGOXkapvF5zVGpqa6s/azXS9HihTIjd7JkZw2WXhnpcodhjaio
5wX2rHnlrfsZ5f9Pdnv2cd/7/jmbRi/1vneFb65jl3Zp0j9rrMwoWCallXtj
UteADeQ1AAAAgJ7VvEazBrI5O9C9h2fMUmPXsI6WZz4W73O6t9+FSfLkNZo+
TLoxX5qxUNm+/KFxGpbXHJINBdMks3cUa783IK/xX1+avF+3Bru3PgfIZvW6
d63u8CzPN8YqQ98XSVOvgflN9gR5f932qPunAYmAvAYAAADQs5rXaLbxzQ3S
kPfw5DW++W+bytN/xpuRmNYr90qmvEY3j493je5S31iohow7i01dHShbIv0N
/WaanNdo5l6uy6O892DvUL8i73rc9XPY+ObKzjDPj3y4cpVkZdzUwGtJl/F5
TVtHHWgu5DUAAACAXuLlNQ3pXxOc1/jG6DRVhP41LTKvUetOZ97kO3ZVwPGi
Wd8rWtHNN+yfV1rvJknP6C3ZY6ZJUckq33ijoHrw96Vapj2//nO31+1jmsNm
Q05vd/41M/L8yLu3LJOc7MHGsVw63vF7QCIirwEAAAD0Em48VEPG0VR75mSN
2L9mgGyo3iu7KysbpWqfexxQauQ1urWlb5L5oTW8qv1jdnLW7Y/ZfRS5riqN
87z0ypogC5aul9Jy9dkd8hzbP590UD0cKPGs65021jmPDa56v8m1Jrd3LNmx
+8M7J1DAmltaR6WqcrsUFcyS7MzeEfOb3C3e6wYSC3kNAAAAoGd3vmHvmJHo
Mw8l0rN88RjPfMOe/jFNlSp5zZdHtkp/bxZyvE9I6VzvWCj3utRNFamufDmK
s81zsjni2lT+ey+wHnx1kC5rD3rnSBospeH7eLMsdf8dKXH/vWj3nGvu4sao
Ki+ROTnDtXPdeNc0AxINeQ0AAACgZ309b28fGO36Q3rFETKKDbm9Pc+v9XOI
RKO0eKHMz8urs6EyNfvXKEXZ/uzrwH+P+o4V6zE4kerKv454miyojOLYBxs6
1/VRme9Z13t8QZ47w/GtieXt+9Nb5he4ryc0rir43lsipQejuaYSyfRkUNHO
gQ3YQl4DAAAA6NnNazRzo9QKH1Nitl0yff0qIve9CJ9fJNAR/zy73rmQUymv
8a2d3jpdFqxb6Kmjm2ROVJ9d9CLVlX/N9uFR9VepWjrWd29Eqgf/WlmR7y1f
zuUxvlg3dmyvjPbkLtGut+Wrjwbkn4AN5DUAAACAnt28RrNWjtJ7VsQ1if39
KnQZhSbT8Y5ZMfD13XGt4XxMKuU1Tl+RSHPdetbPioUGj3mLZnzRkRLNfRFF
PVQvqR9z5KsL/Tw0VcX1uVA73769Za2238whmePpyxPtvWWaFxlIVOQ1AAAA
gJ7tvEb1JRivmS+2V475+bS04DljXuDNKDbP9I6JUnnQ5MBn+uJcTRbkG+ti
J68xvUdT8ppoz3tDjjfDity/pKki1dUOTZ+XrIIK8zGr10uWYX7i8RHnSd7r
Hr/XLjxTMeSA+9xzYrcLz3l6z/LdU+a6TpM5keYOrlzi+zuXkcO63khs5DUA
AACAnv28RvNMHuob0HusvL9uu9QcPNZv4UD1dpmTHZAZaDMKXR8b9azdW+YU
b5cDR45vd+SQ7ChZItkZ/vFZur41io28RvXjyMqZK+8vXigLlm43nkssjulT
nhewbnbD5gaKVqS6Ouwbp3U8Oxq/UHYcXxPq8MH9tZ/tMsnJ0mR34fvMXC8H
aretOWI+n7WGzKpdZp5hH906ZVHkW56cJyR75hLZUe3ObQ7sq5SiuWM18w1H
OZcPYBF5DQAAAKCXCHmN4h9/FL26DMGQURwom6tdO6e+z4Muowl7Rjb014h/
XqPJYVyZU/3cJNHnNdEf08+cPej6H8VC5LryzwPcZAF155/H55jMPHOfHn19
R85Sgj+nmyQ9PV3uCLh3M3LWN+v/lgCNQV4DAAAA6MUzr/H2D4iUZxTnBPd/
cLtJcgrmSi/Pc7YpazhcvsS9bZRGF5j7QMQyrzFmJOV55vNLr88VdHlNU4+p
41+/+3g9RTkfbkNFVVcHS3zrjUe8d4r3StVSw7i6wDrwr22ujjdfM3dN/TXo
1hwfG8W8yHslt3fjsqg7MufGdO16IF7Ia9BcZs2eLT169JRPa/ZZPxcAAIBo
xC+v8a+v1CuKuTR2LJ2mHQfiftYdIPOduTw8z84Zk4OfUY9Uypwx0WVCd/R+
TorKg+cL8a4XnjE+uv4Mvuf3COe9Y/EE/TiksH4gvrXLI8zZHM0xtbTjdKKb
w7kx/HU1TX9+RyokNzN4LSbnM8qaJhuqQ9nKfpmTmebfLrCP0f+TBVmefdo9
Jzsi/F3wZoXRr3t+VIpzg9elcsuQ3MWxn0cIiBfyGjSXO+5IkxNOOEFez51m
/VwAAACikZjt0v2ytmCWZGcOkF69ex/Tf7CMzpklxVsqm3z8w9Xb5f2ZkyXL
dfwBkpU9QWbkLZHNlZHmnbXg4F4p3bJVNqxbL2tLSmRzWYVUHWzi2tmNOuZ2
/zi3KHOq5lBTvl7m5IyVzNrPs7+SOViyxkyQ+YvXy27D/DqlxUtkztw8mZ+3
UN5fut43P0xCOFgpRXnTJDtrsHNdvTIyJCM9XdLT0iQ9PUMys2qvsXhrxHXV
gERDXoPmQl4DAACSDe1SNIR//XXmtAXQeOQ19lTs3NUs71NaWmb9WpW0NPIa
AACQXFKlXYpYOCrzMz3zqcRpnmEAqYG8xo7Z//ynnHzyyTJmzNi4vs/bb78t
p556qowaNdr6NYfymtxpb1g/FwAAgGikQrsUMVK9xLfOVk5JAo4dApA0yGvs
WLV6jZx44oly/te/LtV7P43b+9x4441ORjL1tdetXzN5DQAASDap0C5F4xze
t1dqjhz/7yMVkuNdqyg9wvzOABABeY09N998s5NfPP/8qLgc/91333OOf+GF
F8lnBw5av17yGgAAkGxSpV2Khtov49OOr5WVnq5dS2r8ugSclxlAUiGvsWfS
qzlOfnH11VfLkaNfxPz49957r3N8NUe67WtVyGsAAECySZV2KRpqv+SkB6wb
nT6ZtYgANBl5jT2qz8tFF13sZBizZs+O6bE/3FDizI+jbCgpsX6tSlraneQ1
AAAgqaRKuxQNtV/GG/OaDHm/solriQPAf8lrbBv01FNOhtG+/W0xPe5jj/Vx
jvvLX/7S+jWGkNcAAIBkk0rtUjTEIZmTme7KadqlZUjW+LlSus/2uQFoKchr
7PqotFROP/10Z+7h5StWxuSYez6pknPOOcfJRua+lTh1mKh5zTvvzJNXcyZb
M3PWLPniy/9arwcAAOCXSu1SAEBiSbW85uChz6WwaKmzPtO+/Z8Fbnv4yFHZ
uGmTfFBYJNu3fxy3Z+r/ffBBJ8f47e9+F5Pj/e3vf3eOd9111yVUDpCIec2a
teucrEydl01qffd4XN+hzw/L0mXLZWXxKvm0Zl/gtmoOpU2bN8uSDwqltLRM
jn7xpfXPBwAA28hrAAC2pFJeo57Nv/Od79Q9I5955ply/wMPyIaSja7tyrZv
d8YTXXTRRa5n6iuuuEL++re/OZlPLM+rsKjIyQzU+Xz88Y4mHevzw0ec81Tn
++KL46zfX+ESMa9Rcwj17v2YMxeyLV0fekh2V+6J+bWVbNwk1157bd39e8YZ
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
stV57cDBQ3XXkZs7zfo9FC3ymuZ31VVXue7dF154MeI+//vgg659OnXqZP06
AACwhbwGAGBLKuU1K1YW+/oNTJn6WuA+CwoWykknnVS3vXr+VeOUmvMzuvfe
e5337tv3j85/Tzw+xkWdixqrZfseihZ5TfPatHmz735/4YUXAvdZtnyFnHrq
qXXbq3GA5eUV1q8FAABbyGsAALakUl4zatRo3/OrWg/btH3Fzl3y7W9/u27b
s88+25mvuLk/IzWvsXp/NZdNVfVeZy4R9d8jR/7D+v3TEImY16i86y/Dhskf
une3ZuDAQbL305qYX9ukV3N897uar8m0Bv2eT6rq7i1FzY9UULDQ+mcEAIBN
5DUAAFtSKa/pcv/9vudXRT3XerdVfWh+9KMf1W1z7rnnOmsc2/qc2rRt65zH
3Xff7fzz/K9/3clubN8/DZGIec3SZcu190Rzy532RsyvTWVBuvcaPXqMb9tP
a/Y5cyGFtjnrrLNk9j//af3zAQDANvIaAIAtqZLXqD4Fl112meu59Xvf+57z
T7Wmd5cuXSQ/f4GTyTzyyKNyySWX1G33gx/8QFavWWv1c1Lz7ISfu+qT0dzn
oLKNW265VX76s5/5qGf9SFTGFKr3aLZXvO/Ts+cjcvjI0ZjeFxNffkWyhg+3
RuUn8RjXds0112jvdzUfkhpjN2/efKf/TJ8+j0urVq3qtlNrQ9noRwYAQCIi
rwEA2JIqeY3KW8KfXdWcNGVl26V79x7GPg9qm379+su+/Z9Z/5wOfX5Yrrzy
Sue8zjzzTCktK2v2cxiRnW29H4rq96HGqdn+PBLdRx+VOuuYhdedmrtazYHk
fT1Eva7ysOq9n1o/fwAAEgV5DQDAllTJa8aMGet6NlV9ZkJ/Nmv2bHn49793
+o6kp6fLsKwsefudd6SiYqf1zydcKC/JePhhK++v+rXMmTtXZs6aFTOq7hti
+YqV1j+HZDB58hTX/X7FFVfU/dnbb7/jjJW69dafO+vbD33mGedz/fjjHdbP
GwCARENeAwCwJVXyGu/cNb169bJe9w118NDnTsaRbPPWoPl55655sGtX6+cE
AEAyIq8BANiSCnmNmqMkfD4aZeprr1uveyBe1Bw04ff7iy+Os35OAAAkI/Ia
AIAtqZDXrFhZ7JunQ83vYbvugXjYtHmzb46aNWvXWT8vAACSEXkNAMCWVMhr
Ro78h+vZ9eqrr7Ze70C8qPWuwu/3Sy+91OljZvu8AABIRuQ1AABbUiGvUWsX
hz+/2pqvF2gOXR96yHW/qzm0bZ8TAADJirwGAGBLS89rPj98RM47/3zX8+uE
iS9br3cgHlQ/mlatWrnu9+eeG2n9vAAASFbkNQAAW1pyXjNhwkS58847Xc+u
Sr9+/WXuW2/J+4uXMK8Hkt6Bg4dkyQeF8vIrk6RTp06++/3RR3s563Wr+714
1Wrr5wsAQDIhrwEA2NKS8xrvc6vO1772Neb2QFIbkZ0d1b2unHLKKbL/swPW
zxkAgGRBXgMAsCXV85r27W+z/hkATdGlS5eo85oft2lj/XwBAEgm5DUAAFta
cl6zbv1/ZOOmzbJt20dStv1jZw3vzVu2SMnGTc44qOUrVsq+/Z9Z/wyApti5
a7esLF5Vd79v3brNud9LS8t89/veT2usny8AAMmEvAYAYEtLzmsAAACApqBd
CgCwhbwGAAAA0KNdCgCwhbwGAAAA0KNdCgCwhbwGAAAA0KNdCgCwhbwGAAAA
0KNdCgCwhbwGAAAA0KNdCgCwhbwGAAAA0KNdCgCwhbwGAAAA0KNdCgCwhbwG
AAAA0KNdCgCwhbwGAAAA0KNdCgCwhbwGAAAA0KNdCgCwhbwGAAAA0KNdCgCw
hbwGAAAA0KNdCgCwhbwGAAAA0KNdCgCwhbwGAAAA0KNdCgCwhbwGAAAA0KNd
CgCwJdHzGgAAAAAAgFSWKMV2PQAAAAAAACSKRCm26wEAAAAAACBRJEoJPyfb
48UAAACQumiXAgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiX
AgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiXAgBsIa8BAAAA
9GiXAgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiXAgBsIa8B
AAAA9GiXAgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiXAgBs
Ia8BAAAA9GiXAgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiX
AgBsIa8BAAAA9GiXAgBsIa8BAAAA9GiXAgBsIa9BtHZX7pFOnTpJ+/a3xdRt
t3WIWo8ePeXQ54et10Ui27f/M7n/gQesfk7dfvtb5zxs1wUAAE1FuxQAYAt5
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
z1m/lyIhr0kO5DUAANQjrwEA2JKKec0jjzzqyl3UGt2R9tm1u1JOO+00134/
//kv4vrZfPzxDjnzzDOd/j/Fq1b7/nze/GPzEp977rnySVW19XspklBeM/zZ
Z62fC8zIawAAqEdeAwCwJRXzmh/84AfuuWsmTIy4T2g+mXAzZ82K++fzu4wM
Y6Z0112/dP7siSf6Wr+PotGrV2/ymiRAXgMAQD3yGgCALamW13y8o9wZxxSe
u6xZuy7ifqovTfg+N998S7PMEbts+Qqnf43qZ1NRsbPu9Q0lJc51nHLKKXEd
kxVL5DXJgbwGAIB65DUAAFtSLa+Z9sZ0V+6i1laKlLusWr3GlfGcccYZsrJ4
VbN9Ru3b3+a875+HDq17LTSm67777rN+D0WLvCY5kNcAAFCPvAYAYEuq5TWP
PdbHlddcdNHFEddV6tSpk2uf5p4vd8bMmc77XnzxJXLw0Oey55Mq+epXv+q8
lr+gwPo9FC3ymuRAXgMAQD3yGgCALamW19x4442+eWhez801bv/CCy+6tv31
r38tR7/4slk/oyNHv3DWsFLv/+qrOU5epP693U03Wb9/GiIR85oDBw/JkKef
lj90727NiOzsZr+ngpDXAABQj7wGAGBLKuU1lXs+ceZ78eY1V155pfNnvrrJ
neZaE+pXv/qV7Nv/mZXPafToMc453HDDDfLNb37T+ffXXjfnTIkoEfOaBQUL
ffeDDZs2b7ZeFyGhvObJJwdaPxcAAGwjrwEA2JJKec2s2bNdz8hfv+ACufDC
i5x/b9WqlTzzl784cw+PG/eSdOjQUU499VTnz04++WQZOGiQHPr8sLXP6dOa
fXLBBd+oO/fWrVvL54ePWL9/GiIR8xrVr+Wll8ZL1vDh1ryeO816PYT7vz/9
ibwGAIDjyGsAALakUl7Tr19/V17TpUsXJ5+56qqrjP0eVN+b997Lt/45KYOe
eqruvJ57bqT182mowUOGOOc+Por102HPyJEjnc/p7yNGWD8XAABsI68BANiS
SnlNm7ZtXVnM88+Pcl6v3vups/aSWmvplltulUcf7SXjx0+Q5StWOvP72v6M
QrZv/9hZ11v1C1LnbPt8GuqzAwfl34veb5Z10NF4qh9ZwcJ/O/Mm2T4XAABs
I68BANiSKnmNmp8mNL4pROUxtuu/oZZ8UOisL277PAAAAFIBeQ0AwJZUyWu8
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
huH5SHZbxyM17p97TFNJcDyM834UVO7MPZ3rcQ/WsNnWONf+2f7I8wr72lZK
sX9SnNfik9Lq+MZcITHIawAAAAC99Mhr2qTE1a+cIk3BuqCa8RPx9sddawsn
KP/I1Lxmm3ada51J4vMXSMnMuVLXuNI1X8XU+JpEPx/pltck//7pxhyt0J5f
Ydj6Z5Fq2Kwts9eLzp8fuz7yluYVUlZSFHEul46XDBaJRV4DAAAA6KVFXtOi
6VsWVg7ORepxr0ez6/Nd3LVpyGuC3GuOh/rRxXNk8fIGWd/SJu1dvY5j93rO
YBI7vib5z0d65TXDcf/UmJhyV5up81hra6tJtjW5t9RM1bRjr1T47RnSQg9r
bw3ql/a2jVJXs0BKAgUx85uKZud1I5nIawAAAAC9dMhr6ma650IV17RG/bxC
D79/D9/f3h/U16Yhr9nB1Q+3tpkmTbp6IjbO+S7DVW84+c9HOuU1w3P/Bmxf
J4W2z/HJqh5nWxbJ+vB9Ohz1Z9Q6XNsb7fOncqbZahcPRXtLoywsm6qtdZPr
8d4hMchrAAAAAL1Uz2u2NS/QzNvwD/T77J9X6vy8KPUtXDTrAOv6bOQ1O7hq
uUzMk8VtHtq5J555SYnNa5L9fKRTXjM890/plyrHut6lNdX2DCd8nJzFOfan
QKpq7NcTnFfltL6+Vqqqq3daJut7vFxTowQcGZTXWtFIDPIaAAAAQC+l85qO
Fa46sYq/zL0mdl1J3tD6oP/VrD08MayWcRjymuBxneOdpnoa7xB1jS8P7TD0
vCb5z0c65TXDc/92cM5vcgqvXTN4r9zj6WyZT71uLttWmeHIXUpc631H+o46
axO550IiechrAAAAAL1hy2t88fVDO5trtVmNrc5wGNf6MRPVnJVaD5+10TXH
I9J8C/KaHeqd89O8zE/Z3igBzf0crrwm2c9HOuU1w3P/dupYNjjnyFU3Rl+H
pr1+MBfKce1b4BhbF9QrCx1jebzeg0h1kTE8yGsAAAAAvWHLawb6hJu3/5/0
9fTKNqft/dZ/29taZdXyWikN+F39wsHfrXvv3yuB+dHW6O13rUcT6Xf+CnnN
Dps1Yybs9YQcOhqkOEJ928h1f721g9e2SPbzkU55zfDcv6Ct9rloOeGZiqN2
TZBj/llOeM5TsMBVVypobZnz3408WRirdnDbMlcu7C9jXe/hRF4DAAAA6A1b
XpMA/rLofeBtqzV1VFXfOVAu9c2tVi6ktuvb3i3rV9dKiX+SZvsIfcj/ktcE
/76v2T1WxcoxSmtl8841hfp6umVz4wopKy7QbhvaZ36DbBvYttM1Zkr3DE2S
4rJKWbK0VhYv3xhXWyT7+UinvGZ47l9Y27hylJ05TKA64nfAVW8o+HkRslSL
ps6QUjJ/mWzusOc227rapK5ylqbesPd5ckgM8hoAAABAL13ymvwyb3MU6p19
97hMkoUbIv8+nrwmyF1Hdpd5OH+bnMEaI17zmmQ+H+mU1wzX/QvaFiEfClRH
HtOjv/exs5Toz8wk8fl8kpsT+dp1tbGQXOQ1AAAAgF6y8ppIvx+PV27BNKnb
EGvOhd2q+e76sF764hUx5nYMV17jbDuveY2zRmoiMwRX/dWeRsdazbHbt6x+
q7Qvn6b/e119o5bqyMcL295LWyT7+UhqW8cpZe5fiHNd7x3Hq9LUrhm8Bt2a
47M81EXeKhUFQ8uicgOVu5yVIX7kNRguS5e9IpdfcYW0tkaZ/wnjVr75llxy
6aXy3n/WGz8XAABMS1ZeU+EfYkajfgfunyIzKqqlqS2+nCacqldcGKHmhquf
VjhLVnVE7jsGra2wzw3xl8b+XbxzLkjs39+72063j/NcVF0P5/rUQzlfq+2c
fWV/ub4fu71VKgLR1/KxPrd4rqwNtW+3LAy4a8KEj5cJt3npHM167hNt4zm8
tEWyn4+kt3U8z77rmHON3b8gVx0gVc8q2nX0NEi+4zN8pd4yMDV+qL4i+rpU
dn6pWBplnhWSirwGw+X66/Nlt912k6l/+IPxc0Fkt99xh3WffvOb3xo/FwAA
TMvs99J+qw5JaUmR+P0+8fn9kl9QMGCKFJfMkYU1K2Wzh5wG0XW2NMjCslkS
KJwihUqgSIpnzpGqpQ2ypUu/z/r6ZbKwslqqqmtlyfIGV30Rm56tsr55naxd
3SCrGhulaUOrtPck4r7xfAzL/TOlp03qqudKSXGRdV35A/fX7xu4z3l54vP5
JVA8cI3162Jme0gu8hoMl/z8AvKaNEBeAwDAIN5LAQCmkNekl60fd8pH7R3G
z2MoyGvSA3kNAACDeC8FAJhCXpM+Pu7ski9/+cty7LHHyvb+z4yfT7zIa9JD
MK/57W9vNX4uAACYxnspAMAU8pr0MWPGTKsfrTz19NPGzyde5DXpgbwGAIBB
vJcCAEwhr0kPajzN//zP/4TymrPOOsv4OcWLvCY9kNcAADCI91IAgCnkNelh
7lNPWX3oCRMmyEEHHWT9+d9Llho/r3iQ16SHOwIB8hoAAHbivRQAYAp5TXpQ
42lUH/qee++VG2640frzxT/9qfHzigd5TXogrwEAYBDvpQAAU8hrUp8aR6P6
z/vtt59s2dIm77zbJHvssYeMHDlS3m1qNn5+XpHXpAfyGgAABvFeCgAwhbwm
9alxNKr/fNXVV4d+dsEFF1g/u+WWW4yfn1fBvOYP991n/FzCLayslMfLyo2p
rf2X8TYIR14DAMAg3ksBAKZkY17T+v4HUvuvf0vzunXy2ef/jbpte3uHLF/x
mry1arW1nvZw35+m5nXWOJoRI0bI6oY1oZ+//PJiq0896tBDpb1jq/HnyItU
zGteebUuVMPZlL322kvWr99gvC2CyGsAABhEXgMAMCXb8ppp0x6w+sfBvvJR
Rx0lxVOnSt/2ftt28xcskMmTz5E999wztK3KTc4//3x57fU3hu3+3HJLofXZ
ubl5rr876aSTrL978MHpxp8jLwoKfp1yeU1X9ydy7bXXSV5enjGFhVPk077t
xtsiiLwGAIBB5DUAAFOyKa8J9kP33XdfyZk0yZbb/O//3mRt09r6vvzkJz+x
fqbGtKhM5HvfO1fGjTsstO0+++wjT1ZUJP3eqHEzavyM+sznnn/e9fd//etj
1t+pdb7Vet+mn6VYUjGvgRt5DQAAg8hrAACmZEtes2zZK7L77rvLYYeNt+Y3
qZ/ddNPNtnkpf3/iSTnyyCOtP3/729+xjaPp/+xzufW222xjbVa89npS7830
6Q9Zn3Xcccdp521t6+mV8eMnWNvMmz/f+LMUC3lNeiCvAQBgEHkNAMCUbMlr
gvV5H374kdDP/vrY49p6IldffY1rfpSixrBMnDgxtN13v3t20u6L+qxjjz3W
+pzZs/8ccbs7f/c7axs1d8v0sxQLeU16COY1t956m/FzAQDANPIaAIAp2ZDX
rG18x1r/evSYMVa9kuDPg+NXwv3yV7+KWoNYrdEUvv3SZa8k5b6o+jnq+M5z
dmppabXmZ6m5W8ke77OryGvSA3kNAACDyGsAAKZkQ14z9Q9/sPqfv/D7bT+/
7PLLbdnLN08/XT7Z1hP1WKo2bPg+U6b8Jin35Zxzvue5z6yuS3d9qYa8Jj0E
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
uAsrK62s5oADDpD3P9hi/DoBAADSVba8lwIAUg95jVmqFrDKVvy//GXCjpmb
m2cd8+qrrzF+fcNp1qzZ8q0zzjAqP79A+rb3G28LAACQGNn0XgoASC3Zkteo
PvSTFXPll7/6ldz5u99ZY1BaW9/XbtvesVVeePFFa7vrr8+X0tI5suK11+XT
vu0Jb/+XX15sZStq3e3Nm1t2+XhvvrVKdt99d4v6czKemTVvr7XWnrr22uus
tlFjg3Rto+oov7Vq9cA2pXLdddfL3ffcI5XPPSet73+QlPM648wzrbY0SY1p
+mBLW1Kur275Crnpppvlxhv/V8rK/yZvr23U1qru/bRPlq94TaZPf0iuueZa
+eOf/iSLFr0kH7V3JOW8AADIZOQ1AABTsiGv2fpxp1xwwQWuvvXee+8tzzzz
TGi7zq5uKbrzTtl///21ffFTTjlFXnv9jYTfg5xJk6zjFxUV7fKxfnXVVdax
fvCDHyTleXn6H/+QAw880NU23//+9+WTbT2h7Wpq/yWnnXaath1VNnX33Xcn
PP/auGmTdX4mvf5GfVLa/YEHHpS99trL1ZYqMwvPbNQ5HH300dp2HzVqlJTO
eTQp5wcAQKYirwEAmJINec1FF11k9VdPPvlka8zBad/4RqgPu99++8nqhjXW
WBS1trb62YQJE+S3v71V/v7EkxIoKrJyGlVjJjh+4t9Llib0Hvzt709Yxz7s
sPHS/cm2IR9HjRdS16OO9cILLyb8Wan9179l5MiRVhuoMR633nqbVX8nPDtQ
45hU2wXH+Kjc6M9/flgeffQv4vP55OCDDw5tf9nll1u1kU1/B1Ld42XlVnuN
GTvWGvOlxoiF5zD3l5RYmeQVV14ZyiFV2z76l7/KzJmzrCxNZWTB7dXYKNPX
BABAuiCvAQCYkul5zTPPPmv1Ub/+9a9b80TUz9TckPD+rqo7osYeqD///Be/
0M4bUWs4Bbc/5phjdilXcVLndeSRR1rHVvOLhnqc3/3+99YxTjrppITnIOp4
Ku9Sx3+yoiL0c9V2wXbZY489QrVzvvSlL1nt7DxOVVW1re0fe7zM+Hcglal1
38eOHWe17YrXXgvdC5XtBdtw9JgxcnpOjvXnE044QVu7evbs2bb7lOjMEQCA
TEVeAwAwJdPzmsmTz7H6qGqsQfBnajyNbr7IbbffHvE4Tz39tG3badMeSOh9
+MN991nHPfHEE4eUtai5SOPH7+jDJ2POi6o7o46t1gkPP7+f/OQnrnZUeVZT
87qIx/rqV78a2vaoo46SbT29xr8HqUqNB1PtpObzhf9cZXLOdlfZWduHH2mP
o3Kfgw46KLTtd77zXePXBgBAOiCvAQCYksl5jap1q+YxjTr0UOnq/iT08+B6
1+FiraWkaruGb6/mTiXyPqh+dnCu0AsvvBD3/mq+kdr3C1/4gq2OTKIE17Eq
KZlm+3lwzE3QoaNHS+M770Y91sUXX2zbR2Vhpr8HqUqNl1Ft9M+wOkuq7s8h
hxziysgiZTVBp556qm2fRK4hDwBApiKvAQCYksl5zT333mv1Sy/+6U9tP1d1
V8L7rccdd1zMjGNt4zuujEf9LJH34oYbbrSOe/753497XzUuR+2r5kQl+hlR
tVFUzRp1/HfeHcxi1DpI4fVrFFWLJ9bx1P0I30etYWT6e5CKVq1usNpH1XcO
fz6XvfKq61l85dW6mMc71VH/Wa0bZfoaAQBIdeQ1AABTMjmvOffc86x+qap3
G/7zM886y9ZvLSj4dcxjqVq7zj7yswsXJvReqPxH5R+qTq8aG+R1v6rqHTVh
1LpWLS2tCX9GVO3i4BiO8J/PX7DA1h5q/aIPP2qPeTw1Fyd8v+9+92zj34NU
pGoFq/bJy8uz/fxP999va7/DDz/c0/FUTaHw/dRaYqavEQCAVEdeAwAwJZPz
mksvu0zOPnuyvP/BltDPVB2P8LVylIq5T8U8VnCNnnj3i9f/+3//b8f8rGui
z88Kp9ZgUvtcddXVSXlGVO2ab55+usyaNdv281tuKbS1xze++U1PxzviiCNs
+6ljm/4epKKHH37EWut9wT//afv5j3/8Y1v7XXLppTGP1bH1Y6vOcPh+6vth
+hoBAEh15DUAAFMyOa/RefHFKlufVfVhN3sYk3Lbbbe78pp58+cn/Pxefnmx
dWy1Lvf7738Qc/uGNW+H1s5e+eZbw/rsBNckCiosnBJzH1VjRZ2rs05uIs5H
1YBW88JM8vv91prmyWrz7f2fWetFhbefc/yYzqt1da7n98qf/WxYnxcAANIR
eQ0AwJRsy2sCRUW2Puspp5ziab/gOtXhamr/lZR7osabqOPfdffdMbe95tpr
d9a8OX9Yn5uP2ttl5MiRtvZQ43Bi7VddvcjVjj/60Y8Sck7OeVYmqHXhP/wo
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
v95mwj4jb460p0CbAiZ01s+yr+2aN4vvA1Jepuc1v7/rLltf9/jjjzfe5umo
Y+vHofq2QfMXLDB+XplOzSlz1qZ5861Vxs8LAIBskbS8pmel+B15jW/myuR+
Rt4c6UyBNkW8+qWuYtrgWKzAVFm8IRNrDiT3OjtXz3HkNXwfkPoyPa9xrmd0
7bXXGW/zdFT53HO2dlRraL3/wRbj55XpHnxwuq3d1ZruasyN6fMCACBbkNfA
vG4pzbM/KzPqt6bAeaXXdZLXIB1lcl6j1iTab7/9bP1dVZvVdJuno8LCKbZ2
POmkk4yfUza48MILbe1+0UUXGT8nAACyCXkNzOuWMl925DXJvE7yGqSjTM5r
nnv+eddckqbmZuNtno5OPfVUWztef32+8XPKdGqNp1GHHmpr92nTHjB+XgAA
ZBPyGphHXpMI5DVIR5mc1xzq6OuqWsP5+QVyf0mJlJbOkUWLXjLe/qmqq/sT
mTPnUbn9jjvk5JNPlhEjRtjaUuU3av3oWbNmW9up9cZNn3MmaGlptZ7Nm266
2Vq73Zk3fu9758q9xcXWGt9/fexx6dveb/ycAQDIZOQ1MI+8JhHIa5COMjmv
cfZ1nb51xhnG2z9VTZ/+UMz2C0f2lRg33HBjXO2+bt17xs8ZAIBMlu15TV9P
7841j7Pgd0Tb+2XbwPUqfdsTedxe63ebnT3d0t7WJu1d8dbQ7XflGKWrh16H
N3XvaWKv02nX85rB5yPhz4ghfQPPZGdXUC/rm6egTM5rDjnkEBk7dpyMHz9e
xowZK6NGjZIDDjhARo4cKXvuuaf84b77jLd/qrr1ttusmsJqTagDDzxQDh09
Wg47bLyMG3eY9eeDDjpI9t13X2vM0pFHHml9x02fcybw+XzWs6naVrXx6DFj
rOdXPcdqbpT6mbonqt3POONM4+cLAECmS8W8pq9joyyeP0cCBX7JzZkkPr/P
+m+ur0BKyiqlqa039BnO9by99E87N6yUsuIpA8cM7jtJctR/c/LEXzhV5tU0
SLuHvmp7Y61UlM2Vioodqla3hf5uc321FBf6dxx34uDn+AtnyZJm95gKdU4V
JUXiy5tka7OcPL8Ul1bK2rbo/fr19cukqqZWFg+oql4m67t2/t32Nlkyf5bk
++zHtdZX9xfJwuUbh3Z/u1plcYU6bp7ruJYcnxSXVQ+eh0ZTzQIpG2i3eQP3
2rn2u694zsDPF+xo2+qGmP3spNzTgf8uaR7sA2xpXCalA5/hy3HeI58ESsql
foN+rEwirzNqGwwhr+nrWCdVUe5jrs8vJaULZFWEa1MZz9qd1xf8HsyraYx6
HdtaVti+N+rPdS3Rn+/O5mVh+5TLvKXrol7TwtKpA/dJ81xOVP+eTJHSymWy
uWfobY3EyeS8JpL+zz5nHkkMXtcgUjVWWK8ocdSz6eXeqHY3fa4AAGSD1Mpr
emVJ6RR9/9+hsGzgWNsb4xtfs71N5hX7PB1f9etK5q+M2u+sn2nv4+bObBj4
eauU+t3ZiJN/5rKdx+6WqhK/p3MqqYmUrXTLDEffdMbqbmmvnyu5Xq7VP0ua
ouQqTqsqp3lswx2Kte04cM55Ho+RM0vajd7TjVJaEPueWs94Sa3j+Am6Tg/i
ymu6NkpFsbfnLijHP1XqWpx9zF6p8Dm3LZLNcbTxjnaO/m/D4oCj/Qsqtf9+
1JUVxXFNk6R06RDzSiRMNuY1AAAAgBepk9d0y7xCb33i0PEKC+zjV6L1T9tW
SH4cxw71UQsXRDzmqlJ7f1eNlSh29V0jC1SukIWBCONTIpjXrBuH4K6LklsQ
X1984kS/LHH1xZ36ZXGJ12zE0Y4F5Y4+fLeUem0rX4T7Ogz3NLdwqhR6zVt2
yp/fmNjr9MhzXrN9nQSG0G47+GRJm/146yudGUmeVLVFOs+t+vYYONfIWVWr
FDvyyJKlbY5temVhnP9+BBXXtA7rv7mwI68BAAAA9FIlr6kvjZwvqPkmak51
Tqy+V6T+adsy1zyUwX38Ulg4RfL9kXOT3GLnmIkdnH37SOfujzRnKOI+eZGv
VdunD89rBvusObY+bp7kFxYNXKtzjla4AlkVZY5I5Hs0cOzANGtNiZLAlMhj
evzlYefeLRV+j22iu6/DcE9D7eSaV6Pm5kV7Hn1S15Gg64yD17xmVZn+Pub4
psiM0nKpKBu4j9a8r8jPoC1baat1tUXEDKRrZYT7NtBmkcZ4tVQ7ju/edn21
flxNrj94TeUDz2ZBhHuW58qgMHzIawAAAAC9VMhrtjXP1fcfC+c46rZ0y6rq
WZH7ydr+6VYp1Y2PyCty15Hp2Sr1lfrj6/qf0fIaf8kCWd8xeO6dG2pjjAXJ
kxmVK8NqrPRK0/K5mr5tnix29S3d42tywrYvq2mUbbbtB469VHfsgf5tyQrt
PeprXqA550kyo9p57ODxy7W5TaA6vB37d9ZwaHPNGSpZ3hb6e3fd2+G7p+GZ
V+7A87iqZWtYztMvm1dXup7zxF1nfDzlNT2NmufQJ/Pq9fnKlsZq7fb1tryk
TUoc15VTXKs/x/o5rrYKirRW1mZnFuMrd1yXe/zNxLypUq+r+dTTpp1/mFu8
LLH//sEz8hoAAABAz3xe0yvzCtx9t/yyyGNx+lqWafvIuv5p+1J3rZVo82GU
bY2abEJz7Eh5zYylEcYWuMYJBE2R+o4I57K6XNOvda6D4c5rQtlOS5R71KEb
o+J39MUj36PSGGtR922o1FzvVE1tE90615HX+jBxT/NL9TmWdZ2aLCunsFpb
syee64yXl7zGtY2auxTtGbHuo/v6nPPy6mc65snlTJMtmmPVl0aeT6f/96Ff
qhzznPIrGu3bDDzHuc5rijFexjXGKOp8LCQTeQ0AAACgZzyv0cyliPS7+XDb
GjVjclz9U03tkBxdXuDWNN9Z99g9rkXXt480PiXi+UyMPK5gB/fYhUCls0aq
Pq/Jr4i8hk6Qu/bIRPGXOfrDmnuUW+JtPEJTRYEm54mdN0Vuk+G/pzmB6hjH
7nfnWXm62sHxXGf8POU19bPs2/jmasZHOblrzjjP250r6seBlerm7UXNTNy1
duZt6HdckzOD8ked17fjma52nW/E+VhIKvIaAAAAQM90XuOupaHr5+n0uuuC
OPqnfS3u8R075p94Of8G1/kX19j3dfftY527ZpxKhHEIgzS1hF3tqMtrCmSt
p/k166TQmXsVLLD14d2Zi9d7pG9H93PgPccY/ns6Sapi1mH+P1mrGa8Rvc6Q
mbxm24ZaCRRMkUBA1TIqkJLK2JmelbPkxTjv7e55VsXOmsBd9n8TcvxTxG+b
x+SuS+Me2+PO5txjhtT4vIaY17S2fqWsWt1gqa9v9LTeOxKPvAYAAADQM5vX
uPuBzqwgmi01U6P2T111LzxnGEpvzJzE1bf3sL6PK58qiDW+wd3H95J3xB4T
MmhJcZ6rHQfHOaiMybHujqt+SPR2dGVUrv295xjDfk89zpPxVuvXfF4zFGs1
Y7Dc593vWp/JOQbLeX6B6gZZ7Hj2nMd1jonS1pnpWqGtxeQLzJH6DYlrXyQH
eQ0AAACgZzavcc+z8JXG+r34IFedYkf/dJWrVkaBLGneKE2NjbI2hqYNjVLq
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
fuNtAQAAEoP3UgCAKdmS16g+9JMVc+WXv/qV3Pm738nCykppbX1fu217x1Z5
4cUXre2uvz5fSkvnyIrXXpdP+7YP6735y18fs3KZww4bb2U3wZ+///4Hst9+
+1l/t7imdtifmTVvr5U7AgG59trrrLZ5o36ltm36P/tc3lq1emCbUrnuuuvl
7nvukcrnnpPWgfNPxnmdceaZoZrMphxwwAHywZa2pFxf3fIVctNNN8uNN/6v
lJX/Td5e22i1sXM7NU9u+YrXZPr0h+Saa66VP/7pT7Jo0UvUqAYAYAjIawAA
pmRDXrP140654IILXH3rvffeW5555pnQdp1d3VJ0552y//77a/vip5xyirz2
+hvDdm9OPfVU63N/9/vfu/7uqquvtv7uoosuGtbn5el//EMOPPBAV9t8//vf
l0+29YS2q6n9l5x22mnadtx3333l7rvvTnj+tXHTJuv8THr9jfqktPsDDzxo
WyMsSGVm4ZmNOoejjz5a2+5qXbHSOY8O6/MCAEC6I68BAJiSDXmNyjRUf/Xk
k0+2xhyc9o1vhPqwapzK6oY18uZbq+RrX/ua9bMJEybIb397q/z9iSclUFRk
5TQjRowIjZ/495KlSb8v1dXVoWxDNw5InbM6J9WHb3zn3WF5Vmr/9W8ZOXKk
1QZqjMett94me+65py07UOOYVNvtvvvulh/84Afy5z8/LI8++hfx+Xyh2snK
ZZdfLp99/l/j34FU93hZudVeY8aOtcZ8qTFi4TnM/SUlViZ5xZVXhnJI1baP
/uWvMnPmLCtLU89RcHs1Nsr0NQEAkC7IawAApmR6XvPMs89afdSvf/3rofWU
1NyQ8P6uqjuixh6oP//8F7/Qzhs577zc0PbHHHOMdH+yLan3JTgeSPXNI22j
1vdW26jsJNnPicpVVN6lPu/JiorQz1XbBdtljz32kNzcPOvPqu6Oamfncaqq
qm1t/9jjZca/A6ns484uGTt2nNW2K157LXQv1By5YBuOHjNGTs/Jsf58wgkn
WPPTnMeZPXu27T4NR+YIAEAmIK8BAJiS6XnN5MnnWH3UR8Pq9aqxKbr5Irfd
fnvE4zz19NO2badNeyBp96RhzdtWn1qNn1HjfiJtp2rsqHNRY1Y+/OijpD4n
qu5McJ2q8DExP/nJT1ztqPKspuZ1EY/11a9+NbStWpc8vDYP7NR4MNVOKr8L
//lJJ53kaneVnbV9qH8OVO5z0EEHhbb9zne+a/zaAABIB+Q1AABTMjmvUbVu
VeYx6tBDpav7k9DPVa1hZ1/36quviXosVds1fHs1dypZ90TVOFafce6550Xd
TtUtUfmJ2lbVlE3mc3LhhRdan1NSMs328+CYm6BDR4+OOT/r4osvtu2jsjDT
34NUpcbLqDb6Z1idJVX355BDDnFlZJGymqBgPaQg3TgcAABgR14DADAlk/Oa
e+691+qXXvzTn9p+ruquhPdbjzvuOFutXJ21je+4Mh71s0TfD7W2UHAcxHPP
Px9ze7U+U3CcSrLWr1K1UVTNGvU577z7ru1cw+vXKH/7+xMxj6fuR/g+ag0j
09+DVLRqdYPVPqq+c/jzueyVV13P4iuv1sU83qmO+s/JzvgAAMgE5DUAAFMy
Oa9R41NUv1TVuw3/+ZlnnWXrtxYU/DrmsVStXWcf+dmFCxN+P+4tLg6N39Gt
1eyk6ugEa5k88WRFws9HeeGFF0NjOMJ/Pn/BAlt7qNrHH37UHvN4ai5O+H7f
/e7Zxr8HqUjVClbtk5eXZ/v5n+6/39Z+hx9+uKfjqZpC4fv96qqrjF8jAACp
jrwGAGBKJuc1l152mZx99mR5/4MtoZ+pOh7ha+UoFXOfinms4Bo98e4XD1XH
RfW91bEffvgRz/upNciD9UuS8Yyo2jXfPP10mTVrtu3nt9xSaGuPb3zzm56O
d8QRR9j2U8c2/T1IReoZyJk0SRb885+2n//4xz+2td8ll14a81gdWz+2aiKF
76e+H6avEQCAVEdeAwAwJZPzGp0XX6yy9VlVH3ZzS2vM/W677XZXXjNv/vyE
nlswExo37jBbvZ1YWgbOP5hBqXFAw/XsBNckCiosnBJzH1VjRa3z7ayTm4jz
UTWgTzzxRKP8fr+1pnmy2nx7/2fWelHh7eccP6bzal2d6/m98mc/G7ZnBQCA
dEVeAwAwJdvymkBRka3Pesopp3jaL7hOdbia2n8l9NxO+8Y3rOPeEQjEva//
l7/cUavn4ouH5bn5qL1dRo4caWsPNQ4n1n7V1Ytc7fijH/0oIefknGdlgloX
Pplrda147XXXZ655e23M/VSm49zvpptuHpZnBQCAdEZeAwAwJdvyGjU/Kt4x
IaqOr1pjKnw/NUak9f0PEnZeixa9ZB13n332kc0tLXHvX1+/0loLS9WQebep
OenPTXB976D99tvPqksca7/f33WXKzeYMuU3CTmnzZtbrFo7JjWsWZPUdn/w
wem2tjv66KM97fezn//c1e7xzLkDACBbkdcAAEzJprxG1ebdf//9bX1WL2sw
1dUtd/V11TraiTy3YE0S1a8e6jHOPfdc6xg333xL0p8b5xpbkydP9rTfeefl
utpS1S02/T1IFz6fz9Z2sdahD/rKV77iane13r3p6wEAINWR1wAATMmmvObl
lxfb+qt77723tHdsjbmfWvfY2de9/Y47EnZeaj6LWhdbjY957fU3hnwctV5V
cE7OR+0dSX1uzjjzTFt7qJrHsfZRa1IH1yoPnz/U2dVt/HuQDj77/L8yfvx4
W/uVlZfH3E+twa6erWTmjQAAZCryGgCAKdmU1zjn4qh6uV72mzz5HNt+iZ5z
pNYT3zFG5ZxdOo5a//urX/2qdaz7S0qS9syotYbUvK3wNqmqqo65n3MOlZKf
X2D8O5Au6le+6Wq/pubYz+H06Q+59lO1mU1fDwAA6YC8BgBgSjblNeec8724
661u2LDRymfC99uVOUtOW9o+lIMPPtg6rnPd5qGYPfvP1rEmTpxo1d1JxjPz
/PMvuMYpealdo9ZOCt9PrWnV1LzO+HcgXcyYMdPWfuoee9nvrLO+bdtvwoQJ
nu4XAAAgrwEAmJMteY2ai3PggQfa+q1zn3o65n733nuvbR81n2fde+8l7LyK
p061jnvsscda42N29XhqbtGYMWOtY/79iSeT8szcdrt9bfNvnn56zH3U/Kxg
LhX0m9/81vjzn07U2l/h7XfpZZfF3Gd1wxrX+umPPFJq/FoAAEgX5DUAAFOy
Ja9ZXFPrmhPSvC762I5tPb1y5JFH2vZRc0sSdU69n/bJEUccYR1XjZ1I1HFv
v/0O65iTvvWtpDwzzvEaXuY0qfk34fuofOrjzi7jz3+6ULVrvvCFL9ja8IEH
Ys9pUvcmfB81xiwRuSAAANmCvAYAYEq25DV333OPK6+pro5ec+Wuu++2bf+j
H/0ooX3dJ56ssI47esyYhM5P2bhpU6i+zL+XLE3o86IyFjWPKbxd8vLyou6z
adNmGTt2nG0e1Kt1y40/++lEreUUb+0fVbs6vM7QuHGHyX/Wrzd+LQAApBPy
GgCAKdmS1+Tm5rn6u+eff37E7dVaSyNHjgxte9JJJ0nbhx8ltO2//e3vWMdW
a2Mn+r5eeeWV1rGvGPhvIo+r6go723GPPfaQuuUrtNt3dX9iG4+j5uY8XhZ7
TaOheOCBB62aLiZdfsUVSakbFKxLFO6QQw6xsjDd9i0trXLMMceEtt1vv/1k
8eKapLQ7AACZjLwGAGBKNuQ1Pb2fumqnBOmyg4WVlXLAAQeEtlHzilpb309o
u79Rv9JaY1nV6l2/YUPC7+vyFa9Zx1djWVTfPVHHDRQVadvxtNNOs+Z3hW+r
xuKce+55oW3UWI/HHi9L2rOsxvnozm04HXbY+KSspa5q1eg+76KLLnJtu2nT
ZjnxxBND2xw6erQsWvRS0todAIBMRl4DADAlG/IaNScovI+rxnhctrP/q8bQ
nHderlU/5o5AwFrjW40XCW53443/K92fbEt4uwfriqjxGMm6t5MnT7Y+Q9U0
TtQxzz57sq0tf/CDH8ioQw+1/qzGl6g1tx5++BH56SWXhOoeK8cdd5y88mpd
Up/lLVvaZMnSZUY1r0tcLepwhx9+uK3dVe3h4FynE044wcrRVG0lNWdP1cQO
bnfGmWdK4zvvJrXdAQDIZOQ1AABTsiGvube42NbXPfnkk636rUV33mmb8xRO
zeF5+eXFSWlztYaTyjjU+JdkZhjzFyywrkXNi0nU2lP777+/rZ3UWCQ1Vuhr
X/uath1VbR7VztQWHjq1xpOzXd9e2ygvvPCifPGLX9S2u8p3VH6TrDXdAQDI
FuQ1AABTsiGvcc6TueGGG0N/p+q4qtogam1pVf9E1WfZuHFTUtv8vf/8x5qf
dcmllyb1c7b3f2aNvVDrCnVs/XiXj1ddvcjWjirr+qi93fo7NQapYu5TVo1m
NU5JrSVev/JNa40t0894uvvznx+2tbtaUyz4d1vaPpSy8nIJDLS5avun//EP
WbPmbXIaAAAShLwGAGBKpuc1qnZN+PwQZe5TTxlv902bNlvnluzP+fCjdvlg
S1tCjqUygfB2zJk0yXg7ZgOV64W3+2WXX278nAAAyBbkNQAAUzI9r1lcU+uq
XbNxk35NHUQXXM8q6JZbbjF+TplOzdtzznmaPXu28fMCACBbkNcAAEzJ9Lzm
93fdZevrHn/88cbbPB2p+VTB+rZBqj6O6fPKdGpOmbM2zZtvrTJ+XgAAZAvy
GgCAKZme1zjXM7r22uuMt3k6qnzuOVs7qjW03v9gi/HzynQPPjjd1u4TJkyw
xtyYPi8AALIFeQ0AwJRMzmvUmkT77befrb+rarOabvN0VFg4xdaOJ510kvFz
ygYXXnihrd0vuugi4+cEAEA2Ia8BAJiSyXnNc88/75pL0tTcbLzN09Gpp55q
a8frr883fk6ZTq3xpNZ9D2/3adMeMH5eAABkE/IaAIApmZzXHOro66paw/n5
BXJ/SYmUls6RRYteMt7+qaqr+xOZM+dRuf2OO+Tkk0+WESNG2NpS5Tdq/ehZ
s2Zb27V3bDV+zpmgpaXVejZvuulmOeaYY1x54/e+d67cW1xsrfH918cel77t
/cbPGQCATEZeAwAwJZPzGmdf1+lbZ5xhvP1T1fTpD8Vsv3BkX4lxww03xtXu
69a9Z/ycAQDIZOQ1AABTMjmvOeSQQ2Ts2HEyfvx4GTNmrIwaNUoOOOAAGTly
pOy5557yh/vuM97+qerW226zagqrNaEOPPBAOXT0aDnssPEybtxh1p8POugg
2Xfffa0xS0ceeaR0dnUbP+dM4PP5rGdTta1q49FjxljPr3qO1dwo9TN1T1S7
n3HGmcbPFwCATEdeAwAwJZPzmkj6P/uceSQxeF2DSNVYYb2ixFHPppd7o9rd
9LkCAJANyGsAAKZkY14DAAAAeMF7KQDAFPIaAAAAQI/3UgCAKeQ1AAAAgB7v
pQAAU8hrAAAAAD3eSwEAppDXAAAAAHq8lwIATCGvAQAAAPR4LwUAmEJeAwAA
AOjxXgoAMIW8BgAAANDjvRQAYAp5DQAAAKDHeykAwBTyGgAAAECP91IAgCnk
NQAAAIAe76UAAFPIawAAAAA93ksBAKaQ1wAAAAB6vJcCAEwhrwEAAAD0eC8F
AJhCXgMAAADo8V4KADCFvAYAAADQ470UAGBKquc1AAAAAAAA2SxV/me6HQAA
AAAAAFJFqvzPdDsAAAAAAACkilT5X/g5mZ4vBgAAgOzFeykAwBTyGgAAAECP
91IAgCnkNQAAAIAe76UAAFPIawAAAAA93ksBAKaQ1wAAAAB6vJcCAEwhrwEA
AAD0eC8FAJhCXgMAAADo8V4KADCFvAYAAADQ470UAGAKeQ0AAACgx3spAMAU
8hoAAABAj/dSAIAp5DUAAACAHu+lAABTyGsAAAAAPd5LAQCmkNcAAAAAeryX
AgBMIa8BAAAA9HgvBQCYQl4DAAAA6PFeCgAwhbwGAAAA0OO9FABgCnkNAAAA
oMd7KQDAFPKa1Fe/8k35zne+K9dfn2/8XFLBfX/8o5x22mlSMfcp4+cCAAAy
G++lAABTyGtS27/+vUQOOeQQ2WuvvWTe/PnGzycVvLVqtRw6erTsvvvuVnZj
+nwAAEDm4r0UAGAKeU3qUlnNqFGjZLfddpPp0x8yfj6p5KWXXpZ99tnHapv7
7rvP+PkAAIDMxHspAMAU8prU9MqrdaGs5ue/+IXx80lFM2bMtNpnxIgRUjrn
UePnAwAAMg/vpQAAU8hrUs/6DRtkwoQJVhZx9NFHy9aPO42fU6q6+Kc/tdpp
7733lkWLXjJ+PgAAILNk+3spAMAc8prUk5eXFxo38sILLxo/n1T2wZY2+cIX
vmC11/jx42XDxo3GzwkAAGSObH8vBQCYQ16TWuY+9ZSVPSiXXHqp8fNJB+V/
+3uozc4//3z57PP/Gj8nAACQGZLzXtorS0qnSiBQJMXFU70Z2DYQmColM+dI
RWWtrN3QJn0p0D7Do1eqigvE5/eLf4DPVyBVG3oTdvxtG2olULjjXgQCU6S4
bEUWtS2SZfPScikMe65KKrL3ueI7NnTkNamj+5NtMnHiRCt32HfffeXdpmbj
55QOVD4z6VvfCmU2jz1eZvycAABAZkjOe2m3lOZNtN77do1voA9YK1u2m2+n
5HK314z6rQk7fmf9LHu75s2SduPXjHRXP9Nnf65ysve54js2dOQ1qePue+4J
ZQ75+QXGzyedPPPss6G2+/KXvyydXd3GzwkAAKS/ZOU1Zb5E5DWDuc281YnL
L1KPu70SmtesnuPoS86RTuPXjNTTL3UV0ySwc8ybGu+2OMo4r1Wlfp6rnfiO
DR15TWpoff8DOeSQQ6y8YY899pA1b681fk7pRI2xOe6440KZzUMPzTB+TgAA
IP2lR16zQ0lNq/H2Sg7yGqSC+MZ56fKabB1Twnds6MhrUsOtt94WyhomTz7H
+Pmko7vuvjvUhl//+tepYwMAAHbZ8OU1fqla3SD19Sv1li+TqvnlUlzoj5rZ
lCYwx0gd5DVIBfE9h2vLHN9V/9ysfa74jg0deY15Xd2fyJgxY0NZw8MPP2L8
nNJR/co3Q22ovFq33Pg5AQCA9DZseY2vXLZ53X/7VqmrmBpxblRdl/l2Syzy
GqSC+J/Dvp5+6ds+oKc3q+vr8h0bOvIa8yoq5oYyhj333FM2t2TqWNbkU9//
YFveetttxs8HAACkt2HLa4bQf+lsXCA5mswmp7jWeLslFnkNUkFyn8NMxnds
6MhrzLviyitDGcNp3/iG8fNJZ7+66qpQW55wwgnGzwcAAKS3VM5rlPblc1x5
jRpjs6QjzmNt75X2jq3S2dMt7W1t0t6VuPWyk9Feun7ytp5ea82Jzo7ugT/3
ez5+ovqSg2MovH92Okrf6+y3npGgvrjXVet3PYelq5P4PUnp72R8EvMd29X7
l57Ia8xSNVa+9KUvhTKGX//6BuPnlM7UWt7BthwxYoQ0NSdvTfRVqxvkmmuu
lauvvsaYQFGR9PR+arzdAQDIVKme16g+TFXhJFdmk1/RGHvfrlZZXDFL8n15
+rlVOT4pLquW9R7nV7WvrpWyirnW2PGKinKpWt3mab8t4fuVzZXFjc4sRpfX
7FgLtLOlQSpKpkhujvv8c31TpGJpY8x5KLvSl+zcsFLKisM/f9KOMU85eeIv
nCrzahqkPQn9yvbGWqutgm22pHlwbdQtjcukdOCcfDn25yInzyeBknKp3xD/
mJCkXWfP4DOYM3C+Pr9v4L95A/+dIqWVy2RLT3DbXmkaePdetdNaj9fQ17FO
qqI847k+v5SULpBVUY7XVLPAej7nzZ8jPsf+vuI5Az9fsOM+VDfYnjX1bC6u
rpXFNUq1LPHyfUjgd3K4n5FkfMd2/f71y9qd969ip3k10f9N2NayYrDddrZd
XUv0rKyzeVnYPuUyb+m6hLUdeY1ZqxvW2GquPPqXvxo/p12lMqia2n9Z65M/
XlYu/5+9O4+Lqtz/AH7b92yztD3bbt32Rbxt1q8bZLfuraZ9m/akHVoUb2Zi
pWiltKAtYIUVWommVIIKBS5YikGCCggoKJgoGFD3/vP98T16xrM8Z+bMcM48
M8yn1+v9ujXMOfOc5zzDPc+X5/l+Fy9ZStva2sVju3UrFf3wI73zzrs0YcIb
NDcvj+p7sB+sbOUvYevPRx55VPdZsnz//feuXB/fB74v49LSaM7cuVRXV295
vyurVnf/f9V0evXVV2nqx5/Qsp9+RhwJAAB6hciP13TPaaqmmecyCel+a9Es
zx1vkf9GLHX6soBxj9JJ+jlVXNoiW+0PfJy5vzJXNFBpZqK99ieModIm67Ug
Ic0lO5soJ9Vjs/8GUZqN/guGsc/iJ5V1v15LGYnm2J2IJ63AXntcvM7q/MnC
/Xymc+bVdrejjOJ1cQv/4/vP1lrKTvWfm9sozjume15uHCdbaWKCzXMY2mS8
R4Ha7PR3MmxjxIagv2OO3b/tlG3K7T6C6oLotx19t8zv9c1LMfRpYq5j33XE
a+TSrgfZkSO3WHqbeoLjL7fceqsppnD88cfTz8uX+963dVsbvfraa9SnTx9h
DIL3iK1fvyHoz+fYwaGHHeY7D++Pcuta129opDfffIveeONNaT7+5FPq+uNP
x69tZm4uHXrooab78vwLL+jqbnFO58suu1x4D/mez/jyS+ljEgAAoCeiIV7z
538bKM20vsQq73AXzUuzO/82zIcSs/zOc4z1iz0B5jj2j3Oi/vkgyqnYKvz8
oOeSTYtoaCj9lzTDsZwdxj6LTxpDSXbjCjsNnR5gDZZr19lFCycFNxcfmjZG
H6/x+LlHnaspJeRx4qGFTfqxl2F37BnaZKrnbdlmd76TYRkjNgX1HXP0/v2P
qnNHGN6TQHObrNq6WXy//dZib6BUw+/ftEJ7awvtQLxGrqeeeto3v919992V
PYqy2xQqjhv885//9OWO+c9LL9EJJ5zgu77jjjuONjQ2KXWc+Of82pFHHqXs
AeO4x0MPP0wnnnii7/0nn3wyVdfUBN2OSy691HeO888/X3q/RJvvvvue9tpr
LzrggAOUNUS333GHLg4zfvwE2v57hxK72WOPPZRxe/XV/1Dib6+MHk2DB19J
++yzj+/9Y8eOk35NAAAAoYqOeA3/Tdg838tYYY5PlBrnkJo5zNCU8ZSRMZnS
UpL1c2Mtb5ZlO2XHazyJyZSSwns8rN6TIMzrE9RcsqnItCdm13FeSkpKpqFe
i70sPGdOdWbNgrbPfGtUTNc9iOI9Hj9rWDxUbJXnyMXrLBaMVZ+4BIpPsLH+
w889Wm6so632kyeZJmZkUXZm9xhP9TNOPNq5+VbK9tqMFSQEiNdYtNmt76Tr
YyQIwXzHnL1/PJYLTNeXmm+xn6N1mcW491N3rz7PcH5na/QhXiPXNdfE++a1
nMdGdnt6IjNrqnIdF118sVK3jl/j/VDauf6QIUPo4IMPVv790Ucfo5bNv+nO
wcedcsopvvdz/2jXc9hx7333+Y7fb7/9lNiC7L6JFr93dNKpp56q9N3XM2f6
XtfG0XjdTXx8gi+mlp9vrkGRnv62ruZZYVGR9GsDAAAIRbTEa0zzoW4TS/R/
B+yomiGYhwyiiXkVglri26myMEs4R0zJE891ZMVr0qYvMuRO6aJKi702cSl5
gfvO8l5spgzR+oSEEbSwyvA31/bNVJqbLmyD5VwxCMY+i9PMXeOTJtPy+s2a
eEkX1a3IJa/te+nedbZVZAnv4dBJuVTZpIkvtjfRwmzjuggb96i9QrAmyEM5
peI+b6zIE76/VDff7to5t2ky7Y1KK2ny/dyY/9ZOvMbN76S7Y6SHv5/Cev+a
KM1w36xq6G0pFeVv3/n71KIWWF2eYZx6rGPaoYi1eM0v5RVKbpVwqFq9JmB7
+J6q89qBcXEhXxevWQnXdTU0rDd9PsdUzj33XOU6vvr6a9/rvFbDuE+G12Pw
Gg2raxk7bpzu/V9+9VVQfTHiP//RHc85gpweR71V1tSPlT7jPU7a1y+97DLT
fbzgggsscw3xfrdDDjnE917j+QAAAKJFNMdr9HGP7ZSTaJ6DZASoR9xRkyuY
i48R7sEIf7zGSwtN+Sp2aRPWOzevsbE7l2wuNOcXCbT3h9tgO9YQBFMsQI17
ZFjnDBLFBuKS8kzrYNy7zu3CtSr+xiDXrBeuK7HoQ/P3IIHm1vvvy44ac9tz
qkT5Za3zXtu6R4L+cPM76eYYCZbd75hb98+0/jBuPDUKzlWaYb32S/z7zJzv
3Vau9yDEUrymsWmjbg7pNv6s2tp1lu3htQzafSP/+te/Qrouzu3K+1LCdV28
r8m45kWNy/AY1f6M1+8Zj+c8xP6uZ86cubr3JyQkBNUfnCNXe/ys2bMdHUe9
mRqX4bVS6mt8P48++mhdn/J9bgiQXyhu0CDdMcUl9nIOAgAARJJeE68R7AmI
T7O3/rUy25zXN0MwTw13vCa7InB94+rcZNNx3swy/30nvBeCPCZx4riVqf+m
G9uQQPMs82fYI5qLi9YO6XWZ4wOmvNQuXqdp3wiPwcDPh80l6fbjNaWG93qm
CdapGJlzlojXUtirK295j4xtdvk76d4YCZ7teI1L969thXFdl+g7qB37u2Iw
cZo2m/vBnGsnp8bZOvexFK/Z/NsWZa8M79dhFw8c6ApeJ8P5P3iOyvXmrNqz
dm21bj7rvf/+kK6L583XX3+969d14YUXKu3k2JAxxy3noOGfcT4e7et333OP
7hqvuuqqgPubjGtyeE9T69Zttvvjs88/1x0/ecr7jo6j3mrN2rXKveUY4qbm
Ft/rHA80xtzmL1gY8HyD/v73oOJ0AAAAkSha4jV/ti8z7WXQxj3M87sgYgbt
ZX7PrQprvMZrZx7XrVOwv8JwrJ25ZEe9eU3Djr0wofVfan7P8pGa5+KDaK6f
tUaqcmNuEMO1unmd5jFoN89HkzmftsX3pa2mgFKUPEYjKCkpkdJy7dRV3mra
/xWOeI3b30m3xkgo7MZrXLt/gt8DqcacwK3636Fx3mTy6sadebya1/bYi20G
I5biNeHEeXQD7cVZWrpMN5998smnpLfbn42bNvniNZ1df+h+puYP1uY8Ydq8
J+z1sWMDfo4x5w376efltts5e/Y3QX8m7Or3K64YrHt94sRJuv486qh+tnIK
aXNNs3vuvVf6NQIAAAQrauI1Leb8sLvmb7zvwpDDNagcC4J9G4LjwxmvMebm
8WdeaoKpr7V/J7czlzTlqBiQSOWd9j6f+8/Y/kD1gYPtM//1a+xfq3vXuZ1m
JhlrHs+wF3P7r6DGjwMxBFW5qX5QOOI17n8n3RojoXDjnMHdvy7T+DOuZTK2
MSWvzPS7w3he45qy+FTnc3YiXuMOO/GaBQsLdfPZ559/QXq7/eH9ZFbxmgce
eFCpna3N7cu5goxxFzv1yo35Z5S9NMUltts5b16+7lg+n+y+iwZcw9vj8VDu
LP337pZbbtH1J/93oHP9tqVVyTMc7HEAAACRJlriNaI8mbvmFptNeVK9mcHl
WDDVbBHM/cIZr8m0qM0t0mjMx2Koq2xnLrnclNcikRZW1VJlRQWVB1BZU0EZ
hrwtnozIjNe4d53me2jcl+aPaT9LUN+XLtrS0tR9DWVUXFhAOdlZlJY6goZ6
PRRvUWPI/XiN+9/J3hOvceb+mWKRCem6HDbG/sqp7/7dYTgmUE6wYOLIdiFe
4w478Zrvv5+nm88OGz5cerv94VrcVvEaEWPumr59j7R1HMcMjPEazqdst53z
8gt0x744bJgr/cFriThHUZ8+faQ555xzqGnjJtfuOa+j6d+/v64/ufZToON+
+LHYdA/vvOsu6WMYAAAgWNESrxHl+PDNWQQ1akW1vv2xU+smfPEaL5W222+7
ObePV1c/JvBcMoiaznb1sIaMsc/s5j3xf60uXmenOc+HKAdSaO0W2U7l+dMo
JdFfrWprrsdrwvCddGeMhCYi7l9TgSF3tTb3uPHeJlMlv27MuaSNeZn2WHkN
damcgXiNO+zEa4x5WiI9XrN+Q2NQ8Rqen4eyvsK4h4rVWdQhEglXvObd9zIs
czKHS79+/aiurt61e85xMuNn8rqpQMcZ91CxZ59Nkj6GAQAAghUt8ZriNHNd
k0x1/ifIbeNvniliyiUrNV5jrNfrnzleo89DYSdeY8rB21M21zqE3mc2+8IQ
r3HtOgXxiaDGYGuRfq7t5/vSVlNESRbrLno033cyXhOG76Q7YyQ0wZzTvftn
XtOUpq6HMd6PxNydNbEaKNUih01bxTT959rNqRUkxGvcYSdeUzB/gW4++8IL
L0pvtz+c1ziYeM3xxx+vuz5ebxPomF9XrTLN87keVTDtDOd+qPqG9VK1bP7N
1Xv+5ptv6fry9NNPt3XcrbfdZrqPH3z4kfQxDAAAEKzoiNcI8rHy34fVvCM9
nSv/V1Dn1sF4jbHWrvvxmhFU3enn54J4jbieeA84vL7GqXiNa9fZwzFoqmFt
ma9WVOtaZBB5vImUNmkaFVcso7Rw5xsOw3cyGuM17t4/0ZqjRcL2JeXW+o6x
ymFTnqnPFz10up3cyMFDvMYdnJM1ULxm8ZKluvmssbZSpAkmXsPXrb223Xbb
jVZVVgb8jCnvf2Ca5webp/abb+bojke+4dDdfPPNur589NFHAx7De6iOPfZY
3XG77747ra2uln49AAAAwYqKeI2gps+AJPXvw93azbVRer73wlzjN7T5oXlN
h514TXGL/babcvsEnb9GtO4kmcpbNlNjU1NImlt7VvM3fOtrHLrOHo5Be/P9
JtO83TeXTp1M80rKqLqe22SsA2/Ok+z++hr3v5PRF69x+/7xmhhjHqR0pR3l
ur4apKvJ3Zg/RtCP2w17BwfRTBu1t0KBeI071Jwf/uI1VatX6+a0nK9Xdrv9
CSZ/zdtvv6O7tlNPPdXWZ9xx552meI0x/20gn3/xhe74yZOnSO+7aMT3WF0n
pvrk0+yAxy1ZWmq6h1deeZX06wEAAAhFNMRriieZ90Kl5jf4/bykoP4WbM5r
EpeStysetJNpfmgrp26TaY+CrfpQQaxFMK7fMc5r7cwlTefo4fqYnnJrLu7e
dZrvYTDrEUy1rwX3yDQXV943nioDrsUy7nkJR75h97+T0Ravcf/+/U/Jo5Sk
+wwPLW839uUIqtYe02LIe8Pfic4K/f6puPG63MVOQrzGHer6An/xmvbtv9Ne
e+3lm9PeeOON0tvtD+e1tRuvMe6H8d5/f8Dzb93WRocedpjuuLPOOsvW3iut
9wx5ZYw1xsGeRYuXmNbI1NauC3jcSyNHmuI1HEOTfT0AAAChiPR4TVvVDMH+
AW/3HET/eaZ1E8HkWmhdZNq7IapHbZwfimI65nMb8pLYjNfYnXuKclYYa+7a
mUuWG+MFhhw4gVSXFtDcvDyf8qZIXF/j5nV230NjLmPtGjAHvi+mfC4DEmhe
k43zt9vdm+RsvMbt72S0xWvcv3+si+Ya6npn5OfpYzimcWlc95NIc/P116Pu
q3ID4jXu4JwrgeI17IQTTvDNaf9+ySXS2+3P5t+2+OI1HZ3W/x/D+2GOPvpo
3Xyd9zkFOv+n2dmmef5nn38edDtHvvyy7hzB1JaCXdLGj9f14xlnnBHwGL73
nONGe1zcoEHU9cef0q8HAAAgFBEdr2lZZMpZykR1kovTEkKbC/1XUAd3gCaX
sYadGlJG5jmavXiNLj+PHx01M0znTy1s0r0n1L/9a3Nc+NVZZrpPxjYEy625
uJvXaRofNmNBpryuFvfIXIt8jK01D35rqwUYh6HHa9z/TkZbvMb9+7eDcX+T
nfEuyueui/kEUessWIjXuEOtcRQoXnP11f/wzWs5P6/sdvvD61/sxGtENYXK
Vv4S8PxXXfV/umOuu+66kNrJ+8rUc/D6pS2t7n1/erMbbrhBdz/uf+CBgMfM
mj1bd8zee+9NxSXuxZsBAADcFrZ4jSe4OdGWqgJhrMYqjiGa88alFNj4rFrT
XgOrtf+mvTSc+8Rf3e128/zefrxGHJfS207ZiYL+MfalrflpraketWnfhIVS
U5xCW0c4NO7Nxd27TtEYjE8NNAYbBLm0xffINP7s7FHprBBcb3jiNW5/J6Mt
XuP+/dupRbOmzzS2xHlomkt3xYTiTMcmGtYzOgvxGnfEx8cre3kaG/3HzjnH
sDq33XPPPem3La3S226F9yVxHprLL7/C73oJY02hfffdV9n75e/cXNOJcxKr
x3C+5ppam7F8g8GDrwy6nhHo/d7RSYcdfrjuPo5OTfV7DK+t4bGhPeblUaOk
XwsAAEBPhC1e0z03qev8H3W0b6c2o84u5X+bmxpoeUkBZaQY58Xav/NazVPE
MY+U6RV+2tllqo1i9fdnVif4u7Xlnqj2Wpro2TVHCiVeo1xvSYNl+4tN8QPO
qWOO8didn1ZON+4V6paY5XdOWZptXj9kfx+QNTfn4u5dp3lvGvNOKhDvA2qt
pYzEQebzWrRbNP70eZwMWsoo1SK/rTj3b3D78gKvN3P3Oxlt8Rr379+ucajb
ixanHWMWsUnD/rM4bZwncUaPv8/+IF7jDp7vbv+9I+D7MrOydPPbkkWLpbfd
n21t7QHzyXg8HtP6muzsaZbv57w42j00vCZjzpy5IbdRmyP3lltuca0veN1O
zvTp9EVOjjT5BfNdubYffiw23cMLL7rI7zHjxqWZ1kcFm3sIAAAg0oQtXuMA
b6b/+VjbCkE+T57HpWRRaVWDEhfi93V0bqXqFQWU5hXNlf2stWhZZMpFo8xt
vGNoZiHXdmmgyopllJMxwm/N3mDiNSw+cTzNK129syZRA5WX5FGqsO3iv4Pb
n5+K1p7wfC+RZpbWdvffzvd1bqe6iiKL/uv52hrm7lzcvevUrlPQtyOZsvMX
UXlVBZWWFFBmmiD+E6DdHVWCfVMcy8gooLqdNYU62rd2t3kRZaYKYlLaY6aX
UVv3e7fo1qqJxuEgSs3MpYWFBTSvpNbvPRLus3PxOxlt8Rr375+mbzLFMW+O
L1v9zjbXTtv5WXb3C4YI8Rq5fl21SjfH/fCjTOlt6gmen6u1zI31oTj/jfH9
Gzc106WXXeZ73z777GOrBpEVrhmu/dzXXn/dtWt95plnTdcpA8dWnL42roEu
+qwpU94Xvv/9Dz7U5c6+6qr/E95vAACAaBMt8Zqhmfb2H5v3rARjEM2sMdbS
1RP97T9Y/uM1FustbBDl3GHBzE/banKFMSnffC/Of/vS/K0XCILbc3E3r7M0
0/9c2xZhu825ZJ3+HHMOHo04//W0rfrare9ktMVrwnH/fOPbIjaUkmc9bsX3
3n7OoVAhXiPfKaec4pvnPvnkU9Lb0xPGmkK8x+mggw5S/p33yixYWKi8j9fU
vPraa0rOHvW9XFOL90X15PM//uRT3ecvLCzq8TVZ4TjJkCFD6Nprr5WGc/W4
kZ+H18Zo+/Hggw/2/S/fN/Uz8779Tslzw7Wj1Pv92GNDlXVYssciAACAE9yK
11j9rTZYvLakuCa4Z4Hl0825Su3MC7P97jHYqVOQW8MP/nt29Qr93EkUr9H3
VyLNzJvsd42O0cRC63mYaC7Z7OcaO+qLaGgI92pivnN/h3dyLm51rW5eZ3Vh
lv37582i5aVZ9trdXmGo1xx4XGeWbqbmkvHinxvzStXnWZ/LEyC246ev3fhO
hmOM2GX7nG7fPx9jXe8d55oryF2z6xpE9cbTXavjrUK8Rr5HH33MNy8eGBcn
vT09MX78BN08/8wzz6T8/AI64oi+vvk8x2j2339/3fvuuvtu2tDY2OPPHzo0
0XdOzr/C+9Jk90m04VxDhxxyiO7+cBxMW6Od4zbHHHOM7j1cEw210wEAoLdx
K16TbaxtbFfcIPJ4k2lidh5VNoX+NxvOV5xkkfvBKD4pnZa3BFF/ur2WMv3k
2NnBQ5n5q5X3G2sSmfMIG/srkcr5uKo8GhogNhTnGUHzqvz3k2ke5p0WeD1B
ZxPNnGRvnYgSU6v3vy4pWMa6215BXh5715rl/1rdvM72BpqbMcJyHU+cJ5Ey
85YpuW06DGMkLinXuvZ1ZwNlp/iv56P0Weo0Km/ZVW98ZopgbZhhzQyrK7SI
FQaqjZ44w2+9bqe/k2EbIyGd0893zOX7pzKtBeQcYn7Ha5kpfunJsBcD6wnE
a+TLnTVLV89oQ4AcxZHMWFOI11rw69U1NXTvffcp8RuOBXBc6oknnqSpH39C
lVWrHft8Pr82BiS7P6JRwfwFunvIY7KxaaOST3jylCl0yaWXKjmCOO528803
09hx42h+9zGtW7dJbzsAAIDTevdzaZeSEyMjbQR5vR7yeL00NDGxWzKlpk2m
mfnLqC6YOI1BR2uTkh85JzuLMjImKzKzc6l4Ra3feWuw11C3ooiyM9IpNXUM
paSM6W57OmXnFlB5vZ8aMQ7paKmlhdOzKDUleWffdUva0X85eUU9iqlFEnev
s0vJpV1dU7tTAzW36sddde4Iwzw5cOxhS30ZzcxMp5TudiaxlBGUOmkyzS0s
o0aLOuLVpUU0MzeP5uYV0MKSsu7xbxF/at9M1d1zmPIVZbS8ooIquc3toX9X
tH3h5ncymrh6/6II4jXy8XoGbS2ejzKzpLcpFLyW5dBDD9XnGZ72Wdg+v7zi
V12NKa4tLbtPohHXdNLew4sHDpTeJgAAAFli7bkUIBIVpyWEfV0DQCRAvCYy
cB4SdX7Ma1RktycU8xcs1M3z99hjD1pXVx+2z+d1Hupn/+1vf0NtohBdeeVV
uvvIeZVltwkAAECWWHwuBXBDR00eeeMSlFqyLC5hBJUL6nWZmetVTbSsWw/Q
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
9TW8zkb29UJ0mzhxkjJeOW7jxl4l3mvFY5XXnNU3rJd+vQAAAKpYeC4FAIDI
hHiNHJ1df9Bpp52mzIHffvsdx8//4ovDlHNfccVg6dcK0a+5ZbOyr47H1KzZ
sx0//+133KGc+55775V+rQAAAFqx8FwKAACRCfEaecaPn6DMUc844wwlfuPU
eTlXzeFHHKGc+9PsbOnXCb3Dk08+pYyp+PgER8+7es1a2nvvvZVzF/3wo/Tr
BAAA0IqV51IAAIg8iNfIw3Wi1DULM7780rHzvvXWROWcJ510Ev3e0Sn9Ot32
25ZWWldXL1Us1N8qr6hQ8mTzvqWlpcscO+8zzzyrjNdLL71M+jUCAAAYxcpz
KQAARB7Ea+Ti+sU8V+Vcq06cr6Ozi0499VTlnK+PHSv9+tzGcZILLrhAuV6Z
7n/gAel9EQ433XSTcr2cy9qJ82ljltnTPpN+fQAAAEax9FwKAACRJVbiNVWr
19Btt99OffseSYP+/nd64YUXafbsb0x1g3n+/9nnn9MTTzxJF150ER177LE0
ZMgQGp6SQiWLFjve/1zbe5999lHWLPxYXNLj833++RfK3JfnwBs3NYdtHHF+
k2+//Y7GvPqqMqfn3DwJCQn0yujR9NPPy3XvXVVZRYmJj9N1113X48/l+NS/
//1vJbey2zgXrpUR//lP2PqaVVatVuIbzz6bpMT6eE/dvffdRxkZk5V7ob6P
cwPPzM2lK6+8iiZPmdLjz52/YKEyvvbdd1+qXbeux+cbO26ccj6OMfK9dLqf
2rf/TsOHD6cBAwYon/HgQw9RVtZUatq4yfTeoqIf6KWRI+maa+Kpf//+dMml
lyrjlPsZ9cUBAGIX4jUAACBLLMRrOM7Sr18/ZV6o5slQPfLIo756NwXzF/jq
FjO1vpL637wXZNQrrzg+d7vr7ruV83PO1Z6ei+eYfC5etxOO8cN9x3GAgw8+
WNevPJ/X/nvW1I+V97/77ntKfINfv/uee6SP/2jT2NjkGy8qHqPacX3WWWfR
mrXVSrzu5ptv9r0+Z85cR9pw2WWXK+fjnNY9OQ/v1TvxxBOVc/EePqf7qmXz
b0qcSv3u7r777r6+OPvss2n9+g3K++rq6pXvnvpd5/dyDFXbx9dee63S97Lv
PwAAhB/iNQAAIEtvj9dwbpOTTz5ZmYPx38o3dM+5kpOf083FPv7kU3r1tdeU
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
aOb0GTQzr4Dm5c6gnNw8WliyjCrrN1NHBPQPAAC4p7fHa3hdinGfk8w5ZCzI
mvqxrr853w7XIpfdrt4qISFB19/+anfFkrPPPlvXL6NHj5beJgAAiD7hjtc0
VhRRRkoixQ0YQAMCGkRDUyZTcZW5BgRApKsrzKKkpBGUmjqGUlKSKS17UczF
INtqCihF0wepmbHXB+Bfb4/XqPWvVUcffbS03Kex4vHHn9D1+U033SS9Tb0V
x8HUHM8qrmEtu12y1dTUKrmYtf0SDWvTAAAg8oQrXtPRUkZp3kE2YjRi8SnT
qK5Tfn8B2FU6yaMfx3Hp1BwB7QqnLaXp+j5IiL0+AP96e7yG89xq52xcY1h2
n/d2F1xwgaF28gTpbeqtFi1erOvrPfbYQ8mzK7tdsn2UmaXrl4MOOsiXuwYA
ACAY4YjXNK+YZnM9TSDJVNoiv88gnLqoOHs8paSO2blGYwzNq9keFW1ZnuE1
xCom0xbp/RleW1ZMjvk+AP96c7yms+sP6tv3SOS9DaNVlVWmdQ1c31l2u3qr
l0eN0vX1eeedJ71NkeDe++7T9cvVV/9DepsAACA6uR2vaS7N8huDiUvwUuqk
yZSZPY2yM7NoYtoI8iT4j9mUt8vvNwiXrZRhGA8TS2XtjwuuLaJ4TaytLUG8
BgLpzfGaoh9+NOWuWbxkqfQ+782M8QPeq8NxM9nt6o14X5+xDhfn2JXdrkhw
/PHH6/rlpZEjpbcJAACik5vxmraqXMt1NXGJ6VRaYz3Xba5aRBMTLfZPJc6g
tgjoOwiHrZTpiZx4TTBtKc80xGu802IuVoF4DQTSm+M1XCdHO2fjmkVcs3de
fgEtLV2m1EmW3f/RrrFpIy0sLKJPs6fR62PH0jHHHKPr8/79+9NTTz9Nn3/x
hdLnGzc1S29ztOJcNb+uqqQ5c+Yq49iYJ4gNHnwlvfLKaMovmB9TebW3tbUr
4+vjTz6l226/3dQvDz/8iNJvJYsW08/LV0hvLwAARA/34jUNlBonjtWk5VXY
Pk9l3njxOQqbpPcdhEP0xmtYR3sXdXR2a98ek3l2Ea+BQHpzvMY4ZzO6eOBA
6f0fzWpr19Hee+8dsJ+1kpOfk97uaDV23Lig+pqVLvtJervDYbShpnkgq1ev
kd5mAACIDm7Fa6pzk4X1nnIqtgZ9rvLsRPO54sZTYwT0H7gtuuM1sQ7xGggk
luM1jz02VHr/R7MZX34ZdPyAj5Hd7mh1y623BtXXxx13HG3d1ia93eFw7bXX
2u4X3iuFPXoAAGCXO/Ea8dqa0NfEbKYMjzn2M7e+y/45OrdTc8tm2tK+lZqb
mqi5VVbOWghOlylGkrEi1HvXRW3t2306gq435mRb5Nm11ieI70+Ieh6v6ek9
izwd3b+DtrSqYnPdlVZvjteUV/xKVatX09q11VRZVUUVv66iFWUracnSUiWP
zfbfO6T3fzTj/Cncv9XVNSa8foH37pSt/IV++nm50t+8FwW11EPHv7MqKytN
fa2Obx7vPL55TQ33dVUMrSFZt66OFi1eooy1lb+UK/3E/cLjk8chv8b7wzj3
ddPGTdLbCwAA0cONeI2phi/z9Ozv6s2F5n1RqYHiP60NNC87nYZ6EsR5cOI8
lJqZR9WtNttQUUDZmdMoO3uHuSt2fX5daR6lJnkN+XoGkTcpnRZWmddgbKlZ
RtlKbmV9jh4l/3JGLpU3+Y8DRFRbVhTsyBetyNK1xZ9G7XHd1zKvYlfbKvNn
KD/LmT6ZPIb75kmd3P36jB3H5ZX5ne92tKymuX7GQLzHS2kZM2i5n1xKobZl
S30ZzcsrUHJVzMvPo4W+ftlKxbm77p0id1kQOZm6qFR3fBblFK72/53svseZ
qckUH7drPCjjIy6he1yMoZz8Mmp2IRYSSrzGiXvGfVS+876p/ZSTX+F3rLTV
L9J9p/jfi+v9j/0tVUWaY6zvA1/TzIwx5BHuER1EHm8yZeQWUV0M5lLvzfEa
AAAAAICecP65tIvmppjzBPc430x7GQ3lGELcoB04XpNXa/n+5bnivDdWUqcv
C/h37tJJ+vlj/KQy4rVEGV6LvMga3klFO8+/leameW21KS3f+voiuS1xafZq
p1oft5Um+q0Rpo25pYtrLrXWUnaqvWvzfb53TPf83LjmJPS2GK9v18+bKM00
b0+ghXZr1bcuonjjZ6cUiN/b2UQ5qR6bfTCI0mx8D4IRVLzGsXvGtlO2aU3e
CKoLYjzu+F4t83t984y/6xJzTe0ozhwRxDUNooxC6+9ab4R4DQAAAACAmPPP
pbWCvVCJVB62fQxdNC/N7vzUMPdLzPI7nzPWZ+a1FammOaG1lNxFNDPFYq2P
hZwq8d/3I7otAea4gY/bKtj/ZkG0bqtzNaWEcP938NDCJu35Qm+LqZ635ufV
0835nVL8xB+16vLM8/9s0b1pWqTEOIP+HiTNcCzHjO14jaP3bGcf5xr7KYHm
Ct63g2jP5YAANdjN+z71centNDMpcPxUJDW/IUy/L+VDvAYAAAAAQMzx59IW
wd/+w1h/u9Q4R9bM1YamjKeMjMmUlpJsbqPKm2U5VzXNv0Vz3QQPea32X1ke
k2BZ99xqH1kkt8WJeE2212abBfP/5cY62uq1eZJpYkYWZWd2j4HUZIu9KTuu
c9ccPfS2mO6R9ufd3xPj3iqu9x34e7Ld3B5R7u2mIvP5fe3wUlJSMg31Wo+N
+NQCR9bZ2I3XOHvP1D4oMI1lyzhI6zKL/vJQsdV+yfo8w/n1760WxNWUvvWq
15TV/bso0eL7liCMQfVGiNcAAAAAAIg5/Vy6pXSyae5hd/7eUx1VMwTznkE0
Ma9CMA/eTpWFWcK4TUqeeE7nL0biTZtB1S271jhsqSkIsLYhgSbmLtPkDOlu
T8k0wZwxgeYJ5m2R3Jaex2vYjjrYvHfIuB8praTJ93NT/tn2CsG1eiinVHxP
GyvyhO8v1c3RQ2uL33hNdx/nJAYRG1C1FJnG7NBsY86UzZQh2sOVMMKcv6h9
M5XmpgtjBk6s8bAVr3Hlnv1PuV9phn6ISxXvGxP93lJZ1QAzrXPyaGO9gpzr
CWOoVJQLqr1JuC8xPrWox/0fDRCvAQAAAAAQczxeY5yf+ea0bl+LaP47gDIC
1FvuqMkVzFXHCPdFWcVIJhZazGtNf39XJVOpRa6SthVZgvmiuQZ6JLfFmXiN
SlRD27omvHn8JdDcev/t6Kgxx/nEe7+Ca4v/eM3/qLnEnGPJKlaoqs417qMy
570R5eYOtMeprUIQ63Sg9radeI2b96x0kmFvpGgtEr8vw3oPpXhcdtFcw16n
odkVu35uiqv524u1c7wY1xj53YvVeyBeAwAAAAAgFo54jb85rWMEex/i0+z9
fboyO1EQ57EXI4n3m1tXnPvE6u/1O5jXBKTkmvOaRHJb3I/XWLfZVJvMY2eP
kTl3ifgzgmtLoHjNn52CdSV+9w6aP9/8fsF9jhPHH03fA1NOHfF6qmDYite4
eM/MMUfRNWn7bFcMJk7TZnPcxJxvJ6emS3NNxt+DXloeqPZTU56prQHXW/UC
iNcAAAAAAIiFJ17jf42LE8wxlyDmmu1l5LXxN3VzjCTQZwjW/Fj8fX8X85xc
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
CuWerqi1F6/wM26qq1ZT+YoyWl5RQZU1DdTc7mddRH0ZzcxMp5SkZEpiKSMo
ddJkmltYRo0Wa1WqS4toZm4ezc0roIUlZaZcI6G2RbaOllpaOD2LUlOSd33f
knZ8D3LyiqiyKVCu3vBw9Z7J1N5ExXnTKC11hHJdQ7t/F3k93b+TEhLI4/F2
/97rvsbS1T37fkQpxGsAAAAAAMTwXAoAALIgXgMAAAAAIIbnUgAAkAXxmujQ
9cefdJ/XS88//4L0tgAE8tuWVvrXv/5Fb7zxpvS2AAAA9ASeSwEAQBbEa6JD
zvTp9Je//IV23313WrR4ifT2APgzYcIbyng94IADqK6uXnp7AAAAQoXnUgAA
kAXxmuhw2WWXKfNfduddd0lvD4CV7b930EknneQbr8OGD5feJgAAgFDhuRQA
AGRBvCbyzcsvUOa9++67L+2222609957U2XVauntAhD58KNMZbzuv//+yv8e
cURfatn8m/R2AQAAhALPpQAAIAviNZHvhhtuUOa9jz72GA0Zcp3y708//Yz0
dgEY/fHnf+m8885Txuirr71Gf/vb35R/5/1RstsGAAAQCjyXAgCALIjXRLaf
l6+gPfbYQ8lbU/HrKvru+++V+W+fPn2oaeMm6e0D0JqZm6uMz4MPPpiaWzbT
lCnvK/89YMAA+r2jU3r7AAAAgoXnUgAAkAXxmsh2/wMPKPNdrrWjvnb++ecr
r6WOGSO9fZGAaxGtq6uXinO2yO6HSHD11f9QxuaTTz6l/Hdb+3bq16+/8trH
n3wqvX0AAADBwnMpAADIgnhN5Fq3rs6XA2T+/AW+1zOzpiqvHXfcccp8WHY7
ZeI4yQUXXODLbSsLx9Vk94VsxcUlSn6lPffck6pWr/G9PuqVV5Q+GhgXJ72N
AAAAwcJzKQAAyBIr8RqeP952++3Ut++RNOjvf6cXXniRZs/+hrr++FP3Pp7/
f/b55/TEE0/ShRddRMceeywNGTKEhqekUMmixWG9Ny8OG6bMcy8eONDURo7V
8M/e/+BD6WOI8d6Xb7/9jsa8+irddNNNdNppp1FCQgK9Mno0/fTzct17V1VW
UWLi43Tdddf1+HM7Orvo3//+N+23336u49iZlRH/+U9Y+5vzTWdP+4yefTaJ
Bg++ks444wy69777KCNjsnIv1PdxPhneo3TllVfR5ClTXG0T1y3jMXnrrbfq
Xm9sbFLqevPPvvvu+7D2U/v232n48OHKfqxTTz2VHnzoIcrKmircS1hU9AO9
NHIkXXNNPPXv358uufRSZZxyPxt/TwAAQOxAvAYAAGSJhXgNx1n69eunzBe5
tpJ2XcQjjzyqzGn5fQXzF9C5557r+xnP0Xm9gPrfvG6A1wqEY+7Ge3y4rg5/
7qfZ00w/f+3115WfcW5Xtf0y8GdzHIDzlWj7lWtZaf89a+rHyvvfffc935qh
u++5R/r4jzYc+7jr7rt1fa3WDFP/+6yzzqI1a6tp46Zmuvnmm32vz5kz17V2
rV6zhvbZZx/lc34sLjH9/NFHHzPt63Mb16TiOJX63eUcUGpfnH322bR+/Qbl
fXV19XT7HXf4vuv8XvVaVNdee63S97LvPwAAhB/iNQAAIEtvj9dw3OPkk09W
5mD8t/IN3XOu5OTndHMxzqvBtWz4PZzb94EHH6TFi5coazeWLC2lhx56WBd/
GDVqlOv35a23JiqfdcIJJyjtMP6c5+JqjITXCckYO41NG+nGG2/09cuhhx5K
93m9NGvWbGWf1tSpU+miiy9Wfsb9yj/T9vvbb78jffxHk/yC+XT88cf7+o/X
1Ix8+WVa+Uu5kkOH14AdfsQRys/OOecciouL872X4znadTdO43U+/DmXXX65
8OecK5vHACtb+UtY+uvhhx9R2nT55VfQ4iVL6dvvvle+42qf3HbbbTR/wQJf
LPfvl1xCX371FW1p3UoN6zco+aF4fZ36fv458hQBAMQexGsAAECW3h6veX3s
WGWuxX8/V1/juZs2bqDGPTjeYBX74PrZ2nU3v5RXuHZPOrv+UPYT8WeNnzDB
8n2c05Xfw/uOwj1u1lZX+2o1s8MOP1zYJzy/VWM2RqXLfpI+/qPFJ59m69Z8
cI130bqqoh9+NK0hE+2pc9Km5hblu8OfkzN9huX7eG2NuqbN7f7imBDHZjh+
xfEX9XXeE6VdL8f7tHhdzbBhw5TvnfE8vMdP249vvPGm9LEAAADhhXgNAADI
0pvjNZy7Ql2PsGBhoe/1paXLTPNZnm+K9nGoCot+0L3fe//9rt0Tzp+jton3
dFi9j3PyqPs8+JrCNWZ4nQbvJ9HOe2fPnm35/oWFRbp9ZezII49CThCbuG/3
2msvX99xnMzfWpnHHhtqGt9PPfW0a+0bO26c8hkcCxHFPFQFBfOV9x144IFU
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
e6P+O8dpxo1LowcefFD3Hrfm+b3dO++8q4t9cTxDO1Z5b8/38/KpT58+uv7m
XDNOtYHzuahxON575da1PvLIo8pn8P86cT6Oaxm/1/n5BTR0aKJlf6prk3ic
y773AAAQGRCvAQAAWWIhXsPrErTzMc6dy69va2un0ampdM018XT66acr+TmG
DRtOOdNn0Nrqatf6nNdIqGt3nM6vqsX5S3gez/mMuba2U+flNmdmTVX2ilxy
6aV0zjnnKPlWxo4b56uhw/uDtH3+5ptYqxAqji3yWhset2eddRZdfvkVypqe
T7OzlXtRMH+BKX7G++2c+nz+HD4vf66b18l7E3msci4eJ/Ygffb557p+4e+C
WoOccx7dfPPNytgdGBenxHCmTHmflv30M3V0dkm/5wAAEDkQrwEAAFliIV7D
dWe087ZJk9Kl9jnnk/koM4vKVv7i+mfNmTNXybnKdZPDdX2cw8aYU2bJ0lKp
fd6bvTJ6tKu5a1q3bqOMjMlhqWfN+XicyufEMS1tv3Cde9n3CgAAog/iNQAA
IEtvj9dwnlTjPif+G7rsfu/NeI+Xtr+POqpfWONFsYb3u2n721/trlhy9tln
6/pl9OjR0tsEAADRB/EaAACQpbfHazgXrXbOdvTRR7uW9xZ2ePzxJ3R9ftNN
N0lvU2/FcTA1t4yK11PJbpdsvP+PczFr+4X3jcluFwAARB/EawAAQJbeHq/h
PLfaOdstt9wivc97uwsuuMBQO3mC9Db1VosWL9b1Ned/4Ty7stslG+831PbL
QQcd5MtdAwAAEAzEawAAQJbeHK/hnKV9+x6JvLdhtKqyyrSuobhkkfR29VYv
jxql6+vzzjtPepsiwb333afrl6uv/of0NgEAQHRCvAYAAGTpzfEatQ6T1uIl
S6X3eW9mjB/wXh0nav2AGe/rM9bh4hy7stsVCY4//nhdv7w0cqT0NgEAQHRC
vAYAAGTpzfEarpOjnbNxzSKu2Tsvv4CWli5T6iTL7v9oxzXDFxYW0afZ0+j1
sWPpmGOO0fV5//796amnn6bPv/hC6fONm5qltzlaca6aX1dVKjW/eBwb8wSx
wYOvpFdeGU35BfNjKq/2trZ2ZXx9/MmndNvtt5v65eGHH1H6rWTRYvp5+Qrp
7QUAgOiBeA0AAMjSm+M1xjmb0cUDB0rv/2hWW7uO9t5774D9rJWc/Jz0dker
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
N0bSGdX+PFKulGlOP+MMZzygKSV6PPQEfUybNGkS13HI5dSPg96ZzutW7wC8
+XDX7/Sg+tdNN6V9LtAP5CPp4zJx4iSj50Ssmh5Da+O6SWZBvYYQQogtslWv
wftH/T32mjVrk24Lvgbed7Gx6rfCYwG5Jfo78Xj8icPk9tvvkOdWnsLItVE5
Rq+99lra+nHccce5xg95FtE+j7Ft2bKl65hYdWqi8dzzz7va+nbO3LTOg0Lt
EbHXVD9z9r2PpX/fC72uUaPG1rWsbEHXkEE8vuNPPf2065i2bc9Jm+YLoDNC
78a54Z2On02fPkP+Gx7elZXm43yCwPNAjcnee++dsPY8avRo17jC6yvWMWPG
jPV5cZWWzkzrdcNvHTFwepzikqXL5N8a6OIzZ32Z9rkY44kjNV3fHCDWUj9n
OjyfSWZDvYYQQogtslWvQQyHvp5DTkyybcGv2BtfE813AmtV1PlRn8U6+t0B
A9M+93PmzpPemGBRxWLpc4z+IM4jntj/sOj65JOusevX/62In8W+y1uvKNYx
sdB9i6GbpXO/qwNfGJwf/ZgyZaqz791zzz3FihXVae9P2exvfDrk6tofrIwN
wF70i9JS6d+qgB92OonHwyQZ4HGi5l6BXKJoMVWI4VMxcioGBHWC0j0v2Avr
OqOKGzRZTzwWvXu/5BrL8oWLEjoez2gV76bmIppfLfR35QmugNaZjhhFL2+/
8648PzzvEWcCz2r8G3qgjbko6NrVNS6XXHKJ8XMOHTbMdc6PR4ywdi+SzIB6
DSGEEFtkq16zcNEi13oO9Z2SbcvrewtOOumkwHeIWD8jnkXXal6w4JeiuOqq
q2Q/4LugYlbS/S5y1fer5X4o1noenqb62OksqqhI+vx6DgM8OW3NBUC+Efpx
xRVXOPte1BCz0Rdv3JjX6yjdqH2obeLxAE4UaEFB54oUV7WgfKE4/PDDXdqA
KS0pFtAZVU5W//5vORow9GBb9wp0PX0cY8XsBdHD4900ctSowM9NmjzFV58L
dOjQwcq1Q/tTf5PgVa7qaI8dO85Kf+AfpI9LUc+exs/55FNPuf7GwtfexrWT
zIF6DSGEEFtkq14DdM/he++9L6k2vHHXQNXChrZQs3KV81nEy7dq3dr5HNbR
77w7wOr8T5w02YmdwP9j32UjhgL7PH19jRwlVQsJcRV4X3ryyScH7mnjyVWI
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
qTyqNrKpZpYoHqCN6/b/Lq2JrsetXzxDOybyPBj73pJQoV4Tmd69X5LeKKef
cYb1eSLJM27cePkOFrlQ879bYL0/hBC7QLN5+pln5F6/Xbt21vtDEgPvMqG9
77333jLGxnZ/SOaTvnXpL2JonleTUfvIbWJUvjcnqrUYX5tY+6UDugbrHoG0
Fn2nx4rhMdHmDuaM9scURaNw2Oy4YwIWlCTSdo4oLlsZ2E7Zq569e6s+0Wst
bagSxYW5CV1Xq9zntu/PvTEnG32e1BHx9Clyn2tFkW/f3l5MWxvn/bVhll/7
Kpgc/NmttWJoYU7c90xRAnMbDwnpNaHN2Y7vS3GO9/NdRXWUvvrmC9rQq9Hj
dycWeJ4VeaPT9r0l4UO9JjrlCxex3nM9B/W7S2fOkjG0tvtCCKk7QL9F7Sjb
/SCJg5zWJUuXWu8HyQ7Sti5dO8O3383Xcp5W+2JvmorcAeVxtv9LgN4Tpw4y
KVirMNMm2CYmFsW7l/fsk/MGRt37os/Jtl003R8746uNnRNl3791iShI4rw7
yBHTXNrcRtHXt++PgKdP0fq8fFgX3/EFJfHt06tL/Pv/4sUBcSC1s3w5f3HN
bf7w0Dxm4tZrQp2znWM82jtO7aPoruuC5zlqDfaVotCju7nvXVPfW2IK6jWE
EEIIIYQEk651aUVxnm+/5/IU3jxP5Hr3UK16itVxtL08YC8N2uV2Ea/0HSiK
BwwURQV5vrrhaj8ZuO800CYo8+oJ2jGdC3qKvn37bW+3S8Q8pqa5kfPEpkXU
alqL3PyuoqjoOZGfGyH3qmmemOPJC/FpH1HiNOZ462grHSJHjdf26yrsEiE3
ZYeu8scefaMozo1zn90+hl6j/37tLH/eXe6gOHKifvH3J+jerJ3hb9/pR67I
z+8iOkcc/+33VuHkUOJs4tVrwp0zNQaTfd+JiDrIhoA8yKBng05Niad992dN
fW+JOajXEEIIIYQQEkx61qUBuSh5wz17021ivDfPoWmEGAYX/vftTds/J8pq
A47bXCvGF/n3qO0KZ6ShTdQyHx6opbxSUh6gGfwiKqYPDNRtCkr8+99N5QMD
96mFxbN8HinrK2eJgoB8o9wB81yfi1uv2ez3kcY+emiEPKvV5SWBny9z7dF3
1OTGvePNjSqaWev83uuFG73PATl58dQiC4gN61zs9UxZJ/oG5XC17yqmLfbE
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
443W+6OTk5Mj+/Xqq32s90XnggsudMasvtdF79Wrt7wOaLUmzwMfLKwFWrdu
bf2ak+H6G25w5txGvcJMX5cSQgipu1CvST/QaI455hi57jBZz6JHUZE8B9a2
ps7Rvn17Zw1V+Nxz1sc2XSB3QV33ww8/Yr0/6QC+Ac2bN3euu3fvl6z3KZPo
2LGjM7aPPvaY9f6kyqOPPiavBfssU+dYvGSp9DcHyysrrV9zMkC/V5650LcQ
l2S7TwCxmSqGpVmzZuLXLVut9wnouvERRxxRZ/qVLIgdgY7yt7/9zWjMrfpb
XV//Tk+cNNmZd7wnqa6uSev5M31dSgghpO5CvcYOz7/wguMFYqJ9xLkoj1jU
ZDZxjhmff+HsM7BfypY4E8Q9IP5BrR3h3ZMt9ZZV7VxwwgknWO9PpoA9u4pT
w95tQXm59T6lysJFFXK/j2fDoorFRs7xwAMPyjG75pprrF9vKpxx5pnO9+qh
h/Kt9wfo3jrg/Q8+tN4noOdlPv7EE9b7Ewb//OfF8nqefuYZI+1/XTZbPlf2
2GMPK7lEYYD3BagRZev9UDasSwkhhNRNqNfYYeWq7x3fgmnTZ4Te/sCB78m2
//73vxvLi7/5lluctdPFF7ezPqbp4pVXXnXeObdo0UL+N/Q32/1KB8h/0/dw
X371tfU+ZQJ6Tkzrs86y3p+wuPLKK+U13Xff/aG3DW8V5CSi/XHjxlu/1lR4
5r//deb/yCOPtFYDR4FYJeztZXzU9dfL/z/9jDOsj1Np6UzX86ds9jfW+xQG
ys8d7wE2/rwp9PZvufVW2f6/brrJ+rWmAp4jau7xtzed586GdSkhhJC6CfUa
e6j3l/AICLvtlqefLtt+6umnjfQdMSb77ruvs3Z66aWXrY9nOkDsvcple+21
1+U7Z/z3YYcdJjZt/sV6/0yDfSQ0QDXvXZ980nqf6ju4pw466I94rWe7dbPe
p7AYO3acvCY8K8Kut6xiFOEDZlvfSJUvSktdOsT0GZ9b7Q9yPNGPc889T/qg
7bPPPvLf48eXWO3Xgw8+5IwRcjNtz1tY4BnQtGlTI17u0N5233132fbUadOt
X2sqfDJmjDP/iO0tL1+YtnNny7qUEEJI3YN6jT1UjDJyBhaEuO5ADQjTOd4j
Ro507S+Qz2F7PNMBcstwvY0aN5bvQbHOPvzww+XP+vV/y3r/0gHe0TrvOFu2
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
pme7FJtN98rZKd9d3TxTjK2uEWPHgWoxYUb2vHQbVs4Towb2EUVt/WKv2omi
4l5iYNUk0bTO//q6cSNFReUQMXzEIFGkXV9UNmjT5yMdW3Zl9Ux337hh2UxR
WTFk8+ebGDt7q01l4ZSRomdRR08c2erA7fOz13znXltZ3kuc69POc4t6icqJ
swPta1fMqHHau7nug8WYAH0MlqrXVXjbHKUPM/fHd2Jy1db+daiaFjweb9Oc
q/VcP1gMnzgv4zWr66eJijK1f9tt9g1r21EU9+wjho+bKVYYsINEtddg3o+p
HCC6q3PNMyeKRfnAkWJ6fTr/po1i1pZxk/00fFzmObS2eapn3uO/Jzdntset
njtJuSb9OOT6HBN70F5DTDBj5ldOLnX4MTNmqfXRpWtXZ+/TvXsJz50tM6du
rqP3jNiZjyZMtF4fEg34gRxwwAGOvYYxUPEDbQape/+3v3W3Xh8SjTXffS92
2WUXB/hF2a6PpOXbazY9A3OHpO7BOg5IyQVU21/be7ZN/c5W1ovJFb3TaOT4
7/kGTmxIaedTHQNer9Rlde0Ab3xX+TSnrOGlPntnpd+yty+13ytmLBK1FSXB
6tixj6hdltknRK9D2/KpgcYw/XXR+jBzfywT5Sn79o7BfbLWTBXn6vcuTROD
98MyMbysKPAcKh8xLVZ/j9D2mjUNorIss6a3TtviPmJysz4v1ovKFE3x3qIp
xBxw7EL9M++jxpZqttqSKgPPMbEJ7TXEFPBHnzOnjponrRDEpiEex3Y9yGbg
r/r1nDnMadfKQS7wxsYm6/XIZ/Cc0L+mdTOnrk40L1psvR4qrcFe85//LvLZ
f6fqDqfkdy5Kd8/1YpSPz04Qyjw5xb8TA4PmLVfqou+xu1fUiOH6vtTnuuzt
iyOPejsxfPZ3acdCr0NRlv129uui9WG2/lg4olfK9aXVwfbpTdWp+//KuT5+
IMumiu4R+rhtz5GxacyEstf8ME+URp4XRWLCMm95C6v0fuooxixLV9dV/uOc
MQf7IlGmPfflE1V/rrieY2IT2msIIYQQQgjxp3XYa3A2n+rDMHCG166Qsn9P
c8+FPvtxcG5xL/HUwMGismKwKC8t8dU6dvw0lm1tZ2VxwD1ix/T2mowoPiXZ
2xfMXlNU0kuUlvZKEzuypY1pfFFM2Gui9GHW/lg5NSW2Cvm+s8dErU+tT9u+
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
F9Br5EOxJ+p7/XXXXx9RG/S7N9W41u4RVB9c2jeSpzAdRzEub7/9jm4vSZ4r
onow0fLa67lK+wcffLCicdjdPtUXVms6RaOTaKHcE+08kqalepTQfuyNN98M
1O7hPWEpryxSbw9qm+IX1LbI88ep+43W4nqvl51y6qlSeeXV1xwbo2zo3lRr
fvPP48kpKeyzz78IHPvOO+8q86E9bsGChVL7/3VtnfIc7LzzzoE+Ue6k7HmV
Ba0XfU+qa0T5Tps2NSl/o1pZFCc5ZYe3NP+9QPOYyHFJACQDyfZeCgAAwD1A
r5EP+Veq7/aR1ojKW7LEoB18vKKMjR07NpBfQ34b48aN0x1Hus2XX612ZFxn
nXWWco3Hn3jC8bmj/ZNdbdJv4do667RPI01NW++FrsfHQ5xzzrkRX/PTykpd
W6++9rr0+xJEDu8lRR5OK8rKA8+f+jyqNZdUSMuh+lCy+09cPm1aoF83TJ8u
vT+yWb78fV2tKPKSpti+kaNGBT676KKL2K233qpbU4rNkd13AEB0JNt7KQAA
APcAvUY+xSWlgXd7+m22vqEh7Db4OPzzzpuqfE7+pVdddRUbOXJUIB/j4osv
Zk/6/axq5We6mr12Qv4o9Ns8xYw46VNCv/lTHAPtnZqbW2xrl9qifBTaP1Ns
AY2F6vRcdfXV7KOPipVj6G/aOSevnkiv99jjj+viK37Ygt/j4xnKHdLeG5RT
pN5XV19zTeB5pFpMtMen3L7KqpWOPY+R8GlllfJ9RD68NWvXSu+PG/ju+82K
Pw3p3KTB0fyMHz9e0W+pVhwdc+655+nWnnzFZPcbABAdyfZeCgAAwD1Ar5EP
7dHIE0F9v48kF2LChAm6PQJfx4XyoCgm307P32CQvwPpF9H4J1uFcrlIfyL/
GSfap/yhjq0/6j4jDYrPPyPdLdJrUF0ptZ3LLrssZvcecIYTd9SbN9Py1OeR
cmlk9zUY5KflRK5kIkDfN+0dHbrPKB9SW2+PsFLDHQDgbpLtvRQAAIB7gF7j
DrS1hsh3Npxzv/22OeAzoRLrGsDJBp/vEo13Df1mT3Wb1baKipzXuIBzkN+R
1kOc+Ai12ZMCbawkQc91PNdBAwBsJxnfSwEAALgD6DXugDwrVM2F8g/qG9Zb
PjfnlVd1e4S99trLEX9fMMTMmbN0c045EJG2RfFUajunnnaa9LGB6FB9tu3Q
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
cz+h+pKFRi/X9CLWJ3ssAICIgV7jDh586KHA3iietQctqg4xZcrpjrRPmtAx
xxyjXCMra5H08UYK1QPbZZddAuv/wQcfSu8TSG4onkbVj4kDDzxQydeU3S8A
AJBBMr6XAndQuUBcN8iTvpAVlq9itXV1bDV5zmbPY94UUd0dD6vskD8OAEDk
QK+RT+/PfeyAAw4I7I2e9Pul98kOvvt+s5JPQWNaUVZue/tL8vOVtkeN2pd1
dsV37QLyrlHX/+abb5HeH5DcUDwN3Yt/+tOflPe9eNdEAQAgGpLtvRS4iVbm
F+ow1phf1eaCMQAAogF6jXyWFhQE9upEbd030vtkF9NvvFEZE/mk2d32GWec
qbRNdbFljzNaHnjwwcD677///o56/gAQDIqjoXgauhezs3PYM/PnK/8+9thj
cV8CAJKSZHsvBS6jZz3LSpscplYzmWWVt8rvOwAgaqDXyOeWW/4Z2KtTfSjZ
/bGT6lVfsp133pntuuuutupQ5RWfKPP129/+ltU3rJc+zmgp/XiFTrOj/y27
TyA5oTgaugcp5o9i/yh2Tc2NyluyRHr/AAAg1iTbeylwJ+0NFSzLl2bwINYy
1ZPBsgtWsvZ++f0FANgD9Br5HH300YF9+jXXXiu9P3Zz/vnnK2ObMSPNtjYv
v/xypc0rrrxS+vjsoLunl40YMSJwH/jmzHHsWn39A2zWrPvYtGnTpPLesmXS
5x3oofgZiqOhe/CJf/0r8Pns2T7ls9NPP0N6HwEAINYk23spcDu9rL2tVfm9
UqWxpY119gy4oG8AALuBXiOXpqZvlXpQ6j7dP29eVO199FExmzlzFvv3v59W
/v3DlnbhcVQHu6y8gs2fv4DNuf9+9uZbecr3vRO1id5/v1AZG3nZkKdNtO19
s65eidehefvk08qYrldP789s9Zoa9sabb7HHHnuM5bzyivK/SQPhjyXPHqpf
ZbVt8mVW7wPK9XJqDPUNDUrMkzaeRwZ//vNZMV07GRSXlCra2FNP/Vt5Htt+
2CI8bttP3UrM2IIFQ8/juvqGmNcKUz2h9tprL9beMVQztKW1lQ0bNkz5G31v
yJ5Xt/FzXz+rWbuWvZWXp3wvvPRyNlv15VfK5/yxlVUr2dNPPyO9zwAA6yTT
eykAAAB3Ab1GLur+SGXZsuURtUPxGd4bbjDsiffYYw+2bPlQm5TfQHtHbe0X
Laeedhr7avVq28c56aSTlPapDla0baWl3aq0ddZZZ8dsnb7f3MbuuedexdvY
bN42NTUpx7a0tLKLLroo7D7eeuttunVzsh4P1aB6/vkXpLJhY2PM1i/WkK53
4403Ge6T//u//2MF7w19r9HzSHv3kaNGCe8r8qH+8iv7n0czVE+ou+9ON/zN
SS+qeIXqaM32+djo0aOF6zdx4kRFd6NjNw9+h1A8oPL5pEnS+w4AsE4yvZcC
AABwF9Br5HL/Aw/o3u8p9iGSdq73epXzKbeK6mjTPkG796cYEPKPOenkk5XP
aH9I+sCiwX0zxeNMmDAhEOez55572v4b+iuvvqa0PXr0GCW2J9J2SDdR84be
effdmKwRXWfcuHGB+aR/03w/++xzSv6aqn2R91BJSaniFxzIaxrcy1m9DrWn
vRcqK6uk358gMqZP365tHHXUUdufx8H9uVazodgL2senTJ6sfEb3EOmQ9DxS
PM7xxx8feB7pfv94RZnjfaZnXvWE2ti4yfD3mrVfO+JFFa8UFhaxQw45JLCu
9N1G3wf0HJN2vu+++ymfk3cz+VGpdbaI2267XXr/AQDWSab3UgAAAO4Ceo1c
VB8WVVcZ+OXXsNsoKvpAOf+www5T8iroM9rf8b/Tq7/hX3XVVcpvvXw7F154
YeB4auvHzi7bxkl5Aep+5T//+W/E7Tz8yCNKG1Rn2OlcEWqffjvX5qvdfvsd
hhyH9Rs2BDQbPs9oWRgeLeo6qjz/wovS708QPpT3ROt36KGHBurMq/7Y2udR
3c9Pu+IKYZ6gGqNF0LOz9cdOR/utfhddfc01pseo3xF2elHFI48//jjbZZdd
Autzww3TlRhH7TEtrd+xsWPHCr8XXs9dLH0MAADrJNN7KQAAAHeRbHrNV6vX
KH4qsWBNzdqQ/TnxxBMD7/B/+MMfIhpTamqqcr7WK2Vdfb0wPv/emTNNdQ6K
I9EeO/exx2yd+3nzngrEAEWiS1F+0JgxY5Q2shY97/izkZ6eoZuPtDTzPSrN
PT/XFKeg9QAJBcUsaM+nuCenx5hokDdIrJ7vhvUbhH34y1/+oqzfwoXPBj5r
WL9e+DxSLXqz55HyprTHPvLoo47NG917u+22m6JNfv5FtelxFD+mxvy0fve9
4+tJ+UaxWk/KEbRSr/yhhx/Wrcu1f/+76Rq++trrhjWnOd60qUn6swIAsA70
GgAAALJIJr2GfsOmXB/RvskJfve737Gva+uC9kn9jZ0gv9lwx7T261rl/Z/8
QbXxMMuXv2/oz8033xK0LcrF0h5P8QGR6CpmkHahxvjkv/122OdnZWUp51Kd
YSe9XYj/7qhprEJ5K+Q1YnY8xdxo86AIyj0L55oUi6H9HT5Ral/FCsox0sY8
OA3FVLW3d+j6UPfNOmUN6Xns2Ppj4HM+doogf5tg49m4sVF3/EEHHWRJT4gE
1RPqnHPODXmsmlNphxdVKP5+3XUxW0/ivtmzg/Ynd/Ebuni74447LhDTKIJ0
nCOPPFJ3DcqRk/2sAADCA3oNAAAAWSSTXkN6xo033cROOfVUU8g31g5Iq6F3
84qKT0z7w+/PL7744rDHlDl3rnLuZZddpvuc9h38HoE8UIO1JYoBqF71pa1r
QDEj1G64dYFJNzrmmGOUcx/NzHT0mSB/V8pNU+eA1uhTC14y5C2snbu77ro7
7Gv//ve/D5yfDPWT7GRz2w/KcxCL51vdsze3tOr68PgTTyifX3LJJbrPqT67
9t6gWDo+f4aH12uIlZ99bvu8kY6tekJpvcnNoFweOpZi3aLxorLC4jfeiMl6
qj405Kls1heqS7f33nvr1oN0uFBjuPTSS3XnBLsGAMCdQK8BAAAgi2TSa2IJ
+b+E0mvWr9+ge48nr8pwrzN16vZcKPK41H6urQ1NWPGbUP1Gtbz51lu2zgvl
AahaVnmQueF5+513lHNIzzCriWwHFL9A3iLaOTj33PNCnkfxPuqeV4Vqf4V7
fYodUs8nD+hY37fA2j1CnrsivUbNhVqwYKHuc9LetPfGLbcEj3UjqFY9/zxS
fIfd41Hze8gTysrxWi8q/nsnXiFP6FBaynnnTdWtxckpKSHbpfgaNYdThWp9
yx4vACA8EuG9FAAAQHwCvcYZAnrNJ5+aHkM1m3T5ETcFz48QMXPWLMU/gWIL
1M8ojkjVRMLZ5+XkvGLYH+a88qrtc6PWHQ+nLrBaZ/iOO+50dN1eePElwxzQ
Z6HOK97h66FC+/nvBZ7OVu8bgv4dy3sWWEOr15CnrPZvFNd27bXX6tae4ui0
8VoE+ZqEuo7I+8TuvT7Fx6ieuC++9LLl8/7976eVc8iLyqkcrVhCXl3BvoPz
liwxrAXNQah2yQuIP4+8xWSPFwAQHonwXgoAACA+gV7jDFb0mi+qV+ne40P5
y1iF966hvaUVb1A1V0nL4jfetH1uKN9IrQtMNY1DHU+5SNQX8u+1cnykaHOu
VKj28pYt7SHPJS8P7XknTpwYUR8OP/zwQBvkV+LEOCkWiHJAyMtJJuQ/7dRa
OkkwvUYE711DHjvfNreEPI/PaSReez3X1rGoPtkU1xUqX1ILacKqF9VbeXnS
1yRaQuk1at117XeqFc/gp576t+48er5ljxUAED6J8F4KAAAgPoFe4wxqvkAw
vYb/7dUuvYbf51n1vSWvUX5/WFL6sSPzo9YFJp/TUMdOmzZNOfbKq65ydM0+
/PAjw/jPP/98S+fy3jV33nlXRH2IhV5DfiVHHHGEYayx5t57Zzq6nk4Rrl7D
e9dQTTgr11FzHbXQPWrnOFR9kvKBwj3/vvu2f89E4pPuNlQfMJFeQ55B/DqQ
3mmlXd67hmILZY8VABA+ifBeCgAAID6BXuMMVvQaqi2ufZe/6aZ/2HLt06ZM
0bU76777Qp5DMRd87Szak/5gIbYkEtSYg+HDhwfNG6KaydQP8nelWs1Ortnd
d6cb9mVPPRU6BoTqw9A4tOdR/kQkfdDqNU7mQ239sVOJ8ZBJvObRhKvXnHnm
n8PWqSjWRes9rcblkNZm1zjUHB+qZRXJc/5tc3Mg73JFWbn0dYmGYHoNHztH
PPDgg5buk1Gj9tWdF07OGQDAPSTCeykAAID4BHqNM1jJh+LrZ5MPTbTXpRrC
w4YN07X7wQcfhjyv9OMVhj0J5QA4OUdqXeCHH3nE9Jhbb71NOebss89xfM14
j2aCYqBCnUfzqz1nt912i9gT+cADDwy0Y9X/FcQWypujNbai11DeEOXUae+P
998vDHkN8uLm78WJkybZOg6q0RZNLBhxw/TpSht8fbp4I5heo3pIaykuLgnZ
JunL2nNIc96wcaP0sQIAwicR3ksBAADEJ9BrnIHq9YbSa0hbUesCExQ7H+11
31u2TLdHIJ9Tiv8Idd79Dzxg2JP4/fMcnSPVT3XMmLFKfA//d9I81JpL7y5d
6viaabUSYu999rEUA8Lnu0Sjc9E11XbIYzkW9yoIn913392SXkPajPbeIO2G
NJxQ7ZOGyT+PVCvcrv5TPAy1SZ5Q6zdsjLgdihFUvai+rq2Tvi6RotaHEuk1
f/zjH3XrQDFFVuqYP+n3684jb2bZ4wQAREYivJcCAACIT6DXOMNRRx0VUq8h
9hk50tb9Oe8ZTHWErZxHnhra85yum01o6wJnZS0y/P2RRx9V/kZ1rakurtNr
tvfee0c0d2rtKhVag0iuT5oV5byo7Vx++eWOjxlEhpoHFEqv4b2kKKbFSvuT
TjrJ8DxGUm/MDKrNRu1edfXVUbelelH9858zpK9LpPzrySdN9RrykdKuhVX/
ob/+9a+682655Z/SxwkAiIxEeC8FAAAQn0CvcQbVxzOUXkNahPo+TxpPtNed
fMopuj3CbJ8v5DmU86ON8yHIsyEW86TWT6GxU56J+jn5d6h1hhc9/0JM+sLX
QJ8xIy3kOaLa6cuWLY/o+vX19bp20tMzYjJuED5qfe5Qeo3BS2pWaC+pVV9+
ZXgeKYbLrr5THIzqCVW18rOo21N9usnDqaWlVfraRIJ/3jxTvWb06DG6tbjm
2mtDtkdatDZWjshd/Ib0cQIAIiMR3ksBAADEJ9BrnOG4446zpNeov3MTlPsT
TRzJlvZ2Jb9Bu0coeC/0HNLvvtpzjjzySEvx/nZAOWFqXeB33n038Pnzz7+g
fEY5St09vTHpy5gx+n1ZMF8dFdJmIsl3EUGeGNq2nn32uZjdryA8VG/uYHpN
e8dWg5eU9h43Q/VsUqFaXpHeUyIoDobapXpwdrWpelFZ0YfdCPmKm+k1am6r
SkbGPSHb4/2HKG6u9bvvpY8TABAZifBeCgAAID6BXuMMFAt/wAEHhPSX5H1j
NkThJUF7Qd7z4pt19UHP2djYGPCIIciXo6y8IqZzNXPW9hyu08/YnitCmhV5
PdBnkdQZjpQLLrhAN3cU+xPsePK2oXrfkeRQiVi06HldW1Y8TYEcyAuaYuiC
6SiklfLP49qva4O229T0ra5OG+mv5AVuV7+pvpT6vC8tKLCt3ddez1Xa3G+/
0ayza5v09QmX/LffVmKOnn76GcPfrrjyyrBjD6ddcYXunBNOOEH6GAEAkZMI
76UAAADiE+g1zkAxIVZ+E3/7nXd07/WFhUURX5PyZ/j94bx55vWoSW+YOjVV
d7zTHsMivv22OVBDh2qq0D6S/k1+MlvaO2LWj5ezc3RzQd4jwY6/7bbbDfNN
+luk17/rrrt1v8c76R+0pmat4oUrE6dqxccC0iREHtlaqG43f3+QT4rZ8SL9
74l//cvWfj+amam0S3qTnZ5QvT/3BbyonnvuP9LXJxI2t/0g/Jy0HO2apKXd
GrQdijHi1z2aGlwAAPkkwnspAACA+AR6jVwoRl7rMRsqpiMYak6CFsrxEcXh
097Qe8MNumMpzkXWPNx00z+UPpDHrurfe88998a0D7TnPPbYY3V5YeRDwR9H
3jrTd9Qx5iEvj0ivf9ZZZwfaoZo0To2TPEbIa0TU/1hyySWXSLvfYgHvJaXG
n4g8Xuh5nD79Rt2xdt//dC8fcsghStvPv/Ci7eNVvajs1oJkQ2uj/W6luElR
vmhf/wC7/fY7hPf6kvx86eMAAEROMr2XAgAAcBfQa+RDsfLqe/11118fURsU
i7Hbbrvp9giqDy7tG8lTmI6jfdTbb7+j20tSbIvs38Rr1n6t5COo2hX1adOm
ppj3g3JPtPNImpbqUUL7sTfefDNQu4f3hKU8k1AxF2ZQ21QDSG2L9Cunxkh6
0/VeLzvl1FOl8sqrr0m955yE4sLUmt/883hySgr77PMvAse+8867ynxoj1uw
YKHtfVr8xhsBvSHS+zQY5EWl1rsrKoo8TtCN0HqpMYAE5Tup30/kk05xklN2
eEvz3wv0feJ0rT0AgLMk23spAAAA9wC9Rj7kX6m+20daIypvyRKDdvDxirJA
jSXSQchvY9y4cbrjSLf58qvV0ueAuOyyywL9+sc/bpbWD/otXFtnnfZppKlp
673Qfo2Ph4jGv/XTykpdW6++9rr09QCRw3tJUT2pFWXlgedPfR73339/3XGk
5VB9KCf6RPcnXSNz7lzHxk31r+ga5KMuew3sZvny93W1oshL+vjjjw/4pRMX
XXQRu/XWW3VrSrE5svsOAIiOZHsvBQAA4B6g18inuKQ08G5Pv83WNzSE3QYf
h3/eeVOVz8m/9KqrrmIjR44K5GNcfPHF7Em/X6nlS7H+ssevQjVVaPz0ezTV
HJbZl+bmFiUfhfbPFO+w8847K3V6rrr6avbRR8XKMfQ37Zw/9PDDEV+PfJW1
8RU/bMHv8fHM3Xen6+6Ns88+J3BfXX3NNYHncd9991P2+ORrQ95NTj2P5HNM
9/Bee+3laKwHfd/Q/UuxRfRv2etgN+TXTP40pHOTBkffV+TbQ/ot1YqjY849
9zzd2pOvmOx+AwCiI9neSwEAALgH6DXyoT0a5Sio7/eR5EJMmDBBt0cgX1Ht
3ykPivZpbveVeHJw35qVtUh6P7RQ/hDlemg/I69cPv+MdLdIr0F1pdR2KM5I
9phBdJw4cWJQLU99HimXJhb92fZTt1Kffvn77zt+LXp+ySeZnhvZ6+Ak5HfV
3qH3Q6c8M229PcJKDXcAgLtJtvdSAAAA7gF6jTvQ1hoi39lwzv3222blt3Pt
HsHOGsDACJ/vEo13Df1mT3Wb1bYSzfsj2SC/I62HOPERarMnBdpYSYKe63iu
gwYA2E4yvpcCAABwB9Br3AF5VqiaC/nu1jest3xuziuv6vYIlPOQ6L9ty2bm
zFm6OacciEjbongqtZ1TTztN+thAdLz2eq5tWh6IL8gbiPcjkt0nAED0JON7
KQAAAHcAvcY9XHrppYH3/Ptmz7Z83g1cbenU1FTpY0l01Jrj0XrXUF4M1T9W
vYuiqQcO3AF5ZdvlQw3iC/IigncNAIlHsr6XAgAAkA/0GvewpmZtoAbwqFH7
KjWBrZx36KGHBvWuAfZC+Ut8rebiCPNd3nzrrUAbpNfJHhuInsMPP1x3bzz4
0EPS+wSc58fOLrbnnnvq1p7qfMvuFwAgepL1vRQAAIB8oNe4C4qrUd/1Z1uI
sVm9pka3PyBKSj+WPo5E5pln5uvme/jw4RHlu5Bf6bHHHqu0QTXDZdfEAtFD
a8g/j2o9MZDYvPRytm7dyY/cyVpcAIDYkczvpQAAAOQCvcZddPf0somTJinv
+1Qvlurw8seQNtD0bTN788232AUXXGDYH5IXbt0361jrd98rv/nKHlO8Q15A
69dvYCvKytmrr73OjjzySN18U22vxx57nJUN/p1ib2gNrbQ797HHwtLmgDsJ
PI9vvcUuvPBCw/O4JD8/8Dxu/bFTen+BPZDeunFjIysrr2Cv5y5mxx9/vG7d
R44axTLnPqbo5+F8LwAA3Ecyv5cCAACQC/Qa90F7O3rXp3f+008/g/X1D+j+
LtJozJh00knSxxPP0O/j5N9sdb6JjIx7Qrb75VerFT2Ojj/p5JPhRxvH8J4l
wTjxxBOl9xdET9e2n9h++40O63uBfI1k9xsAEBnJ/l4KAABAHtBr3MkHH3zI
hg0bprzn3ztzZuBz+o2W6kdZ3SNcfc010scSz/B1u62Qk/NK0DYp5kn1GD74
4IPZho0bpY8TRMbPff26WuyhuOLKK6X3GUQPX7fbClQHTna/AQCRgfdSAAAA
soBe416oLjBpM1TnOzd3ceDzj1eUsfffL1Q8bilHp7Kyiq387HP2aWWlEptP
8feFhUVs+fL32Q9b2qWPI56hXKjKqpXss8+/MECfl1d8wko/XqHUdaL5XrZs
Gesf+MW0PaoHdfm0acr+bdy4cYrHtOwxguigZ9DK87hs2XI8jwkCxTxWrfzM
9Huh4pNPA98LdG+8N/i9QN8lsvsNAIgMvJcCAACQBfQad/PCiy8pms2IESPY
J59WSu8PiI5Z992naDVjx45lX61eI70/AAAAAAgO3ksBAADIAnqN+3l36VK2
9957swkTJrCBX36V3h8QGaS37bTTTuyEE05g6+obpPcHAAAAAKHBeykAAABZ
QK+JDzq2/ohaTwlAc0sr6sQAAAAAcQTeSwEAAMgCeg0AAAAAAABi8F4KAABA
FtBrAAAAAAAAEIP3UgAAALKAXgMAAAAAAIAYvJcCAACQBfQaAAAAAAAAxOC9
FAAAgCyg1wAAAAAAACAG76UAAABkAb0GAAAAAAAAMXgvBQAAIAvoNQAAAAAA
AIjBeykAAABZQK8BAAAAAABADN5LAQAAyAJ6DQAAAAAAAGLwXgoAAEAW0GsA
AAAAAAAQg/dSAAAAsoBeAwAAAAAAgBi8lwIAAJAF9BoAAAAAAADE4L0UAACA
LKDXAAAAAAAAIAbvpQAAAGQBvQYAAAAAAAAxeC8FAAAgC+g1AAAAAAAAiMF7
KQAAAFm4Xa8BAAAAAAAAAAAASGbc8n+y5wEAAAAAAAAAAADALbjl/2TPAwAA
AAAAAAAAAIBbcMv/afskO18MAAAAAAAkL3gvBQAAIAvoNQAAAAAAAIjBeykA
AABZQK8BAAAAAABADN5LAQAAyAJ6DQAAAAAAAGLwXgoAAEAW0GsAAAAAAAAQ
g/dSAAAAsoBeAwAAAAAAgBi8lwIAAJAF9BoAAAAAAADE4L0UAACALKDXAAAA
AAAAIAbvpQAAAGQBvQYAAAAAAAAxeC8FAAAgC+g1AAAAAAAAiMF7KQAAAFlA
rwEAAAAAAEAM3ksBAADIAnoNAAAAAAAAYvBeCgAAQBbQawAAAAAAABCD91IA
AACygF4DAAAAAACAGLyXAgAAkAX0GgAAAAAAAMTgvRQAAIAsoNcAAAAAAAAg
Bu+lAAAAZAG9BjhB/8Av7P4HHmCpqans69o66f0BkXPttdeyiy++mG3YuFF6
XwAAAIBYg/dSAAAAsoBeA+ymr3+AXXX11ew3v/kNmzLldLbtp27pfQKR8/gT
Tyhruf/++7PPv6iW3h8AAAAgluC9FAAAgCyg1wA7obia666/XtnfH3HEEaz1
u++l9wlEz80336Ks6X77jWZfrV4jvT8AAABArMB7KQAAAFlArwF28cuv/2PT
p9+o7Ov32GMP9tnnX0jvE7CHnt6flVgpWtuDDjqIbWxslN4nAAAAIBbgvRQA
AIAsoNcAu3jo4YeV/Twxb95T0vsD7IU0mpGjRinrO3HiRPZjZ5f0PgEAAABO
g/dSAAAAsoBeA+ygvKKC7brrrspe/pRTT1XyomT3CdhPds4rAU2O8t5k9wcA
AABwGryXAgAAkAX0GhAtpM2cdPLJyh6eNJvKqpXS+wScY+rU1IBm89rrudL7
AwAAADgJ3ksBAADIAnqNHKiGUiyuQ54yP/f1O3qN559/IeljLnp/7pPeh1hR
verLQCzVmDFj2Oa2H6T3CQAAAHCKZHgvBQAA4E6g18SeTU1NbOzYseyRRx91
/Fqkn5xxxpmsa9tPjrS/9cdOdsABByh799133519s65e+vzGmvsfeIDtvc8+
SeWvfPm0aQGN7u6706X3BwAAAHCKRH8vBQAA4F6g18SeLe0dbM8992Q777wz
+/Kr1Y5dp7CwSNlPk57iVPwHaRXqvn3aFVdIn9tY8933m5W1pPFfedVV0vsT
K0o/XhFY9+HDh7OWllbpfQIAAACcINHfSwEAALgX6DVyuPHGm5S97o033eTY
NS688ELlGvfNnu1I+z9saVfiStR9O+lDsuc11mj1qt/+9rdJFV907LHHBsb+
8COPSO8PAAAA4ATJ8F4KAADAnUCvkQN58u60007s//7v/1hzc4vt7a9eU6PE
7+y2226sYf16R8bg988L7NcPOuigpKsJRfWs99tvdCCGif572223S+9XrJg5
a1Zg/Y855hjp/QEAAACcIBneSwEAALgT6DXymDJlirLX9fl8trdNcTvU9qWX
XupY/48//vjAfn3GjDTp8xlrnn76GWXsRxxxBCsuLlH+TblR329uk963WFBc
UhpYf2LVl19J7xMAAABgN8nyXgoAAMB9QK+RB9VCpn0uxWjY6QdMXiIUt0Nt
FxU5k6O09uta3V49/+23pc9nLKGaW4cffrgy9gULFiqfTZo0SfnfsfCRdgM0
B9p8uGQZNwAAgOQiWd5LAQAAuA/oNfIgD+BDDz1U2es+++xztrU75/77lTYp
/oXqeTvRd9Io1H36LrvskjQxJSqv527X2kaOGhXQ2lT9bdy4ceyn7h7pfYwF
f/nLXwL3wZQppzt6rdbW79i7S5dK5fMvqqXPOQAAgNiSLO+lAAAA3Ecy6TU9
vT+zr1avYc0Wa9nQcV/X1rHOrm2Ozf+/nnxS2eseddRRtvi/kHageqo8/8KL
jvWbakGp+/QjjzwyqrZIU1q3rp6tq69nff0DIY8n35iatV9L1YhSJk9Wxj57
9lAuG8WbHHzwwcrnWVmLpPUtGFva25WaVsGOaf3ue8s630MPPxy4D6iee3vH
Vsf6rvpny+R3v/sda9y0yZHxxeNzAAAAyQD0GgAAALJIFr3mww8/Yvvvv39g
33X00UcrdZP4/eWmpiaWnp6haBDqseTZe8qppyp7cLs9dam2t5pTYkdO0XPP
/Udp68ADD2TdPb2O3Tfjx48PzM/f/va3iNshr+Uzz/xzoK1Ro/Zl13u9rHrV
l7rjaCzz5y9gp59+hlKHST2evGMyMu5hm9t+iNkz89FHxcq1hw0bxppb9F7R
/nnbPZj/9Kc/ORbbFA6kNS4tKGB33nkXmzBhghILRT7XVNvpnnvuVWp8qcd+
29zMbrrpH8r8flG9ylL7Be+9p9Mzli1b7thYFr/xpvIcyoTmx4nnKh6fAwAA
SBag1wAAAJBFMug1uYvfUH77p33qH//4R+U3cnWfQ/seyl0Z+OVXtnDhs+z3
v/+98vnee++txFAccsghynnq8eTfa3e8De2zqG3ar0XTDo2BdChq69HMTMfu
GYo70s5JpPXC12/YGMgHI31pzJgxgTZJw/ryq9XKcWXlFcq6qTWzSXegXC/t
fpX0I6qJFYtn5pJLLlGuSftp/m8dW38M3EOkk8SiP2bQfa+dU6oXRvNI97T6
2XHHHcdaW1vZ2++8E9AN99prLyVWyNIart+g02tQ1zt84vU5AACAZAF6DQAA
AFkkul5Dv1uT9kKxEIuef0H57OXsHN0ek7SNy6dNU/69z8iRyu/XWk1m6dIC
tu+++wWO//t119m6Bhs2blT0JGqb6nxH2g7tudX9tpO/sxcVfaCbv0jzrs4/
//zAfJJmRnk6vJZG8UK0H6W4kFtu+Sfb2NgYOP+bdesUzxT1eNIhKF7JyeeF
fJZ33XVXRa9S99E8d9+drvTn3HPPc7QvZmz7qZvdeONNgXnZY4892M0336Lr
b+7ixYF7mjQb7Z4/nH5TDJHWc/jyyy+XMuZ4hn8OKB/N7c8BAAAkE9BrAAAA
yCLR9Ro1diUt7dbAZ+T5oNUb1FgRyoGq+2adsJ25jz2mO76k9GNb1+Gaa69V
2r7yqqsibuPPfz5LaeO222539J6hOCTt/JF+E24bai1oigfQxnKQdsCvDdW6
WvzGG8J2KJaA4kbU42m9nRw77ZXpOuedN9X0mI2Nm5QcOur7ys8+d7Q/PKQz
kt6izgdpS++8+67w2CX5+bo4KRXyqw7nmtq67pQHFsvxxjvx+hwAAEAyAb0G
AACALBJZr6HcFIqtoX0MxUWon1dWVhn2qOT/8O23zaZtkY+E9njyPrVzHapW
fqbsyeg39A0bGyM+n3QCM83JLlQNTGVNzdqw2yDPGzr3iX/9S/e5NldH9Q6i
ujzB2tJ6De25557shy1bHBk3xT2MGDFCuc77hYVBjyXdzYlYrGBQrMtll12m
mz/yAw52ztlnn2N4Ft5/P/jYeLQ1omj+3eDbEy/E43MAAADJBvQaAAAAskhk
vUatr3xySoru82eema/bC9EePJS/6saNjbpzSFdp+8He/ZC6d6Z8mnDPverq
q5VzPR6P4/eMqkWokI4RzvlbtrQrsQKko2nzOtZv2GCI96D6WaHao/XVnkP5
bk6MW62FZCWGhPLa6FjKw9OO0UmefNKvm4dJJ50U0h/7v//N0p1D/SWdM5zr
ko+Ptg2r9deSnXh9DgAAINmAXgMAAEAWiazXUGwD7Vtm3Xef7nPy2NDuaygm
IVRbn39RbYhDiCQPKBiUt0LtUkxQOHWRGzc1BfxHVpSVO37PaPNt6Hf/cGtm
vfHmm0LdIztH7ytEOhrVYA/VHsVGac+7/fY7bB8z+YqMGzdOaf/FF1+ydM4Z
Z5ypHH/vvTMdXxOqU6/1PCFCxWMQlPukPWfyKaeEfe077rhT14aZrw/QE4/P
AQAAJCPQawAAAMgikfUa1VeD8p/UzyhXQ913qzz11FMh21K1FC1Uf8fOtaC+
qfVfqC601fOo/jidc9qUKTG5Z7S/41PeRbjnz549WznXN2eO7nOqlayd37PO
OjtkW339A0qMgvY88gKye8xUy53aHjt2rKW9M6H6P5OHdbgxK+HC5zUddNBB
lnQ01fNIJRLfE9JDtW3EQjNMBOLxOQAAgGQEeg0AAABZJLJeQ3WX6hsadJ/R
b/+87vLZ51+EbIvyEZzWa4j//Oe/StsHH3ywpZrKqkcPnWPmRWo3VEdYnYOR
o0aFff4PW9oVPyFe91Brkas8+NBDIduidvh1sXufSjqa6v8aTp10qq9+1FFH
7dAE/+3YepDfDD8Hd911d8jzyJuYakdpzzPzJg4G6Q1Oxp2pUM4izb9Mcl55
1bbxxNtzAAAAyQr0GgAAALJIZL1GBF/biOIlrPijXn3NNYb90HvLltnev65t
Pyl9ovbJfyfU8fOeeko5lnIhws1LihRt7ZpRo/a1pc3Gxk0Gz47Sj1eEPO/1
3MWGdaEaTnaOl/KKqN3hw4eHXSf92WefU8497LDDLOlvkXDRRRcZ5oDqDoU6
j6/LTrltpCGEe31erwnXr9gqp502xTBOGVB9OSfG5/bnAAAAkhXoNQAAAGSR
bHrNtCuu0O1prNbP5r0hnNy30e/p1P5JJ58c9DjKgVDryJCHcqzumWjja0RQ
3IJ2bvfeZx/W+3NfyPPuvPMuw7rwtXaiRfXrmTEjLexzSX/bb7/R2+OxBvfU
dq8F6Ue77767bvx0Pbo3Qp3L6yyh7jczeA8cp+JrioqKFA1CJhRnR3FTTozP
7c8BAAAkK9BrAAAAyCKZ9BqKoznggAN0e5oXLHjHNqxfb/jNe/ToMY7Fs7S0
fqfEcii/rZeax0mov6lTjMvWHztjds/Qvl6dh7322suWNm+++Rbd/FKdYyvn
UQ2kSGJLrLLys8+Vtd9ll11Ybd03EbWh6iKnnHqq7WuxJD/fMH7y07Zy7pln
/ll3XiR1yYj7dviwqHy8oixm92Ki4dbnAAAAkhnoNQAAAGSRTHoN1dDh9zTr
6utDnsfXayGuu/56R9dF3bddfPHFpseovr8zZ82K6T2j9balulR2xBscc8wx
uvn997+fDnkO1VOnHB5eR7MSj2CVa//+d6XdSy+9NOI2WlpaA7Wb7N5DP/zI
I4Z708rckXcN709rpZ6UCPLK0baz6suvYno/JhJufQ4AACCZgV4DAABAFsmk
1/DeNYcffril8666+mrDnvjDDz9ydF0o14piOsziOj7+eIXSD9IBNm1qiuk9
w+eUhevpwiPy7LDiAU3+Pvy6WPHZtcrGxkY2bNiwHXFOH0fV1vQbbwwrXsIq
t956m2EOysorQp7HexRTTtWW9o6I+nDD9Om6tjY1fRvT+zFRcOtzAAAAyQ70
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
4gjW+t330vsEoufmm29R1nS//Uazr1avkd4fAAAAIFbY/V7K1+lV9n9h1Bni
2VwuyL9I13rDmus1ym/rafNYcfV6trmtbZBWVltVxDK9ovpTgt/5BT4nhH9J
BWvu0O8bu7vaWGXBQoHfqTFPp3uNwBuWNAFfDqtuaGXd/dtjFPr6t7HGNaXM
L+yvyd74f/bpNdocJ2/mYN82tbHOrm2su2cbax7sl0+43zer9SNap8ksM7uA
lZWXsuIqvWYSWq9xdh7jTa/paxDXY0vPKmXNO2pC9dG61a1k2ZnGZ1R3zpIa
ZY07TXLhVht0lB33i6kuK/AbUq9lojk6+fwBdwG9BtjFL7/+j02ffqOyr99j
jz3YZ59/Ib1PwB56en9WYqVobf9/e3ceHlV1/3G87ktxAXFhqUV+asG1lUqo
gnUl1r1G6m5UlhLrFlyDCxqsEqgsLsEtQQ0qYAWxRAUU0IAaFIIJSYAkJCiB
sEogibb/nF++F+4wd5mZO8lMTmbmfZ7n9ajJvWfuvWemnfPJWY4//ni1pqJC
+zUBANAWIvu91LnXTLBcwZP6pY6/l8v8qkLfvjf+OYD7PuBeuK0DIxy5gb+k
fiolJUUNDLD/uJFzBJiXVRis3pD6qZmVgccZRHZ8TXiG5wWehxb8WQbfTzvQ
PUTrOcZaXuO2FnCrBbj2HQGyoYz8wON53Ns+dJYSrc8f2g/yGkTKk6NGGf15
MXbsOO3Xg8iSjOaozp2N9u3Tp4/asnWb9msCACDaIvm9dKvLeIeBE1u7dkST
Yx2L3X1D8+/y9r/dp6mZ+ZMd698GM2FhsLWQN6s8x/os3gzMmBW0r75sunPd
Wy8ZQ17Q+Sru/fvQ66267JGd5b4/csC+8cRFAee2GGryA5+fYs0GQu8PHt3n
GMm8prVr3Xqus77Ett926GeQU7hZ1S0e66lN9rLv6727LueaRcH/t0HWAQ69
JnL0Pn9oH8hrEAkLFy1S+++/v9GX/9M55xjzonRfEyIvJ3eKL5OTeW+6rwcA
gGiL5PfS4jz7PIt+alqQcSBeufUnB2aaa8tut61vnKaK/ytjAPLVcMdYH6uk
lJFqbrmXuVpNqjAv+L44Vqkqb2GQeR5+tpbPV+kB1hFx3HP6JLVsU+A+sa9O
e984dWqLxtdklzS3XY2H60tKUzOX13q63+qFAbI021gOx3vJdU2c6D1H++un
Znsbp+F89rkRGF8TRns2rlN5GcH3YzLuJ3OqKvY9g+1qZobLOkRJgfdVcqwD
lDRWVQe7j/oiNdxWf0q2twwsmp8/6Edeg9aSbObsvn2NPrxkNgWLWWM8ng0c
mOzLbN56O0/79QAAEE3x/b20SVUvX6TysiepzMzRKiNjtMrMmqTyZs1XxTXe
9ga2qK9VBflTVVbmSJWePkINT01VqSkpKiU5WaWkpKqMzMlqTuGqoLlCoOuU
9VWys0aq1NTm+prrHZ6W1mxE8/VOVjPnLVXVHnKa1gm2f1PzcyyR5zhWZTTf
d7phpMrKnqoKStYFH1Pj+hw3q4ryVap4eZFaVlKiyirXqbr6SNxfe3iO7cPW
miI1M2fS3vbKGKkyJza/PxcWqfXb3M+pKFykZs7KV3Py56sFi4sca8RoF7XP
H3Qir4kdkou0x3Err7zyalyNuWhobJv/n9q5q0H7vbZE4dJvfWOpjjvuOLW+
doP2awIAIFr4XordwttvGwAigbwmNvy0o16deeaZ6txz+xvr+uq+HtPmLVtV
9+7djb77QQcdpFaWlmm/ptb429/+Zjzj2g0bo/o6H8ycqY499li1aNEX2u+5
Ja4bNMiX0d1/f7r26wEAIFr4XordyGsAtD3ymtjw0ksv+/rH//7gA+3XY3rs
8cd91zXob3/Tfj2tdf0NNxj38tDDD0ftNWRczQknnGC8zuzZs7Xfc0vM/+xz
X7t36NBB1dQEW4cQAIDYxfdS7EZeA6Dtkde0fzIHqnfv3r7+8fnnX6D9msSG
jXWqY6dOvuuaMydf+zW11ieffGrcS+fOR0dt/6Mpb75lvMaJJ57YLue3eXXq
qaf62n7UU09pvx4AAKKB76XYjbwGQNsjr2n/3nn3XaNPLHspH3LIIWqfffZR
C9vBPJqsrLG+/vrxxx8f09mDSeaanXHGGcY9jR8/ISqvYa7NPPqZZ7Tfb2vI
GCSz/U855RTt1wMAQDTwvRS7kdcAaHvkNe2f7I8tfeLHHntcDR4yxPj36667
Tvt1/f73v/f114cPT9N+PZEyadILxj2dfPLJEc+gPv10rlH3r3/9a7Xuhx+1
32trzJ0339f+Yum332m/JgAAIo3vpdiNvAZA2yOvad/M/r2Mq/mhuX+/4vti
te+++6oDDjhAlaws1XZdch3+ffUZ77+v/VlFiqyhLGOZ5L7emzYtonVfddVV
Rr2pt9+u/T5ba1dDo2U+3FNPP639mgAAiDS+l2K37So7mbwGQNsir2nfrrzy
SqMvfMedd/p+dtlllxk/u+uuf2i7rokTJ/n66fvtt5/6cX2t9mcVSQ888KBx
b/37D4hYnUUrvjeelcxn++rrb7TfYySY78VIPys369b9YOyrpdPX3xRqf+YA
gLbF91LstlPNnThSDU8fodKbDU8boeaU72wH1wUgniVSXlO/c5f6btlyVe1x
Lxs57vviErV123YtbbNseZHRv5fxNNLXN39ujrk5/PDD1fraDVquTfaCMvvp
v/vd71pVl6wZU1papkrLylRDY1PI42UdYHke0cyIVq9ZY+xPLve3YOGiiNQ5
dOgwo76LL75ES5uJjXV16ocf1wc9RuZped0z/slRo3zvA3ledZui93emyy+/
3DKmSwcZ51ZRWRmV+2uPnwMAAHkNAECfRMlrZN+fbt26+fpdst/SI48+6uhf
VlZVGZm5ZBDmsTL3SNaQyc6e3KZr6g4ZMtR4/b/85TLH7/7whz8Yv3s6M1PL
+0bGgJrP569//WuL66murlF//vP5vrpkX6bbUlNV4dJvLcftqN+pJkyYqAYM
OE8deOCBvuNPOukkNWLEA1HJrW659dbd+5QPGtTquiQjkX2vpb6Zs2a1WTtJ
1iivd++996kzzzzTN75H9naSMUSyx5d57NrqajV48BDj+X5TuNRT/bM+/NCS
Z8ye/VHU7mXqO+8an0Od5PnIezHS99aePwcAkOjIawAAuiRCXpM39R3jb//S
Tz3ttNOMv5Gb/Rzp9/y0o141/fyLsc7skUceafy8Y8eOKqlfP9WjRw/jPPP4
a665pk3G29TUrDPWpJXX/PiTTxy/z53ypvG77t27R6X/GIyMO/J/JpJ7taSe
VavXqBNOOMGo4ze/+Y067rjjfHXKuijffrfMOE7Gt0i7yc+ljyq5g6x17N9f
lfxIxiNF8j5lzpLcp+R1ZeWrWlWXOQ5Frt3r2JVIvO/9n6mM05LnKO9p82en
n366WrdunXr/3//2rUVzxBFHGGvTeGrDVasteQ37eoevvX8OACDRkdcAAHSJ
97xG/m4t2cvBBx+sJr/yqvGzN3JyLX1MGaNy3aBBxr93Ouoo4+/X/pnMzJmz
1NFHH+M7XsZdRLtdHnv8ceO1ZByN2+937mow+nZyzCuvvtam75n8/I8tz6+l
r3/ppZf6nqdkZjIGxZ6lvfjiS0Z/VMaFDBv2d7WmosJ3/srSUmPNFPN4ySE2
1m2K6L1ecslAo+577rm3xXXIvZl98OzJr0S9fbb/tEPdeedg33OR3E/mYpn9
fpE3darvPS2ZjX+fP5z5WpI9+a853B72LYs19s+BzEdrb58DAEhk5DUAAF3i
Pa+ROQLSh0lLu8v3M1nzwT9vMMeKyByoQHsujX7mGcvx8+Z/FrU22bb9J1//
XrKlQMf989lnjWPkb+xtNWZDmPtdmyS/CbcOcy9oGQ/gP5ZDsgN72xx66KFq
6jvvuNYjYwlk3Ih5vLR3JO/VnO8jY0785w6FY/LkV4w6ZD6e9Mej2TaSM0re
Yj6P/fffX/37gw9cj50+Y4ZlnJRp5GOPhfWa/vu6n3HGGW32PowHsfI5AIBE
Rl4DANAlnvOaTZu3GGNrpB8j+0+bPy8oWOzoo8r6D2vXVgesS9aR8D9e1j6N
VpvI39LN/r2skRzoOPkbuqw5HO11Q+zMDMy0vGhF2HXImjdy7rPPPWf5uf9c
HXPtINmXJ1hd/msNyfPYsHFjxO5VcjCZdyJ1Sz4W7vkyz86cwxLtuUJyrdde
e63l+ck8rGDnXHjhRY7Pwn/+Myes1/XfI0qef1tmh7EuVj4HAJDIyGsAALrE
c17z1tt5Rt+lb1KS5efjx0+w9IUOO+ywkOurrllTYTlH5ibUboh8f0jWM5a1
YOU1ZExPqOPvvvse49jk5OQ2e89cf8MNlmch8zfCOX/jxjpjrIDkaP7zOlat
Xu0Y7/HcmDEh65P29T8n2JiklsjeMz5G5p/JPLRwzjXH58h7LNr7+IwZk2V5
Dn88++yQ62O//HK25RyZNyg5ZzivK+vi+tfhdf+1RBdrnwMASFTkNQAAXeI5
rzH393n4kUcsP5c1Nvz7NTImIVRdX39T6BiH0JJ5QKHMeP99v7+Ph55/U75q
tTHnRfp8Xvf0aS3/+Tbyd/9w98x65913XefO5ORa1xWSjCPY+CKTjI3yP08y
rEjer8xhMvcWk3WeW/Kshg9Pi2qbyD71/mueiFDjMYTMffI/p9+f/hT2a8va
Pv51+K+Tg8Bi7XMAAImKvAYAoEs85zXmuhoy/8n8mczV6Nq1q6VfM27cuJB1
yRog9rxG9t+JdHtccMGFe/pad3s+Z9CetZJTU1Pb5D3j/3d8yZXCPf/RRx81
zs0YOdLyc9kr2f/5yrMIVVdDY5MxRsH/vJtuvjni9/zU008bdffp08fzOZLx
yTgJydO+Ly6JapvY5zUdf/zxnnK088+/wHJeS9Y9kTzUv47PFyxsk/dhrIvF
zwEAJCLyGgCALvGc16xes0aVlZdbfiZ/+7fnLrJvc6i6ZD5CtPOaLwsKfP37
0rJyz+ctXPSFcT0yvqKysirq7xlzPRdxVOfOYZ8v44ZkPSH7mIHevXtbnu8T
Tz4Zsi6px94u0einylwmGecg9X/yyaeezrn5lluM42UP+Gi2h6w3Y38G9913
f8jzZG1ic894U6C1iYORvCHa486EjB+Tvdx0Cnd8Vbx9DgAgEZHXAAB0iee8
xo19b6MuXbp4Wh/1xptucvSHPpw9O6LXdsONNxr1pqSkhH3uuf37G+c+9PDD
UX/P+O9d07nz0RGps6Ki0rFmx/zPPg953tt5Ux3tIvsdR+O+ZU6T1O9lremq
tWvVQQcdZBwvewBFsz2uvPJKxzPw8pr2fdllbltL9sCy5zXhrlfs1bnn9nfc
pw6yv1y02jIWPgcAkGjIawAAuiRaXjPob3+z9Glk7Vwv59nXhoh0v03WGDX7
9zJeJtzz35s23ZefbNm6LarvmdaOr3Ej4xb8n23HTp08re177733OdrFvtdO
pMicJnOtoFBt/9BDDxvX8qdzzolqW6yv3eB735iOOeZYY35MqHPtOcvZffu2
6Brsa+BEa3xNfn6+kUHoJOPsZM+vaLVnLHwOACDRkNcAAHRJpLxGxtF0797d
0qd59bXXQ55XvmqV42/exx57XNjr7AZz//3pRr3nnHtui86X/rmZKcn+V9F8
z0i/3nwORxxxRETqHDp0mOX5yj7HXs6TPZBaMrakpWRuk7zG4CFDAh4j84w6
HXWUcdzbeXlRbYvpM2Y47l/W0/Zy7p//fL7lPHkPtuQaHtmzDovps88XRPWe
41msfA4AIJGQ1wAAdEmkvEb20LH3aUrLykKeZ9+vRdx6220Ru66NdZtUx44d
jXrfefe9FtczYcJEo46TTz45olmSnf/atrKveSTGG5xyyimW5/uvfz0f8hzZ
T13m8NhztHD33A6H9IHldWRt1x8C7GNu7hf/f//3f2pXQ2PUrkWMeuopx3vT
y7OTTMm+Pq2X/aTcyFo5/vUs/fa7qN5zPIuVzwEAJBLyGgCALomU19jXrjnx
xBM9nWeuK+PP65qzXozJyjLqlPExXuaxBCLzoDofffSe3OfdqL1n7HPKZE5O
a+pzW7PDyxrQb72d52gXL+vstpbMcZLXevyJJxy/k5ysZ8+exu/HjftX1K/l
rrv+4XgGCxYuCnmefY1imVMluWFLruH2O+6w1FVZtTbq9x2PYu1zAACJgrwG
AKBLIuU19pzhlltvDXmOjEMwx76YWjpnyY38DfyEE04w6n3++fGtru/hh3fv
rdy/f/+ovWfs4ylkb5rW1Gdfs0PW4PEyPkjWZfY/T/bHknWAonXfJpnjJK8n
68Rs/2mH5XfvvjfN+J3Mh6rbtDnq13LHnXdanoGsr7N5y9aQ5z2akRGx97T/
esey31Q013eJZ7H2OQCAREFeAwDQJVHyGlm7plu3bpZ+zYsvvhTyvNffyLGc
I2vNRnJdCLOPJv37SKwTLPsSHXzwwUad8+Z/FpX3jDnfx/Tpp3NbVd+QIUMt
9XnZf2ndDz865vOMGPFA1D8vQuY4yVwnec3s7MmW35ljbx544ME2uRb72BbJ
/rycN2DAeZbzHn7kkRZfQ58//tFXT69evdrkvuNRSz4HNet+0PY5AIBEQV4D
ANAlUfKab79b5pgzULj025Dn9fvTnyznSJ8qks/fXLtX9hOKVJ23paYadXpd
qzRc9rk0kmm1pj7p4/vX99TTT4c85+nmY/zPkblkXsaVRIrMdZLX7d27t288
yaJFXxg/k7xsTUVFm1yHzMnyfw6yd1eoc2S9ExmD4X/eRx/9p8XXcPTRx/jq
ueKKK9qsDeJNLH4OACARkNcAAHRJlLxm4sRJjrymYPGS4M9m6juW40899dSI
9oU+nTvP17+vrKqKWL3fFC411sGQuTElK0sj/p6Rv+n7r7Mh+0K3tK41ayoc
a3bI/tDBzqmurjH2ETePl+e3cFHoNVsiadPmLb49oGbOmmX87NprrzX+W/Ky
troOGUPl/+xkn6Bgx8s4M/M6TTI+o6Vju6rWVlvqevDBh9q0HeJFrH4OACAR
kNcAAHRJlLzGvnaNSL399oDHr1jxvbF+hHms9IuKVqyI6LOXfZelbi/r6IRr
4MBko+5orTtq7h0uvO4f7ca+Zoc4/vjj1bbtP7keX79zl2V/Kunjvvxydpt8
VuxkTJRcw/nnX6DKylep/fbbz5gvJ3lZW12D5C9/+MMffM9D9lcP9OxkLRT7
ftFC5ka19PXtY61k7dto3et/5sxR1w0apIX874eQbDIae37F8ucAAOIdeQ0A
QJdEyGvc1q4RMv7k448/cRxfWlauevTo4Tuua9euavGSryL63GW+jOyFLf0s
L3vAhOvD2bONa5cxINGYHyEZk/l8ZA/iltZjX7PD5JYzyd5ZV199taX9ZC0d
XZ+dysoq37wis+/sZc2RSJs9+yPL2IyxY8c5jpG9n6666irXZy1rD7f0tZ/5
5z8tdZWVl0ftPs8778+u19+W5DkXl6yM+L2F+znwb0vdnwMAiHfkNQAAXRIh
r3Fbu0bmjcg/O3TooG6+5RZjnID8jXvQoEHGGAXzuAsuuDAqa5HIXAep/+KL
L4lKu0pGJWuZyGt4WVc5XK++9rqlv7hhY12L6pH1X/zbxVzPR/rFf/7z+cba
OHPm5Ku7777Ht4+W6N69u9Fmuj8/9vV+3fK/tpCWdpfvGg444AB1zTXXqH9/
8IGxr/tNN9/sm7tl7jXuT55vS19X1kgy65E1mKN5j98XlxjvZZ1mfRid7+rh
fA78s+T28jkAgHhGXgMA0CUR8hr72jXSZ5V5Bn+7/vqAf0eXzGb8+PGe9tMN
l8ynkLkO8jrm2ifRMPmVV43XkP17Il13VdVaY/6P+bxach+r16xxrNkhY40m
TJjo2PPGJPONZB7b+vW12j874rtly33PQfaG0nUdsubxpEkvOPaeN8k+2zKX
Z9r06Zafy3OWPetb8pry2Tj22ON8dd1552Dt7RGL4uFzAADxjLwGAKBLIuQ1
KSkplr6O/3qwM95/X917733GPJu77vqHsT/zF18WBFw3IhKWfvudcR2y95SM
g4nW6/y0o1795je/Mca//PDj+ojXf8655/qeqTzDcM+375V+zDHH+vKxZcuL
VEZGhrF2iIx/GpOVZYwvkH28dX9m7K688krj+mUsi+5rkecz5c23jP3EZYzN
/fenqzdyco18TX4v+3b7P3MZu9HS1/qyYLGlrmhmj/EsXj4HABCvyGsAALrE
e15jHwMgXnn1Ne3PXfZ+bou/ja/4vjhq69/+89lnfc/05JNPDvt8+1yiaO0/
Hm2yPtCChbGxL0///gMszzyjFWvXPDlqlK+e3/72t1FZhzcRxMvnAADiFXkN
AECXeM9rlnz1tWMuwcrSMu3PPR6sWr3aWCvFfK6LvvgyrPNlvRP/dnFbJxeR
I/OezPWRTa1Z+0Tm2Zn1ZI4erf3+YpV9TSE+BwDQvpDXAAB0ife8RuYP2Neu
0f3M48m1117re7ay5q3X82TtWHuOFuk9uGA1d958y/OW7GbL1m0tqkvGbJlr
rhx99DHG/lO67y8W8TkAgPaPvAYAoEu85zWXXXaZpS8ka0DofubxRPqW5nq7
HTt1UnWbNns6T/ba8W+Xzp2Pjsraztjrqaeftjzzc/v3b3Fdd9x5p6+eMWPG
aL+3WPXCCy/yOQCAdo68BgCgSzznNTvqd6rDDz/c0h+S9YR1P/N4I/vUmM/3
6cxMT+dcd911lnaRNXt130e865uUZHnmDz30cIvqkfmEBx98sG/dIlnXWve9
xSo+BwDQ/pHXAAB0iee85tNP5zrmGiwvWqH9mccb2XuqS5cuxvPtdNRRIfeu
kfEDMofGv11k7WLd9xHPCpd+69gzuqX7Of3t+ut9dUybNk37vcUqPgcAEBvI
awAAusRzXtO1a1dLX0j6qzKm4KWXXlZv501Vny9YqP35x4t/f/CB2nfffY3n
fOtttzl+/+P6WpU39R018rHH1FlnneXI0S6//HI1fvwElTvlTfXetGnMCWml
VavXqKnvvKueGzNG3X33PeoPf/iD45nLXlH33HOPysmdovLzP/ZU76wPP/Tl
PtJmuu8z1vA5AIDYQ14DANAlnvMae1/I7o9nn639+ceTRx55xJeLTZ8xw/K7
++9PD9ke/spXrdJ+P7Gsf//+YT3v4447LmSd62s3GPt2y/Hdu3dX1dU12u8z
1vA5AIDYQ14DANAlnvOaww47THXs2FEd1bmzOvLII1WHDh2MdTckT5CxII8/
8YT25x9PZCxAyp71OOSZl6ws9f0uJSXFWJdYnr+0g7SHHCPtI+0kexWZ43PO
7ttX/fzLf7XfTyz70znnGOs/y/q1/mS+mjx785nLfuzyeRgyZGjQ+qQ9rrrq
qt3rSje3WcHiJdrvMRbxOQCA2ENeAwDQJZ7zGjfS/6nfuUtt2/6T9mcfj7b/
tENdfPElRn/z97//vdq8Zavx810NjSH7ng2NTcb+0vRR29bOXQ3Gsw92jMzf
kTaV9bvnzZuv/ZpjFZ8DAIg95DUAAF0SLa9B9ElGc9FFFxv9+2uuuYY1OGLc
Gzm5xpgPyWo+/vgT7dcDAEBb4nspAEAX8hpEg4xhkjk2Z555JntyxbgLL7xI
9fnjH9U3hUu1XwsAAG2N76UAAF3IawAAAAB3fC8FAOhCXgMAAAC443spAEAX
8hoAAADAHd9LAQC6kNcAAAAA7vheCgDQhbwGAAAAcMf3UgCALuQ1AAAAgDu+
lwIAdCGvAQAAANzxvRQAoAt5DQAAAOCO76UAAF3IawAAAAB3fC8FAOhCXgMA
AAC443spAEAX8hoAAADAHd9LAQC6kNcAAAAA7vheCgDQhbwGAAAAcMf3UgCA
LuQ1AAAAgDu+lwIAdCGvAQAAANzxvRQAoEt7z2sAAAAAAAASWXspup8DAAAA
AABAe9Feiu7nAAAAAAAA0F60l+J/TbrniwEAACBx8b0UAKALeQ0AAADgju+l
AABdyGsAAAAAd3wvBQDoQl4DAAAAuON7KQBAF/IaAAAAwB3fSwEAupDXAAAA
AO74XgoA0IW8BgAAAHDH91IAgC7kNQAAAIA7vpcCAHQhrwEAAADc8b0UAKAL
eQ0AAADgju+lAABdyGsAAAAAd3wvBQDoQl4DAAAAuON7KQBAF/IaAAAAwB3f
SwEAupDXAAAAAO74XgoA0IW8BgAAAHDH91IAgC7kNQAAAIA7vpcCAHQhrwEA
AADc8b0UAKALeQ0AAADgju+lAABdyGsAAAAAd3wvBQDoQl4DAAAAuON7KQBA
F/IaAAAAwB3fSwEAupDXAAjlzbfeVhdccGFEXXjhRWHJHD1a+3MAACQevpcC
AHQhrwEQSnJysvrVr36lVbdu3VTTz79ofxYAgMTC91IAgC7kNQBC+eGHH9Vb
b+ept/OmGvKmvuMw9Z13De+8+55Dp06djMxlwoSJjt+Z5wm3es3XXLZsufbn
AABIPHwvBQDoQl6jz7rmPnBbvE5FRaX2e0ViO+6444y8pmRlqfZrAQAgHIny
vRQA0P6Q1+jx2utvqP3331/lTnkzqq/z4ezZ6oADDlDPPz9e+z0jcZHXAABi
VSJ8LwUAtE/kNXp8+ulco//6m9/8RtXv3BW11znrrLOM15ny5lva7xmJi7wG
ABCrEuF7KQCgfSKv0ePnX/6rTjvtNKMPm5ObG5XXyM//2Kj/mGOOVT/tqNd+
z0hc5DUAgFiVCN9LAQDtE3mNPuPG/cvow/7x7LOjUv+VV15p1J+ePkL7vSKx
kdcAAGJVonwvBQC0P+Q1+mzYuFEdccQRRj927tx5Ea17xffFar/99jMUl5Ro
v1ckNjOvKS5Zqf1aAAAIR6J8LwUAtD/kNXoNG/Z3ox97zTXXRLTe4cPTjHov
v/xy7fcIkNcAAGJVIn0vBQC0L+Q1en373TK17777GntFRaovu359rTr88MON
/vGsD+P/GbY3spb0Gzm52sja0jvqd2p/Dv7IawAAsSqRvpcCANqXRMtrtmzd
phYsXGTMFwq1L5P8vmjF96pg8RK17ocfo9YGf/nLX4y+7D/+cXdE6hv9zDNG
faeffrqxrrHu91i0yL1J+3zxZYFaX7sh5PFrq2vUoi++NNZQ2bmrISrXVFW1
1tg/XZ6/TvIe0N0+/shrAACxirwGAKBLIuU1//nPHHVU586+Pm3HTp3UkCFD
1Y/r11uOW160Qt1y663qyCOPtPSBe/furbKzJ6umn3+J+HVJ/bKWzYaNda2q
a1dDozr++OON+l566WXt769oqdu0WV122WW+tpExSuee298xnkj2xRozJsu3
F5dJnnXq7bertWurI3pd8vwffPAhlZycrM3VV1/d7tb1Ja8BAMQq8hoAgC6J
kte8N22aOuigg4x+/dl9+/rW+RXy39u2/6QaGpvUqFGj1MEHH2z8vHv37uri
iy9RvXr1Ms4zj7/+hhtCjs0Jh4wT+f3vf2/U/dyYMa2qa8qUN416jj32OOOe
dL+/omHT5i2qT58+xn127dpVnXrqqb62kbEtH86ebRwn427MnEba9E/nnKMG
DDjPN1dMSI6w5Kuvtd9TvCOvAQDEKvIaAIAuiZDXyFyZzp2PVgceeKCxvof8
TPIb//EWjz3+uLr00kuNf+/WrZt68623jbESZh35H3+iOnbs6Dv+gQcejGg7
TH7lVaPeE044wfK64eqblGTUkzFypPb3VrTcc8+9xj3KWBLJbiTv6tmzp69t
evTooV5/I8fIaCRnGzp0mDFPyTx/Y12duuKKK3zHS3t7mU+FljPzmu+L2asM
ABBbyGsAALokQl7z5KhRRl/x9jvu8P2srKzMdd2Ps846K+AcmREjHvAdJ9mP
rIETqXaQeTsyVkTqzpv6Tovq+Oyzz43zDz300IjP82kvamrWqV//+teqQ4cO
xr+bP5f9text6Z/P2ZWVr7KsMyMZkO57i2fkNQCAWEVeAwDQJd7zGllX1sxB
/Oe9fP1NoaN/L/NqZG+lQHXNmZNvOV724o5kWzzx5JNGvTJvpyXnX3vttcb5
qampUXmvlJaVqzPPPFOdfPLJUSdz0KbPmOG4hsefeGL3Pd5+u+XnF1xwoaVt
ZFyN7JMU7H7kXszjDzvsMLVh40btn8d4RV4DAIhV5DUAAF3iPa/56KP/+LIY
/5+/+OJLlv69rC0s6wwHq+vLgsWWc7p06RLR/Zdq1v1gjB2Ruhcu+iKsc2W8
iOwJvs8++6ivvv4mKu+Vd999t033OJJ1guzXYK5HM3vPGjVCMjn/9Yi8zlfr
33+A5Zzc3CnaP4/xirwGABCryGsAALrEe15z3333G/3EtLS7LD+/8aabLH31
6wYNClmXZAT2TKG0rCyi7XHnnYONegd5uB5/5pousj5yNN8vBQWLjf3QA5Gc
yZ/sn20n6wD7+7LA6qGHHnbNa0r3zGGT+V5bt233/Vxex79NJLPyX68mEP91
ioW8V3R/HuMVeQ0AIFaR1wAAdIn3vOaiiy42+on5+fmWn8uatP599eefHx+y
rpdfznbkNQWLl0S0Pb79bpkxl0fWVlm1eo2nc2Rva3Pv8X9/8IH291RrvfDC
i655zbQ9a0TLftX+P3/2uecsbSJzqUK9hoyLso/JuS1K88iwN6+J5JpPAAC0
BfIaAIAu8Z7XyJq05atWWeYtrSwtdeQu3xQuDVlXevqIqOc1QvY9krplfWMv
x2eNHWscf8opp6imn3/R/p5qrUB5jeyhLv39LVu3WX5+5ZVXWtpk8OAhIV+j
rLzc0ZaRymtkXtWop57SZvQzz6gNG+u0t6M/8hoAQKwirwEA6BLveY2bV159
zdJPl/WIvaxDI3ON7H38aPQ/Z334oVF3p06d1OYtW4Me29DYZOwBLsdPmvSC
9vdTJMh9BFq/xq6x6Wdjr3b/Ngm1zrCY8f77jra8665/tPraS0vd9x1ra7J2
te529EdeAwCIVeQ1AABdEjGvkb2F/Pu2N9x4Y8hzJBfp2KmT5byDDjrI2Ic7
0tcn2dHpp59uvMb48ROCHvvue7vnCB199DGWNV1i2cSJkzznNYuXfGVpk/32
209V++3zHcjDjzziyDhknFJrr13WPn5uzBg1dOgwbWStpurqGu3t6I+8BgAQ
q8hrAAC6JGJec9JJJ1n66TLeJtQ5Bba9ocTZfftGrV1eeull4zVOPPFEYwxJ
oOPO7d/fOO6hhx/W/l6KlAkTJnrOa8aN+5elTc7q08fTawwYcJ6jPed/9rn2
e49X5DUAgFhFXgMA0CXR8ppVq1cb+wf599NlDkuo88aOHefo34987LGotcu2
7T+pY4/d3cedPuN912PM/cUPPvhgVVFZqf29FCnhzIe69tprLW1y7733hTxH
xiHJHlP+58mz3tXQqP3e4xV5DQAgVpHXAAB0SbS8Jic319JPl7VfvJxnrgHs
P++mZGVpVNsmY+RI47XOO+/Prr+//vrrjd/ffMst2t9HkWSOLQqV18i8MTPT
Mr03bVrI+mUPLXv25iXnQcuR1wAAYhV5DQBAl0TLa2TvoHDXrvnhx/XGGBb/
86677rqot83atdXqkEMOMV7vq6+/sfyuorLK2PNbxgpFY48qnbKzJ3vKa2RP
L/82kX3Qvaxdk5qaajlP2rasfJX2+45n5DUAgFhFXgMA0CXR8ppevXpZ+uqy
Vkqoc55/frxjneGiFSvapH3MbOGmm2+2/PyBBx40fn7++Rdofw9F2uRXXvWU
18hazP7tIvuZh6p70+Yt6sgjj7Scd/fd92i/53hHXgMAiFXkNQAAXRIpr1mz
psKxdk2osSn+ezWZHn300TZrHxlXI9d84IEHqqq1a42fyfornfbsVTV9xgzt
76FIe+31NzzlNTLGyb9dbktNDVn3Cy+8YDnnt7/9rdqwsU77Pcc78hoAQKwi
rwEA6JJIeU3ulDcd65bIftDBzjGzA1PfpCRVv3NXm7bRxRdfsicnyjD+29w/
qXfv3kH3jopVq9dUqL/+9a/GesqBjpEcrWvXrpa2SQ2R12zestXIZ8zj999/
f5Wf/7H2+00E5DUAgFhFXgMA0CWR8pphw4Y58pqhQ4cFPF7mPHU66ijfsdLn
LF+1us3b6IOZM43XP6pzZ7Vl6zbffuQyVkT3+0eXb79b5mhLmeckaw25HS/5
jozX8T9+9DPPRPy6mn7+xdhL7M7Bg7UZPjzNNxarvTDzmqIV32u/FgAAwkFe
AwDQJZHyGvu8JiHzjD5fsNBxrKw/26NHD99x3bp1U4VLv9XSRv5zsq644grf
/tMyL0r3+0eXF1540dGWbuv8mO666x++Y2R+2aMZGVG5rrLyctframuPP/GE
9jbyR14DAIhV5DUAAF0SJa9ZW11j7B/k36eV+UTyzw4dOqjBQ4aoL74sUDPe
f9/YH7tjx46+4wYMOE+tqajQ2k4vv5xtufbHHn9c+3tHJ/tYGWlLs32T+vVT
r7+RY+wf9cSTT6ozzjjDMgYnJ3dKVK/tzbfeVpmjR2vz7HPPqY11m7S3kT/y
GgBArCKvAQDokih5zdt5Uy39e+k/yjqzl156acAxCrLP8z+ffVY1NDZpb6ef
dtT71muRfKlm3Q/ar0mn7t27W9pqyptvqVdefU0deuihAdtT9tIqLSvXfu2J
SMaHSdusXVut/VoAAAgHeQ0AQJdEyWv+/vfhlr677C0kP5f1RmT/aJlHc27/
/urGm25SY7Ky1CeffNru9g0a9dRTxrXLvei+Fp2WLS+ytKXMb5K9v8zfydyn
Sy4ZqAYOTFYPPviQypv6jiouWWm0te5rT1QVlZXGelC6rwMAgHCR1wAAdEmU
vOa0006z9PGff3689mcfrh31O439uzdt3qL9WnSyr13Tq1cv7dcEAADiE3kN
AECXRMhrqqrWOtau+errb7Q/e7TMdYMGWdryjjvv1H5NAAAgPkUlr2lcp3Iy
R6qMzNEqc4+M9JEqZ3Fti+vL86svI320mlu5U/uzi1fVC3NVenN7Gc86Y4TK
yluiGtrBdemyo3K+8f41n0dmTmI/DyCSEiGvyZ3ypqV/f/TRx6jGpp+1P3uE
T/bK6tKli6U9X3v9De3XBQAA4lNU8pptS1VKz56qp0OaWlYfmfomFG7W/uzi
VeHEFGu7JU1Sde3gunTZWjjJ+jySE/t5AJGUCHnNnYMHW/r3V111lfbnjpb5
+ptCxzrCpaVl2q8LAADEp6jkNfVLVaprXtNTJWXOj0h95DXhaFIFeWP3jk/K
CD4+aVl2qi2fmKy2ar8HfbYun8zzAKIkEfKaE0880dK/l/2OdT93tMzYseMs
bdmjRw/t1wQAAOJXW+c1Iqdke6vrI68Jx3aVnez9+bnlNYk8noS8BoieeM9r
SlaWOsZjLFi4SPtzR8tcccUVlra84cYbtV8TAACIXzrymp5JY1V1K+sjrwnH
dpWT4v35FefY8prUqQmdT5DXANETz3mN7MvdNynJkdfIGI3Zsz9Si774Uq1k
Lk27V7B4iZo2fbq6/Y471CGHHGJpS9mzW/bMmv/Z50Z7NjQ2ab9eAAAQP9oq
r0my/XdqTkmr6iOvCUd4eY1oqG8yvnc21O9M+LV1yWuA6InnvMae07g5q08f
7W2AwPLzP/bUjqa5c+dpv2YAABA/tIyvMSSrubUtr4+8Jhzh5zXYi7wGiJ5E
z2uGDfu79jZAYE89/bTnrOawww5TGzZu1H7NAAAgfujLa3bPs9nRwvpakjfs
HSsSa+OVm9SO5ms3NTSGf749r8leHsX90Bt3qrpNm9XW+u2qrrZW1W2L7b3X
W5/XtLb92p+G5rbdus3EGCy0XDznNUUrvlelZWVqzZoKVVm11vhnWfN/F5es
VN9+t0x9U7hU7Wpo1N4GCGzL1m3GnlDLlhcZ7Va+apXRlhUVlca/y3y25UUr
jGOqa9Zpv14AABBf2iqvyVm8VGUlOTObzHm1LarPa16ztXKpyskcoQb6Xrvf
7rlZSckqNX20mjavSNW1tP9cv07NzZukhqckq6SkfiolNaX5n8nN/xyhsmct
Uut9e5fvVGXN3/WW7VFcGfraGzatUnP21O2WdQ1MSVVZ2TPUsiB1lc2boXLy
pqpp0yc79kNPyZzc/PMZKq/593n5RZb+9taaIjU3f76aO0/kqwXLPbTRtr3P
wn3NohSVmZOvKrZ5e7Z1JfNVXs7U3dfX/M8F5XvXqF5fskhlN7dpSvMzt8y5
S05RGVm5qtDD8w1HS/Ka1rdfkyre0355e0ybVxI0F9lRs2TvM9vz3Apqgmdl
W8sX+Z2Tq6YtXBX0nmZmj25+7m75az/f+766PvizAfzFc14DAAAAtEZb5TUy
nqPB3u81pKllofp3LclrGmvVtMyU0GN89vQ1s6YvDWuMQMW8yY41eVzrza9q
vpYiNdCSXUwKvN/StiqVl5nq8br35BSpo5v75fYxQ9vVhGSPddiup3BictDf
2y2bNTas68308Kzt1zBwYlHzz6tUdlo/T6+RkjU/YmM+wsprItZ+O1Veiv3Y
kUHX6Xa0m/Hclga9t7kZtueZNsvluJ2qIGdkGPfUT2UvrIrc/54grpHXAAAA
AO7aKq+ZULh7fMQce/9Q+pSZIfY2DTevqV2ihofRX/b1m9NneJjn0qQWTAyv
Pz48a7Q1r0kJ0N9vXKUyWnDdu6WoBZb1gLarbEd/PwDb9Tj28w50vc3PYm6W
10zM9qzTcoNmD/ZrGJg+WqV7zZ/M5z49jDWtg/Cc10S0/f6nKmbZM5JkNSfg
mk+b3ds76F7s61SmbaxM1kL7WKqdama6t4zMLnMecwMQGnkNAAAA4K7t8prN
AX8n8kqCzNsIJ6+pXeSY+7O375qq0tNHqOGpAebsSC6QGXxcRsHEIPlEUrIa
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
VeF/zibb2jPymWgssX42k8Za1i5uqbqaEjUzZ7TrWjcDPbYdEhN5DQAAAOCu
XeU1/3XZ+1r688nJjrkm9vqK7ZmI33odnl63cL6ak5/vU1zrP+Zgu8qxr2ec
Psvjfjguc7Vs/X3Hei49k9XcWm/P2dvcpMjmNY6xTCHWP7FwyeTc+vOxlNdE
v/1Ek5pjG3+WPS/fmuE43pP2cT9pas48672Y86pCfyYWqYp6L/dUojJsGZTX
taKRmMhrAAAAAHftLa+RtVWtecDePmpSUuD63MY4+K/lEVRjkeN6MxfWWo5x
ZBge8yDH2q4u/X3nXuSjPY15cFvzJ/p5jdt+Xh7zif+67E3dLMdlPlUs5TXR
b7/d7PObvLzfC7Ls12YVeJ+zzWqCLXfJct3z2+39Y1+fyDnfDTCR1wAAAADu
2l9e06wm9NqtzvqqHHtuO+aHBFDoyGL890vezS13GZg5P0Td61SW29oetv6+
Yy6XlzkqjSUu99s2eY3bs0jKCPUsdreRff5PoHuNpbwm+u23xya/fcYc7yv3
dWjqCvdmQkmOc9PUsoBjZnY61pPy2gaB1kYG3JDXAAAAAO7aZV7TbFmOPUMJ
XV/ZdPucqGZpuUH7zoV59rksPQPMdXLuqSxSJ853nwu0rUplpwXYA9nW3692
GTeROW9d4OezqUhlBljf1n3tX2deE6zvHSqvCbQfV8b0YPs3Nzn2KxKBxkDF
Ul4T/fbb+x60jD1L8n9/BcgmbfPP/Meo9UybEXROX7HjM5isZoZaO7h2keOz
n5rDvt4IjLwGAAAAcNde8xq3tVhD1+c2xkb6tWlqZmGV2tG457jGnaq6ZJHK
SnXLU5xja0z+YxWs/fcRKm/eElVcXqIKF89XOVkuGVCQ/n5DucucKckysuer
6j17CjXUb2++5iUqJ9Mlk/I/Z3qR2tF87NZG/2t3y1f6qcycWWrBwvlq7mJr
ZhI6r/mf2rHcZY1dyVUyclVh+brmZ717rEdD43ZVsXx+gGcdePxTLOU10W8/
v+cSIMeUNZvdr99t77TgWZmP6/rfPVXW9EWqepM1t9mxrVYVzJrkst6w97ly
SEzkNQAAAIC79pvXBM4EgtW3o3KW6x41e8cXBBjzYvZFg42LaFaYE7y/7Ykj
Q3CuJRvp13Cuv+Mnybq+iJe8xngWweoMqZ+aWRl4rEYs5TVt0X6+93eAbCgj
P/D71r3tveUowd83/VRKSooaGOQzlZpTFPX/DUNsI68BAAAA3EXle+m2cPa9
Cc5tDk2o+hpqFjn2//Ziwjxv6xNXLMwNub6OT2quWlZoy52a++KO9VfrS2z7
NYfOO3Kan0Hd4rHuv0+x9fdr8gPXlRIi23G7XvPY6c71g71ce17QeT+RzWta
u9atpzqj3X4+9n29d9c1x2Xtmr3X77bf+CSP+3hvVnmB5vWFMDBjVquzMsQ/
8hoA0ZaVNVaNfOwx1dj0s/ZrAQAgHNEZX1PkyEuCr8sRvC63fnDI+hpr1cyJ
3sbCDEwbqwpqQqzL4biudWpO9siAY3mSUtJUTv5SY22bBtveVUnps9zXvGlc
p/Iygu/nI1Izp6riTWb/fLuameGSaSU59+SpXjjZPWeyjeVw7I2eNiPoft1b
y+er9ADrsTiedfoktWxT4Gwh0DWkZnsbp+HIJlJzIzC+xl7nVPc6o9x+JkeG
mTRWVYf5eUzJ9pZ/7dakCvOC701llaryFnrcmw0Jj7wGQLR16dJF/epXv1JF
K77Xfi0AAIQj3r+XNmyqUgum56rMjBFqeFrabukjVGbWZDUtf5Eqq21hjuTT
pOpq16mKyqo91qm6bdY8omLWSFtfOXj2sLWmSM3MmaQymq8zXWSMVJkTJ6s5
C4vU+gB7iFcULlIzZ+WrOfnz1YLFRY71RXzqN6uK8lWqeHmRWlZSosrkeutD
5ydenoOsU5OdNVKlpqaolNTUPc9797OeOW9p8zVF4nXav6i2n071taogf6rK
yhxp3Nfw5jZOTWlu6+RklZKSqjIym++xcFXQbA+wI68BEG3HHXcceQ0AICbx
vTT6CrKSWzG2AQDiF3lNbKmqWsucEsQc8hoAQKzie6k3DZX5KjUp2VhfVSQl
j1TF9V7Ode5Z1dK1fAAg3pDXxI7cKW+q/fbbTz2dman9WoBwkNcAAGIV30u9
aaic5Vj7JWth6NzFsRZMzxRVGGBODAAkGvKa2PDzL/9VZ555ptHn7d69u/pp
R732awK8MvOaFd8Xa78WAADCwfdSjxrd9uVJVXPLA69/UzZvknMt1vR81aD7
XgCgnSCviQ0fzJxp9HdN2ZNf0X5NgFfkNQCAWMX3Uu8KJrrv/ZOSPknNWbhU
FZeUqGWybmzOWJWa5LZvTooq2KT/PgCgvSCviQ0XXniR0d/93e9+Z/xTxtrI
mBvd1wV4QV4DAIhVfC8NxzqV5ZrDeDNhcW07uAcAaD/Ia9q/goLFap999lEH
HXSQWllapjoddZTR9531Ic8HsYG8BgAQq/heGqb6VSo7rV+YWU0/lb1wnf5r
B4B2hrym/bvxppuMvu4tt95q/PfDDz9i/PfAgcnarw3wgrwGABCr+F7aMnXl
i1R2RppjDWJ/A1NGqJxZS1Rdo/7rBYD2iLymfVu1erUxrkb6uoVLvzV+Vlm1
Vh144IFq3333Vd8ULtV+jbD69NO56o2cXG2mvPmW2lG/U/tz8EdeAwCIVXwv
ba2dqq52nSorX+VTUVOrttY3tYNrA4D2LdHymi1bt6kFCxcZ/cb6nbuCHiu/
l/2HCxYvUet++FFL+6SnjzD6ueeff4Hl5+aYm9Tbb9f+HtJF1u+R9vniywK1
vnZDyOPXVteoRV98qUpWlqqduxqick1VVWvVAQccYFkbWofRzzyjvX38kdcA
AGIVeQ0AQJdEymv+85856qjOnX192o6dOqkhQ4aqH9evtxy3vGiFMffoyCOP
tPSBe/furbKzJ6umn39pk7ap27TZt1bNvz/4wPK7xUu+Mn5+6KGHqurqGu3v
o7Ymz+ayyy7ztY2MNTr33P6ONX1k3/MxY7LUaaedZmnLI444wsi61q6tjuh1
7WpoVA8++JBKTk7W5uqrrzYyKd1t5I+8BgAQq8hrAAC6JEpe8960aca8IunX
n923r9FfN/vu8t/btv+kGhqb1KhRo9TBBx9s/Lx79+7q4osvUb169TLOM4+/
/oYbQo7NiYR//et54/VOOukk1dj0s+P3/QcMMH7/2OOPa38ftaVNm7eoPn36
GPfetWtXdeqpp/raRsa2fDh7tnGcjLsxcxpp0z+dc44aMOA8dfjhh/uOlxxh
yVdfa7+neEdeAwCIVeQ1AABdEiGvkbkynTsfbaz5Iut7yM8kv/EfbyGZx6WX
Xmr8e7du3dSbb71tjJUw68j/+BPVsWNH3/EPPPBgVNtF8pmTTz7ZeK2JEye5
HjNt+gxf5rD9px3a30tt5e677zHuW8aSSHYj86JkzTqzbXr06KFefyPHyGgk
Zxs6dJgxT8k8f2Ndnbriiit8x0t7e5lPhZYjrwEAxCryGgCALomQ1zw5apTR
V7z9jjt8PysrK3Nd9+Oss84KOEdmxIgHfMdJ9hPNvue7771nvI7Mh9q6bbvr
MZLpmDmFzNPS/V5qCzU169Svf/1r1aFDB+PfzZ9fc801jrb0z+fsZK07/3Vm
7rnnXu33Fs/MvOb74hLt1wIAQDjIawAAusR7XiPrysqcGekr+s97+fqbQkf/
XubVrF9fG7CuOXPyLccPG/b3qLXLeef92dM4nn89v3vO1JlnnmmMM4nme6W0
rNx4HRn3E20yB236jBmOa3j8iSdc11m+4IILLW0j42pkn6Rg9yP3Yh5/2GGH
qQ0bN2r/PMYr8hoAQKwirwEA6BLvec1HH/3Hl8X4//zFF1+y9O9lbWFZZzhY
XV8WFFjO6dKlS1QyEnmdffbZxxgfUllZFfRYmQ9kztOaPfujqL5X3n333Tbd
40jWCbJfg7kezew9a9QIyeT81yPyOl+tf/8BlnNyc6do/zzGK/IaAECsIq8B
AOgS73nNfffdb/QT09Lusvzc3A/bdN2gQSHrkozAnimUlpVFvE1uuvnmgHmF
m/vvTzeO/8tf/hL190tBwWJjP/RAFi76wkL2z7aTdYD9ST7l76GHHna9/9I9
c9hkTyz/OWLyOv5tIlmX/3o1gfivUyzkvaL78xivyGsAALGKvAYAoEu85zUX
XXSx0U/Mz8+3/FzWpPXvqz///PiQdb38crYjrylYvCSi7bGmosK3P5VkF17O
WbV6jbEWi8wB+m7Zcu3vqdZ64YUXXfOaaXvWiJb9qv1//uxzz1naROZShXoN
GRdlH5NzW2qq9nuPV+Q1AIBYRV4DANAl3vMaWZO2fNUqy7yllaWljtzlm8Kl
IetKTx8R9bzGHFtybv/+YZ133XXXGecNHjxE+3uqtQLlNbKHuqzxvGXrNsvP
r7zySkubeHkGZeXljraMVF4j86pGPfWUNqOfeUZt2FinvR39kdcAAGIVeQ0A
QJd4z2vcvPLqa5Z+uqxH7GUdmosvvsTRx4/kHlGSQ8i+41Lvu+9NC+vczxcs
NM4z9k1a94P291VrTJr0guf5YLJHlvnMTKHWGRYz3n/f0ZZ33fWPVl97aan7
vmNt7Yknn9Tejv7MvKa4ZKX2awEAIBzkNQAAXRIxr5G9hfz7tjfceGPIcxoa
m1THTp0s5x100EHqpx31EbuuiRMnGfXKHt3yeuGen9Svn3G+7F+u+30Viefg
Ja9ZvOQrS5vst99+qtpvn+9AHn7kEUfGkTV2bKuvXdY+fm7MGDV06DBtZK2m
6uoa7e3oj7wGABCryGsAALokYl5z0kknWfrpMt4m1Dmyzq69f392374RuyYZ
J9K7d2+j3rHjxrWojrfezjPO79atm9pRv1P7e6ulJkyY6DmvGTfuX5Y2OatP
H0+vMWDAeY72nP/Z59rvPV6R1wAAYhV5DQBAl0TLa1atXm3sH+TfT5c5LKHO
Gzt2nKN/P/KxxyJ2Xeb8HNlXvG7T5hbVsauhUf32t7816nn1tde1v7daKpz5
UNdee62lTe69976Q58jeUrLHlP95xx57nPH8dN97vCKvAQDEKvIaAIAuiZbX
5OTmWvrpJ5xwgqfzkpOTHfNuSlaWRuy6Lrzwoj15w72tqsfcK+mss87S/t5q
qZdeetlTXiNrDknO4t8u700Lve7Pvz/4wJG9ecl50HLkNQCAWEVeAwDQJdHy
Gtk7KNy1a374cb1vj22T7McUqWta8tXXxpif/fffX5WVr2pVXbUbNvr2qbbv
YR4rsrMne8prZE8v/zaR/cy9rF2TmppqOU/atrXPHcGR1wAAYhV5DQBAl0TL
a3r16mXpq8taKaHOef758Y51hotWrIjYNd16221GvTK3JxL1yT5HUt/ll1+u
/f3VEpNfedVTXjN+/ARLu5xyyikh6960eYsx58z/vLvvvkf7Pcc7M6+J5Jg0
AADaAnkNAECXRMpr1qypcKxdU7B4SdBzZM7N6aefbjnn0Ucfjdg1VVWtVYcc
ckhE17uVMQwyX0ssW16k/T0Wrtdef8NTXiNjnPzb5bbU1JB1v/DCC5ZzZL2f
DRvrtN9zvCOvAQDEKvIaAIAuiZTX5E5507FuiewHHewcMzsw9U1KUvU7d0Xs
mmTNYrPeSN7r1VdfbdT7978P1/4eC9fqNRXqr3/9q/qyYHHAYyRH69q1q6Vt
UkPkNZu3bPWtxyxk/ll+/sfa7zcRkNcAAGIVeQ0AQJdEymuGDRvmyGuGDh0W
8HiZ89TpqKN8x0qfs3zV6ohdj+y5LXtvS91T3nwrovf6ySefGvXKWjYbNm7U
/j6LtG+/W+ZoS5nnJGsNuR0v+Y6M1/E/fvQzz0T8upp+/sXYS+zOwYO1GT48
TVWtXau9jfyR1wAAYhV5DQBAl0TKa+zzmsSBBx6oPl+w0HGsrD/bo0cP33GS
qxQu/Tai1/PmW2/75uTs3NUQ8bbt06ePUf+4cf/S/j6LtBdeeNHRluKmm292
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
7Jb/B6cOTwY=
    "], {{0, 1570}, {1132, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJyVVwdUU8kanltSSWiBCEgJvYlSBAJIDS2CgFTBRkhCEkqICUHEji67gmtB
xYJlRVdFFF0LIIsNe1kU7PWhiIqyLhZsqLxJAui657133n/OzP3uP/98f7kz
c+5YZuTFZ6IAAAUZdvG86cFyOW9Ggi58SZIqJCKpUMCV5gtFQjk7A4HKOB3Y
AZ04nkyWg0KrXGm+PD4ihDUhNY1F6gAIQIEhsAIUHl8hC46Li1ZZDz7/Lm+v
AxUhuOKi4vrn+H8VPYFQwQcAiYM4Q6Dg50J8AADciy+T5wNA6IZ66+n5MoiJ
qlwM5DBAiG1UWKTBbBXO0OBotU1iPAfidADINB5PLgJAWxUXq4AvgjzaiyF2
lQokUoibIA7gi3kCiD9BPCI3Nw9iHQeIHTK+4RH9jTNjiJPHEw1hTS5qIYdK
FLIc3oz/sxz/W3JzlIM+rGGjieWR8aqcVXXLzotSYRrEZ6UZMbEQ60N8VSJQ
26vwY7EyMmnA/j1fwYE1A0wAUJqAFxoFsSnEVtKcmOgBfUCmJJwLMaw9mijJ
5yZq5qICeV78AD9aKFSEJQxinlztS2VTqsxOCh7g3CgWcgc5G4vEiSmaONHL
BZLkGIi1Ib6ryE6IGrB5ViTmxAzayJXxqpjhN8dApjw8XmOD2eQqBvPCfMUS
bswAjs4XJ0Zq5mJT+Dx1bEYQZwkVE6IH4xQIQ8M0eWHFQmnSQPxYuSw/JH7A
fqssJ27AHmsS5kSo9FYQtygKEgbn9uTDxabJFwey/LhETWy4QRZvbJwmBtwJ
RAMOCAUsoIQtA+SBLCBp6a7vhm+akXDAA3IgAkLgMqAZnJGiHpHCPgEUgT8h
EgLF0LwQ9agQFED95yGtpncBmerRAvWMbPAY4lwQBXLgu1I9SzrkLRk8ghrJ
P7zzYaw5sKnG/qFj6QzqiGHEUGIkMZzoiJvgAbgfHg37INjccTbuMxjXV3vC
Y0Ir4SHhGqGdcGuqpFj+XeQsMA60wxjDB7LL+DY73A6yeuIhuD/kh9w4EzcB
Lvho6CkYD4S+PaH221iVQxl/reUAF8WVglKGUYIoDt9HoO2k7TnEoqrUt7XQ
xJUxVC3O0Mj3eXC+qZ8APqO+t8R+wvZjZ7Dj2DmsCasHLOwo1oBdxA6r8NDa
eKReG4Pe4tXxZEMeyT/88QZ8qqqmcK1x7XL9NDAG8oWF+arNwsmTzZBLROJ8
VjA8rYUsrpQ/cgTL3dXNBwDV2a85Wl4z1Wc6wjz/VbeACoC/tL+/v+mrLuoj
AAcsAaC2f9XZt8HtLAPg7HK+Ul6g0eGqjgCoQAfuFGNgDs8uB5iRO/ACfiAI
hIGxIBYkglQwBdZZDNepHEwHs8B8UALKwDKwCqwDm8AWsAPsBvtAPWgCx8Fp
cAFcBtfAHbhWOsFz0APegj4EQUgIHWEgxogFYos4I+4IGwlAwpBoJB5JRdIR
ESJFlMgsZAFShpQj65DNSDXyG3IIOY6cQ1qRW8gDpAt5hXxEMZSGGqBmqB06
CmWjwWgUmohORkXoNLQIXYguQdegVegutA49jl5Ar6Ht6HO0FwOYFsbELDEX
jI1xsFgsDcvE5NgcrBSrwKqwWqwRfukrWDvWjX3AiTgDZ+EucL1G4kk4H5+G
z8EX4+vwHXgdfhK/gj/Ae/AvBDrBlOBM8CVwCRMIIsJ0QgmhgrCNcJBwCu6d
TsJbIpHIJNoTveHeSyVmEWcSFxM3EPcQjxFbiR3EXhKJZExyJvmTYkk8Uj6p
hLSWtIt0lNRG6iS9J2uRLcju5HByGllKLiZXkHeSj5DbyE/IfRRdii3FlxJL
EVBmUJZStlIaKZconZQ+qh7VnupPTaRmUedT11Brqaeod6mvtbS0rLR8tMZr
SbTmaa3R2qt1VuuB1geaPs2JxqFNoilpS2jbacdot2iv6XS6HT2InkbPpy+h
V9NP0O/T32sztEdqc7UF2nO1K7XrtNu0X+hQdGx1gnWm6BTpVOjs17mk061L
0bXT5ejydOfoVuoe0r2h26vH0HPTi9XL1Vust1PvnN5TfZK+nX6YvkB/of4W
/RP6HQyMYc3gMPiMBYytjFOMTgOigb0B1yDLoMxgt0GLQY+hvuFow2TDQsNK
w8OG7UyMacfkMnOYS5n7mNeZH4eZDQseJhy2aFjtsLZh74yGGwUZCY1KjfYY
XTP6aMwyDjPONl5uXG98zwQ3cTIZbzLdZKPJKZPu4QbD/Ybzh5cO3zf8tilq
6mQabzrTdIvpRdNeM3OzCDOZ2VqzE2bd5kzzIPMs85XmR8y7LBgWARYSi5UW
Ry2esQxZwawc1hrWSVaPpallpKXScrNli2Wflb1VklWx1R6re9ZUa7Z1pvVK
62brHhsLm3E2s2xqbG7bUmzZtmLb1bZnbN/Z2dul2P1oV2/31N7InmtfZF9j
f9eB7hDoMM2hyuGqI9GR7ZjtuMHxshPq5Okkdqp0uuSMOns5S5w3OLeOIIzw
GSEdUTXihgvNJdilwKXG5cFI5sjokcUj60e+GGUzKm3U8lFnRn1x9XTNcd3q
esdN322sW7Fbo9srdyd3vnul+1UPuke4x1yPBo+Xo51HC0dvHH3Tk+E5zvNH
z2bPz17eXnKvWq8ubxvvdO/13jfYBuw49mL2WR+CT4jPXJ8mnw++Xr75vvt8
//Jz8cv22+n3dIz9GOGYrWM6/K38ef6b/dsDWAHpAb8EtAdaBvICqwIfBlkH
CYK2BT0JdgzOCt4V/CLENUQecjDkHceXM5tzLBQLjQgtDW0J0w9LClsXdj/c
KlwUXhPeE+EZMTPiWCQhMipyeeQNrhmXz63m9oz1Hjt77MkoWlRC1Lqoh9FO
0fLoxnHouLHjVoy7G2MbI42pjwWx3NgVsffi7OOmxf0+njg+bnzl+MfxbvGz
4s8kMBKmJuxMeJsYkrg08U6SQ5IyqTlZJ3lScnXyu5TQlPKU9gmjJsyecCHV
JFWS2pBGSktO25bWOzFs4qqJnZM8J5VMuj7ZfnLh5HNTTKbkTDk8VWcqb+r+
dEJ6SvrO9E+8WF4VrzeDm7E+o4fP4a/mPxcECVYKuoT+wnLhk0z/zPLMpyJ/
0QpRlzhQXCHulnAk6yQvsyKzNmW9y47N3p7dn5OSsyeXnJuee0iqL82Wnswz
zyvMa5U5y0pk7dN8p62a1iOPkm9TIIrJioZ8A/iTfVHpoPxB+aAgoKCy4P30
5On7C/UKpYUXZzjNWDTjSVF40a8z8Zn8mc2zLGfNn/VgdvDszXOQORlzmuda
z104t3NexLwd86nzs+f/UexaXF78ZkHKgsaFZgvnLez4IeKHmhLtEnnJjR/9
ftz0E/6T5KeWRR6L1i76UiooPV/mWlZR9mkxf/H5n91+XvNz/5LMJS1LvZZu
XEZcJl12fXng8h3leuVF5R0rxq2oW8laWbryzaqpq85VjK7YtJq6Wrm6fU30
moa1NmuXrf20TrzuWmVI5Z71pusXrX+3QbChbWPQxtpNZpvKNn38RfLLzc0R
m+uq7KoqthC3FGx5vDV565lf2b9WbzPZVrbt83bp9vYd8TtOVntXV+803bm0
Bq1R1nTtmrTr8u7Q3Q21LrWb9zD3lO0Fe5V7n/2W/tv1fVH7mvez99cesD2w
/iDjYGkdUjejrqdeXN/ekNrQemjsoeZGv8aDv4/8fXuTZVPlYcPDS49Qjyw8
0n+06GjvMdmx7uOi4x3NU5vvnJhw4urJ8SdbTkWdOns6/PSJM8Fnjp71P9t0
zvfcofPs8/UXvC7UXfS8ePAPzz8Otni11F3yvtRw2edyY+uY1iNtgW3Hr4Re
OX2Ve/XCtZhrrdeTrt+8MelG+03Bzae3cm69vF1wu+/OvLuEu6X3dO9V3De9
X/Uvx3/tafdqP/wg9MHFhwkP73TwO54/Ujz61LnwMf1xxROLJ9VP3Z82dYV3
XX428Vnnc9nzvu6SP/X+XP/C4cWBv4L+utgzoafzpfxl/6vFr41fb38z+k1z
b1zv/be5b/velb43fr/jA/vDmY8pH5/0Tf9E+rTms+Pnxi9RX+725/b3y3hy
nvpXAIMNzcwE4NV2AOipADAuw/+HiZq7mVoQzX1SjcB/wpr7m1q8AKiFD9Vv
OOcYAHths5sHuWFT/YInBgHUw2OoDYgi08Ndw0WDNxbC+/7+12YAkBoB+Czv
7+/b0N//eSsM9hYAx6Zp7oQqUd1Bf1FztDEL54Hv5N8Bv34t
      "], "RGB", "XYZ"], 
    Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{380.70703125, Automatic},
  ImageSizeRaw->{1132, 1570},
  PlotRange->{{0, 1132}, {0, 1570}}]], "Input",
 TextAlignment->Center,ExpressionUUID->"2891ee11-992b-47bd-b03c-7f676cefd24f"],

Cell[TextData[StyleBox["This chart is a screenshot from the Wikipedia entry \
\[OpenCurlyDoubleQuote]logic equivalence\[CloseCurlyDoubleQuote]. It is easy \
to add or delete rules in the structure of my functions.",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
  3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
  3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
  3.7716269406201468`*^9, 3.771626949020691*^9}, {3.771627231584917*^9, 
  3.771627332887401*^9}, {3.77162789638834*^9, 3.771627922432719*^9}, {
  3.771768440077969*^9, 3.771768445812234*^9}, {3.771769527934415*^9, 
  3.771769548265087*^9}, {3.771769605515828*^9, 3.771769631341228*^9}, {
  3.771778498156929*^9, 3.771778511562975*^9}, {3.7717786548585587`*^9, 
  3.771778701328609*^9}},
 TextAlignment->Left,ExpressionUUID->"8b081665-e36b-4ebc-83e2-8ec811cc4923"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Identify one potential step of a given pattern and apply it", \
"Subsection",
 CellChangeTimes->{{3.7717708040826*^9, 3.771770924454144*^9}, {
  3.7717710508401337`*^9, 3.7717710514976397`*^9}, {3.771774053591075*^9, 
  3.7717740569791803`*^9}},ExpressionUUID->"1fd2c39a-abaa-465e-8948-\
70a3cd567663"],

Cell[TextData[{
 StyleBox["A potential step on a given expression is written in the form of \
{rule, options, location}. For example, one potential step we can take on the \
expression ",
  FontSize->20],
 Cell[BoxData[
  FormBox[Cell[TextData[StyleBox["p\[And]q\[And]\[Not]p",
    FontSize->20]],ExpressionUUID->"2b9fbc49-1bba-47d4-a347-f0d1ae5f17c3"], 
   TraditionalForm]],ExpressionUUID->"4ab8c2c3-5140-4aa5-ae5a-1c1eb7c2fa8a"],
 StyleBox[" is {\[OpenCurlyDoubleQuote]Negation\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]and\[CloseCurlyDoubleQuote], {1,3}}. We can easily \
find that step by checking if any pairs of terms are negation of each other.",
  
  FontSize->20]
}], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.771778766452106*^9, 
  3.7717788491553307`*^9}, {3.771779073520197*^9, 3.77177910827668*^9}, {
  3.771779218750058*^9, 
  3.771779219353088*^9}},ExpressionUUID->"4ee185a9-1eb6-40d2-b37a-\
3c73aa588eab"],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"findNegation", "[", "opt_", "]"}], "[", "e_", "]"}], ":=", 
   RowBox[{
    RowBox[{"select", "[", 
     RowBox[{
      RowBox[{"pairs", "[", 
       RowBox[{"indices", "[", "e", "]"}], "]"}], ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"e", "\[LeftDoubleBracket]", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
           "\[RightDoubleBracket]"}], "==", 
          RowBox[{"not", "[", 
           RowBox[{"e", "\[LeftDoubleBracket]", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
            "\[RightDoubleBracket]"}], "]"}]}], "||", 
         RowBox[{
          RowBox[{"not", "[", 
           RowBox[{"e", "\[LeftDoubleBracket]", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[RightDoubleBracket]"}], "]"}], "==", 
          RowBox[{"e", "\[LeftDoubleBracket]", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
           "\[RightDoubleBracket]"}]}]}], ")"}], "&"}], ",", "opt"}], "]"}], "//", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<Negation\>\"", ",", 
        RowBox[{"ToString", "[", 
         RowBox[{"e", "\[LeftDoubleBracket]", "0", "\[RightDoubleBracket]"}], 
         "]"}], ",", 
        RowBox[{"{", "#", "}"}]}], "}"}], "&"}], "]"}]}]}],
  FontSize->18]], "Input",
 CellChangeTimes->{{3.771778917770199*^9, 3.771778990020279*^9}},
 TextAlignment->Center,
 CellLabel->
  "In[197]:=",ExpressionUUID->"733f4581-3b4d-4392-ab0e-a3cc7bcf2c7d"],

Cell[TextData[StyleBox["To apply the step according to negation rule, we just \
need to rewrite the term at the location we\[CloseCurlyQuote]ve found:",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.771774820095117*^9, 
  3.771774857392214*^9}, {3.7717792241508617`*^9, 
  3.771779259192889*^9}},ExpressionUUID->"8c0ef332-7cf1-40a9-b7be-\
a4db2fb2c78b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"applyStep", "[", 
   RowBox[{"e_", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Negation\>\"", ",", "\"\<and\>\"", ",", "loc_"}], "}"}]}], 
   "]"}], ":=", " ", 
  RowBox[{"replacePart", "[", 
   RowBox[{"e", ",", 
    RowBox[{
     RowBox[{"Most", "[", "loc", "]"}], "->", " ", "false"}]}], 
   "]"}]}]], "Input",
 TextAlignment->Center,
 FontSize->18,ExpressionUUID->"c13b6a34-8351-4168-8217-14c3139e1008"],

Cell[TextData[StyleBox["Simple rules such as double negation are \
straightforward to pattern match and apply, while rules of distribution or \
absorption are more complicated. The complete implementation of all pattern \
matching and application can be found in the appendix.",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.771774820095117*^9, 
  3.771774857392214*^9}, {3.7717792241508617`*^9, 3.771779259192889*^9}, {
  3.771779305900424*^9, 
  3.771779392491292*^9}},ExpressionUUID->"cb9b797c-382d-4226-8734-\
42f423664288"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Identify all potential steps of a given pattern on the outermost level\
\>", "Subsection",
 CellChangeTimes->{{3.7717708040826*^9, 3.771770853611622*^9}, {
  3.7717708855606737`*^9, 3.771770941585841*^9}, {3.7717710430382223`*^9, 
  3.771771044415433*^9}},ExpressionUUID->"2849c89b-bf8f-4452-a677-\
6edb1cf6043a"],

Cell[TextData[StyleBox["Functions that find potential steps can take in one \
of two options: \[OpenCurlyDoubleQuote]All\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]1\[CloseCurlyDoubleQuote]. With \
\[OpenCurlyDoubleQuote]1\[CloseCurlyDoubleQuote], the function will only \
return the first available potential step:",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.7717747913620157`*^9, 
  3.771774808838552*^9}, {3.771776482332345*^9, 
  3.7717765552625523`*^9}},ExpressionUUID->"b43c6016-25da-499e-8b11-\
e7016e57ebdb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"findAndDistributive", "[", "1", "]"}], "[", 
  RowBox[{"and", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", 
    RowBox[{"or", "[", 
     RowBox[{"c", ",", "d"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771779637704637*^9, 3.771779652579776*^9}},
 TextAlignment->Center,
 FontSize->18,
 CellLabel->
  "In[204]:=",ExpressionUUID->"f6a02896-1cc2-4420-9afa-369878ab32bd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\<\"Distribution\"\>", ",", "and", ",", "1", ",", "4", ",", 
    RowBox[{"{", "}"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.771779653632868*^9},
 TextAlignment->Center,
 FontSize->18,
 CellLabel->
  "Out[204]=",ExpressionUUID->"d38a9318-899b-4971-a75c-7511658ecb1f"]
}, Open  ]],

Cell[TextData[StyleBox["Returning one single step is sufficient for reducing \
an expression to its normal form, but to find the shortest route of \
reduction, we need to examine all potential steps of a given pattern:",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.7717747913620157`*^9, 
  3.771774808838552*^9}, {3.771776482332345*^9, 
  3.771776608020421*^9}},ExpressionUUID->"ce0387d0-29d7-4fcc-ab8f-\
7eb9e62cda2a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"findAndDistributive", "[", "All", "]"}], "[", 
  RowBox[{"and", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", 
    RowBox[{"or", "[", 
     RowBox[{"c", ",", "d"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771779637704637*^9, 3.771779652579776*^9}, {
  3.7717796875130367`*^9, 3.771779688232313*^9}},
 TextAlignment->Center,
 FontSize->18,
 CellLabel->
  "In[205]:=",ExpressionUUID->"3f250cda-b9cd-4bce-9c3b-ec0f02650d14"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"Distribution\"\>", ",", "and", ",", "1", ",", "4", ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Distribution\"\>", ",", "and", ",", "2", ",", "4", ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Distribution\"\>", ",", "and", ",", "3", ",", "4", ",", 
     RowBox[{"{", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771779653632868*^9, 3.771779688720277*^9},
 TextAlignment->Center,
 FontSize->18,
 CellLabel->
  "Out[205]=",ExpressionUUID->"79d14f09-b6dc-4403-8073-0c6bee2dd354"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Identify all potential steps of a given pattern on all levels\
\>", "Subsection",
 CellChangeTimes->{{3.771770897467125*^9, 3.771770908123025*^9}, {
  3.77177094619143*^9, 3.7717709534150047`*^9}, {3.771771046661161*^9, 
  3.77177104837799*^9}},ExpressionUUID->"df097acf-77f5-4ac8-9f5f-\
f4513defe60d"],

Cell[TextData[{
 StyleBox["What should we do if a pattern is buried deep inside? Such as the \
double negation in ",
  FontSize->20],
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"c", "\[And]", 
     RowBox[{"(", 
      RowBox[{"b", "\[Or]", 
       RowBox[{"\[Not]", 
        RowBox[{"(", 
         RowBox[{"\[Not]", "a"}], " ", ")"}]}]}], " ", ")"}]}],
    FontSize->18], TraditionalForm]],ExpressionUUID->
  "5ff757a5-76a1-44c1-91c3-884ef1589dd1"],
 StyleBox[". We do recursion!",
  FontSize->20]
}], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.7717747913620157`*^9, 
  3.771774808838552*^9}, {3.771776482332345*^9, 3.7717765552625523`*^9}, {
  3.7717766200401363`*^9, 3.771776664919306*^9}, {3.77177971256713*^9, 
  3.77177978050379*^9}},ExpressionUUID->"6b7c4906-f929-4837-884a-\
0193937b4280"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"recursion", "[", "opt_", "]"}], "[", "find_", "]"}], "[", "e_", 
   "]"}], ":=", " ", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"find", "[", "opt", "]"}], "[", "e", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Sequence", " ", "@@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Most", "[", "#", "]"}], ",", 
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"Last", "[", "#", "]"}], ",", "i"}], "]"}]}], "]"}], 
         "&"}], "/@", 
        RowBox[{
         RowBox[{
          RowBox[{"recursion", "[", "opt", "]"}], "[", "find", "]"}], "[", 
         RowBox[{"e", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", "e", "]"}], ",", "1"}], "}"}]}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{3.771779877509446*^9},
 FontSize->18,ExpressionUUID->"58902889-162f-4e04-94f0-09941f289980"],

Cell[TextData[StyleBox["We join the potential steps on the outermost level \
with those on each of its sub-terms, sub-sub-terms, sub-sub-sub-terms, etc. \
For each potential step returned from the sub-terms, we update its location \
by appending the index of the sub-term in the entire term.",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.7717747913620157`*^9, 
  3.771774808838552*^9}, {3.771776482332345*^9, 3.7717765552625523`*^9}, {
  3.7717766200401363`*^9, 3.771776664919306*^9}, {3.77177971256713*^9, 
  3.77177978050379*^9}, {3.771779899552162*^9, 3.7717800345907393`*^9}, {
  3.771780089420992*^9, 
  3.7717801027560587`*^9}},ExpressionUUID->"2b86ab62-e8ce-4526-a597-\
1dc9f8c06173"],

Cell[TextData[StyleBox["This recursion handle is a higher-order function that \
can takes in any specific identification functions.",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.7717747913620157`*^9, 
  3.771774808838552*^9}, {3.771776482332345*^9, 3.7717765552625523`*^9}, {
  3.7717766200401363`*^9, 3.771776664919306*^9}, {3.77177971256713*^9, 
  3.77177978050379*^9}, {3.771779899552162*^9, 3.7717800345907393`*^9}, {
  3.771780089420992*^9, 3.771780154657267*^9}, {3.7717801903660316`*^9, 
  3.771780243014941*^9}},ExpressionUUID->"a385258b-3e3e-4318-846a-\
b08fba9cbe9f"]
}, Closed]],

Cell[CellGroupData[{

Cell["Reduce an expression to normal form", "Subsection",
 CellChangeTimes->{{3.771770897467125*^9, 3.771770908123025*^9}, {
  3.77177094619143*^9, 
  3.7717709808673267`*^9}},ExpressionUUID->"383e3340-d378-4892-9d3e-\
9bb140655cd9"],

Cell[TextData[StyleBox["Now we have all the tools we need to reduce \
expressions to normal forms. On my top level function, there are three \
options for normal form: Conjunctive Normal Form (\[OpenCurlyDoubleQuote]CNF\
\[CloseCurlyDoubleQuote]), Disjunctive Normal Form \
(\[OpenCurlyDoubleQuote]DNF\[CloseCurlyDoubleQuote]), and all possible \
reductions (\[OpenCurlyDoubleQuote]full\[CloseCurlyDoubleQuote]). The third \
option is for find shortest proof.",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.7717747913620157`*^9, 
  3.771774808838552*^9}, {3.771776482332345*^9, 3.7717765552625523`*^9}, {
  3.7717766200401363`*^9, 3.771776664919306*^9}, {3.77177971256713*^9, 
  3.77177978050379*^9}, {3.771779899552162*^9, 3.7717800345907393`*^9}, {
  3.771780089420992*^9, 3.7717801027560587`*^9}, {3.771780268830884*^9, 
  3.7717802847227297`*^9}, {3.771853148142755*^9, 3.771853273660379*^9}, {
  3.771853315832003*^9, 
  3.771853318994651*^9}},ExpressionUUID->"8908f561-2ec6-4e8b-ae3f-\
509be7f2e9cf"],

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{"CNF", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
     "findDoubleNegation", ",", "findLiteral", ",", "findDeMorgan", ",", " ", 
      "findAssociative", ",", "findIdempotent", ",", " ", 
      "findOrDistributive", ",", "findNegation", ",", "findAbsorption"}], 
     "}"}]}], ";"}],
  FontSize->14], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{"DNF", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
     "findDoubleNegation", ",", "findLiteral", ",", "findDeMorgan", ",", " ", 
      "findAssociative", ",", "findIdempotent", ",", " ", 
      "findAndDistributive", ",", "findNegation", ",", "findAbsorption"}], 
     "}"}]}], ";"}],
  FontSize->14], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{"full", " ", "=", " ", 
    RowBox[{"Union", "[", 
     RowBox[{"CNF", ",", "DNF"}], "]"}]}], ";"}],
  FontSize->14], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"findPotentialStep", "[", "seq_", "]"}], "[", "1", "]"}], "[", 
    "e_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "result", "}"}], ",", 
     RowBox[{
      RowBox[{"SelectFirst", "[", 
       RowBox[{"seq", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"result", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"recursion", "[", "1", "]"}], "[", "#", "]"}], "[", "e",
              "]"}]}], ")"}], "=!=", 
          RowBox[{"{", "}"}]}], "&"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ";", 
      RowBox[{"first", "[", "result", "]"}]}]}], "]"}]}],
  FontSize->14], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"findPotentialStep", "[", "seq_", "]"}], "[", "All", "]"}], "[", 
    "e_", "]"}], " ", ":=", 
   RowBox[{"Join", "@@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"recursion", "[", "All", "]"}], "[", "find", "]"}], "[", "e", 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"find", ",", "seq"}], "}"}]}], "]"}]}]}],
  FontSize->14]}], "Input",ExpressionUUID->"4090739c-e6cc-48df-8113-\
55a0b41e7544"],

Cell[TextData[StyleBox["Recursively, we look for potential steps and apply \
them:",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.7717747913620157`*^9, 
  3.771774808838552*^9}, {3.771776482332345*^9, 3.7717765552625523`*^9}, {
  3.7717766200401363`*^9, 3.771776664919306*^9}, {3.77177971256713*^9, 
  3.77177978050379*^9}, {3.771779899552162*^9, 3.7717800345907393`*^9}, {
  3.771780089420992*^9, 3.7717801027560587`*^9}, {3.771780268830884*^9, 
  3.7717802847227297`*^9}, {3.771853148142755*^9, 3.771853273660379*^9}, {
  3.771853315832003*^9, 3.771853318994651*^9}, {3.771853462923565*^9, 
  3.7718534708806*^9}, {3.771853620606056*^9, 3.7718536349237757`*^9}, {
  3.771858558041595*^9, 
  3.771858566544694*^9}},ExpressionUUID->"ab4d24fc-4498-4f1b-93bf-\
0a866c6383dd"],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"reduceList", "[", "seq_", "]"}], "[", "e_", "]"}], ":=", "\n", 
   RowBox[{"NestWhileList", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"trans", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"findPotentialStep", "[", "seq", "]"}], "[", "1", "]"}], 
           "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"applyStep", "[", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", "trans"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", "trans"}], "}"}]}], "]"}], 
      "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"e", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<Initial\>\"", ",", 
         RowBox[{"{", "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "=!=", 
       RowBox[{"{", "}"}]}], "&"}]}], "]"}]}],
  FontSize->18]], "Input",
 TextAlignment->Center,ExpressionUUID->"8a85accc-ff9e-4ff6-ad63-5d299ab96651"],

Cell[TextData[StyleBox["Boom! Now we have the reductions:",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.771589144306993*^9, 3.7715892400540648`*^9}, {
  3.7716273423136683`*^9, 3.771627402967764*^9}, {3.771627819559403*^9, 
  3.771627859684973*^9}, {3.771774575024519*^9, 3.771774611224372*^9}, {
  3.771774642784746*^9, 3.771774651429163*^9}, {3.7717747913620157`*^9, 
  3.771774808838552*^9}, {3.771776482332345*^9, 3.7717765552625523`*^9}, {
  3.7717766200401363`*^9, 3.771776664919306*^9}, {3.77177971256713*^9, 
  3.77177978050379*^9}, {3.771779899552162*^9, 3.7717800345907393`*^9}, {
  3.771780089420992*^9, 3.7717801027560587`*^9}, {3.771780268830884*^9, 
  3.7717802847227297`*^9}, {3.771853148142755*^9, 3.771853273660379*^9}, {
  3.771853315832003*^9, 3.771853318994651*^9}, {3.771853462923565*^9, 
  3.7718534708806*^9}},ExpressionUUID->"8e67d28b-a8db-479f-8b01-bee9d94824af"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"reduceList", "[", "CNF", "]"}], "[", 
    RowBox[{"or", "[", 
     RowBox[{
      RowBox[{"and", "[", 
       RowBox[{"a", ",", 
        RowBox[{"not", "[", "b", "]"}]}], "]"}], ",", 
      RowBox[{"and", "[", 
       RowBox[{
        RowBox[{"not", "[", "b", "]"}], ",", "c"}], "]"}]}], "]"}], "]"}], "//",
    "generateProofNotebook"}],
  FontSize->18]], "Input",
 CellChangeTimes->{{3.771853574177031*^9, 3.7718535760007553`*^9}, {
  3.771858634162128*^9, 3.771858634301749*^9}},
 TextAlignment->Center,
 CellLabel->
  "In[209]:=",ExpressionUUID->"cf4a5e1f-ba1d-427d-b896-964b3eec890b"],

Cell[BoxData[
 InterpretationBox[
  PanelBox[GridBox[{
     {
      TooltipBox[
       ButtonBox[
        StyleBox[
         DynamicBox[FEPrivate`FrontEndResource[
          "FEBitmaps", "ManipulatePasteIcon"],
          ImageSizeCache->{13., {4., 9.}}],
         DynamicUpdating->True],
        Appearance->{Automatic, None, "Normal", Automatic},
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookPut[
            Notebook[{
              Cell["We want to reduce the expression:"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"a", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                  RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
              Cell["By Distributive rule, we can expand the terms"], 
              Cell[
               BoxData[
                RowBox[{
                  FrameBox[
                   RowBox[{"a", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], StripOnInput -> False], 
                  "\[Or]", 
                  FrameBox[
                   RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], StripOnInput -> False]}]],
                "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], ")"}], "\[And]", 
                  
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
              Cell["By Distributive rule, we can expand the terms"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    FrameBox["a", StripOnInput -> False], "\[Or]", 
                    FrameBox[
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], StripOnInput -> False]}], 
                    ")"}]}]], "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"a", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], ")"}], "\[And]", 
                  
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
              Cell["By Associative rule, we can flatten the term"], 
              Cell[
               BoxData[
                FrameBox[
                 RowBox[{
                   FrameBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{"a", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], StripOnInput -> 
                    False], "\[And]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], StripOnInput -> 
                 False]], "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
              Cell["By Distributive rule, we can expand the terms"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    FrameBox[
                    RowBox[{"c", "\[And]", 
                    RowBox[{"\[Not]", "b", " "}]}], StripOnInput -> False], 
                    "\[Or]", 
                    FrameBox[
                    RowBox[{"\[Not]", "b", " "}], StripOnInput -> False]}], 
                    ")"}]}]], "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "b", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], ")"}], "\[And]", 
                  
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
              Cell["By Associative rule, we can flatten the term"], 
              Cell[
               BoxData[
                FrameBox[
                 RowBox[{
                   FrameBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "b", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], StripOnInput -> 
                    False], "\[And]", 
                   RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                   RowBox[{"(", 
                    RowBox[{"a", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}], StripOnInput -> 
                 False]], "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "b", " "}], "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
              Cell["By Idempotent rule, we can remove one of the duplicates"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{
                    FrameBox[
                    RowBox[{"\[Not]", "b", " "}], StripOnInput -> False], 
                    "\[Or]", 
                    FrameBox[
                    RowBox[{"\[Not]", "b", " "}], StripOnInput -> False]}], 
                    ")"}]}]], "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"\[Not]", "b", " "}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
              Cell["By Absorption rule, we can reduce the term"], 
              Cell[
               BoxData[
                RowBox[{
                  FrameBox[
                   RowBox[{"\[Not]", "b", " "}], StripOnInput -> False], 
                  "\[And]", 
                  FrameBox[
                   RowBox[{"a", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], StripOnInput -> False], 
                  "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"\[Not]", "b", " "}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], ")"}]}]], "Input"], 
              Cell["By Absorption rule, we can reduce the term"], 
              Cell[
               BoxData[
                RowBox[{
                  FrameBox[
                   RowBox[{"\[Not]", "b", " "}], StripOnInput -> False], 
                  "\[And]", 
                  FrameBox[
                   RowBox[{"c", "\[Or]", 
                    RowBox[{"\[Not]", "b", " "}]}], StripOnInput -> False], 
                  "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}]}]], "Input"], 
              Cell["Then we get "], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"\[Not]", "b", " "}], "\[And]", 
                  RowBox[{"(", 
                    RowBox[{"a", "\[Or]", "c"}], ")"}]}]], "Input"]}]]}],
        DefaultBaseStyle->{},
        Evaluator->None,
        Method->"Queued"],
       DynamicBox[
        ToBoxes[
         FEPrivate`FrontEndResource["FEStrings", "NotebookInNewWindow"]]]]},
     {
      ItemBox[GridBox[{
         {Cell[
          "We want to reduce the expression:",ExpressionUUID->
           "8b287c40-7327-439f-b7c7-2cd16e3bd0d0"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"a", "\[And]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[Or]", 
            RowBox[{"(", 
             RowBox[{"c", "\[And]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"e8cc44c6-6996-457f-8bc8-b5efc7deab2f"]},
         {Cell[
          "By Distributive rule, we can expand the terms",ExpressionUUID->
           "7777cfe6-27b5-4ec7-9e8f-6f84a9c8dfee"]},
         {Cell[BoxData[
           RowBox[{
            FrameBox[
             RowBox[{"a", "\[And]", 
              RowBox[{"\[Not]", "b", " "}]}],
             StripOnInput->False], "\[Or]", 
            FrameBox[
             RowBox[{"c", "\[And]", 
              RowBox[{"\[Not]", "b", " "}]}],
             StripOnInput->False]}]], "Input",ExpressionUUID->
           "07fd72e8-ffb8-464c-acf3-66c04a4b729a"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "34690cd5-9402-49b5-b472-5435d8901f4c"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", 
              RowBox[{"(", 
               RowBox[{"c", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}]}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"c", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"b16df25d-1987-4a59-a415-42e42ff30b96"]},
         {Cell[
          "By Distributive rule, we can expand the terms",ExpressionUUID->
           "cfd2496a-66d2-4743-94f6-918394a0b52c"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"c", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              FrameBox["a",
               StripOnInput->False], "\[Or]", 
              FrameBox[
               RowBox[{"c", "\[And]", 
                RowBox[{"\[Not]", "b", " "}]}],
               StripOnInput->False]}], ")"}]}]], "Input",ExpressionUUID->
           "839e8081-0f72-40f6-ae53-3ba2b5c42c98"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "d6ad45cc-f1cf-4e31-9b86-5da9d6e22e1c"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
              RowBox[{"(", 
               RowBox[{"a", "\[Or]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}]}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"c", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"0e03a6f7-b39f-447d-a3ed-a2bfc3973434"]},
         {Cell[
          "By Associative rule, we can flatten the term",ExpressionUUID->
           "c0a51881-b8c3-4571-b65c-191484c04a7d"]},
         {Cell[BoxData[
           FrameBox[
            RowBox[{
             FrameBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
               RowBox[{"(", 
                RowBox[{"a", "\[Or]", 
                 RowBox[{"\[Not]", "b"}]}], " ", ")"}]}],
              StripOnInput->False], "\[And]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"c", "\[And]", 
                 RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[Or]", 
               RowBox[{"\[Not]", "b"}]}], " ", ")"}]}],
            StripOnInput->False]], "Input",ExpressionUUID->
           "e4873cbc-1c27-4f76-ac53-324fc02cf4ed"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "56a1b809-d9ed-4b50-a032-a16f7d4c1759"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"c", "\[And]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"2bc70c35-66bf-4e95-864b-af1a77125af2"]},
         {Cell[
          "By Distributive rule, we can expand the terms",ExpressionUUID->
           "43a39102-2139-4d8c-b4e9-3caf06c73700"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              FrameBox[
               RowBox[{"c", "\[And]", 
                RowBox[{"\[Not]", "b", " "}]}],
               StripOnInput->False], "\[Or]", 
              FrameBox[
               RowBox[{"\[Not]", "b", " "}],
               StripOnInput->False]}], ")"}]}]], "Input",ExpressionUUID->
           "c3939d45-d731-4182-8478-f3dcf1f9f32f"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "5e4fa9c4-9ebf-44d3-ad75-34b4aeb21f2a"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"c", "\[Or]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Not]", "b"}], " ", "\[Or]", 
                RowBox[{"\[Not]", "b"}]}], " ", ")"}]}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"275c4225-eb0b-4336-882b-1254381842aa"]},
         {Cell[
          "By Associative rule, we can flatten the term",ExpressionUUID->
           "74ff3d6e-e9da-45b2-92c9-60f9b7f5d882"]},
         {Cell[BoxData[
           FrameBox[
            RowBox[{
             FrameBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"c", "\[Or]", 
                 RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"\[Not]", "b"}], " ", "\[Or]", 
                 RowBox[{"\[Not]", "b"}]}], " ", ")"}]}],
              StripOnInput->False], "\[And]", 
             RowBox[{"(", 
              RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
             RowBox[{"(", 
              RowBox[{"a", "\[Or]", 
               RowBox[{"\[Not]", "b"}]}], " ", ")"}]}],
            StripOnInput->False]], "Input",ExpressionUUID->
           "e6779a8f-94b6-4ad1-8e5b-17dc032ea06f"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "60688f2a-6975-4a50-91dd-23a08accde8e"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"c", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"\[Not]", "b"}], " ", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"b204939a-b276-462b-ba82-dfe7cf36f9e2"]},
         {Cell[
          "By Idempotent rule, we can remove one of the duplicates",
           ExpressionUUID->"df8a1da2-45b4-49aa-8d49-5e60e043cc04"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"c", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{
              FrameBox[
               RowBox[{"\[Not]", "b", " "}],
               StripOnInput->False], "\[Or]", 
              FrameBox[
               RowBox[{"\[Not]", "b", " "}],
               StripOnInput->False]}], ")"}]}]], "Input",ExpressionUUID->
           "cfe46da0-5659-49b6-a8e5-c84ea137a8c3"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "94724eea-45ba-4db8-be65-85048623e864"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"\[Not]", "b"}], " ", "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"c", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"6fff26ea-320b-4b6f-a42a-cf1902e85257"]},
         {Cell[
          "By Absorption rule, we can reduce the term",ExpressionUUID->
           "0c1425f0-0b5f-4b86-9dff-36e1e9abbfe9"]},
         {Cell[BoxData[
           RowBox[{
            FrameBox[
             RowBox[{"\[Not]", "b", " "}],
             StripOnInput->False], "\[And]", 
            FrameBox[
             RowBox[{"a", "\[Or]", 
              RowBox[{"\[Not]", "b", " "}]}],
             StripOnInput->False], "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"c", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"3a69ffbf-b477-40c4-be0f-03dbcaedbdc4"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "13ac0384-9906-47b8-826c-f400c8d56400"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"\[Not]", "b"}], " ", "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "c"}], ")"}], "\[And]", 
            RowBox[{"(", 
             RowBox[{"c", "\[Or]", 
              RowBox[{"\[Not]", "b"}]}], " ", ")"}]}]], "Input",
           ExpressionUUID->"38808d27-af3d-42d2-a7b0-748e96ba47de"]},
         {Cell[
          "By Absorption rule, we can reduce the term",ExpressionUUID->
           "8867aeda-4907-4c40-b05f-71e96e00a3c2"]},
         {Cell[BoxData[
           RowBox[{
            FrameBox[
             RowBox[{"\[Not]", "b", " "}],
             StripOnInput->False], "\[And]", 
            FrameBox[
             RowBox[{"c", "\[Or]", 
              RowBox[{"\[Not]", "b", " "}]}],
             StripOnInput->False], "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "c"}], ")"}]}]], "Input",ExpressionUUID->
           "6c095726-d83b-41cb-818d-203a14aa7e00"]},
         {Cell[
          "Then we get ",ExpressionUUID->
           "09133ff3-ac90-42aa-92dc-cb6db23e09d9"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"\[Not]", "b"}], " ", "\[And]", 
            RowBox[{"(", 
             RowBox[{"a", "\[Or]", "c"}], ")"}]}]], "Input",ExpressionUUID->
           "e3e6fc52-ad14-4d3b-b071-43309693e08a"]}
        },
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0, 0.2]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
   BaseStyle->{FontFamily -> "Times"},
   DefaultBaseStyle->{},
   FrameMargins->5],
  DocumentNotebook[{
    TextCell["We want to reduce the expression:"], 
    ExpressionCell[
     $CellContext`or[
      $CellContext`and[$CellContext`a, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`and[$CellContext`c, 
       $CellContext`not[$CellContext`b]]], "Input"], 
    TextCell["By Distributive rule, we can expand the terms"], 
    ExpressionCell[
     $CellContext`or[
      Framed[
       $CellContext`and[$CellContext`a, 
        $CellContext`not[$CellContext`b]]], 
      Framed[
       $CellContext`and[$CellContext`c, 
        $CellContext`not[$CellContext`b]]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`or[$CellContext`a, 
       $CellContext`and[$CellContext`c, 
        $CellContext`not[$CellContext`b]]], 
      $CellContext`or[
       $CellContext`and[$CellContext`c, 
        $CellContext`not[$CellContext`b]], 
       $CellContext`not[$CellContext`b]]], "Input"], 
    TextCell["By Distributive rule, we can expand the terms"], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`or[
       $CellContext`and[$CellContext`c, 
        $CellContext`not[$CellContext`b]], 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[
       Framed[$CellContext`a], 
       Framed[
        $CellContext`and[$CellContext`c, 
         $CellContext`not[$CellContext`b]]]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`and[
       $CellContext`or[$CellContext`a, $CellContext`c], 
       $CellContext`or[$CellContext`a, 
        $CellContext`not[$CellContext`b]]], 
      $CellContext`or[
       $CellContext`and[$CellContext`c, 
        $CellContext`not[$CellContext`b]], 
       $CellContext`not[$CellContext`b]]], "Input"], 
    TextCell["By Associative rule, we can flatten the term"], 
    ExpressionCell[
     Framed[
      $CellContext`and[
       Framed[
        $CellContext`and[
         $CellContext`or[$CellContext`a, $CellContext`c], 
         $CellContext`or[$CellContext`a, 
          $CellContext`not[$CellContext`b]]]], 
       $CellContext`or[
        $CellContext`and[$CellContext`c, 
         $CellContext`not[$CellContext`b]], 
        $CellContext`not[$CellContext`b]]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`or[$CellContext`a, $CellContext`c], 
      $CellContext`or[$CellContext`a, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[
       $CellContext`and[$CellContext`c, 
        $CellContext`not[$CellContext`b]], 
       $CellContext`not[$CellContext`b]]], "Input"], 
    TextCell["By Distributive rule, we can expand the terms"], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`or[$CellContext`a, $CellContext`c], 
      $CellContext`or[$CellContext`a, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[
       Framed[
        $CellContext`and[$CellContext`c, 
         $CellContext`not[$CellContext`b]]], 
       Framed[
        $CellContext`not[$CellContext`b]]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`and[
       $CellContext`or[$CellContext`c, 
        $CellContext`not[$CellContext`b]], 
       $CellContext`or[
        $CellContext`not[$CellContext`b], 
        $CellContext`not[$CellContext`b]]], 
      $CellContext`or[$CellContext`a, $CellContext`c], 
      $CellContext`or[$CellContext`a, 
       $CellContext`not[$CellContext`b]]], "Input"], 
    TextCell["By Associative rule, we can flatten the term"], 
    ExpressionCell[
     Framed[
      $CellContext`and[
       Framed[
        $CellContext`and[
         $CellContext`or[$CellContext`c, 
          $CellContext`not[$CellContext`b]], 
         $CellContext`or[
          $CellContext`not[$CellContext`b], 
          $CellContext`not[$CellContext`b]]]], 
       $CellContext`or[$CellContext`a, $CellContext`c], 
       $CellContext`or[$CellContext`a, 
        $CellContext`not[$CellContext`b]]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`or[$CellContext`a, $CellContext`c], 
      $CellContext`or[$CellContext`a, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[$CellContext`c, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[
       $CellContext`not[$CellContext`b], 
       $CellContext`not[$CellContext`b]]], "Input"], 
    TextCell["By Idempotent rule, we can remove one of the duplicates"], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`or[$CellContext`a, $CellContext`c], 
      $CellContext`or[$CellContext`a, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[$CellContext`c, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[
       Framed[
        $CellContext`not[$CellContext`b]], 
       Framed[
        $CellContext`not[$CellContext`b]]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`not[$CellContext`b], 
      $CellContext`or[$CellContext`a, $CellContext`c], 
      $CellContext`or[$CellContext`a, 
       $CellContext`not[$CellContext`b]], 
      $CellContext`or[$CellContext`c, 
       $CellContext`not[$CellContext`b]]], "Input"], 
    TextCell["By Absorption rule, we can reduce the term"], 
    ExpressionCell[
     $CellContext`and[
      Framed[
       $CellContext`not[$CellContext`b]], 
      Framed[
       $CellContext`or[$CellContext`a, 
        $CellContext`not[$CellContext`b]]], 
      $CellContext`or[$CellContext`a, $CellContext`c], 
      $CellContext`or[$CellContext`c, 
       $CellContext`not[$CellContext`b]]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`not[$CellContext`b], 
      $CellContext`or[$CellContext`a, $CellContext`c], 
      $CellContext`or[$CellContext`c, 
       $CellContext`not[$CellContext`b]]], "Input"], 
    TextCell["By Absorption rule, we can reduce the term"], 
    ExpressionCell[
     $CellContext`and[
      Framed[
       $CellContext`not[$CellContext`b]], 
      Framed[
       $CellContext`or[$CellContext`c, 
        $CellContext`not[$CellContext`b]]], 
      $CellContext`or[$CellContext`a, $CellContext`c]], "Input"], 
    TextCell["Then we get "], 
    ExpressionCell[
     $CellContext`and[
      $CellContext`not[$CellContext`b], 
      $CellContext`or[$CellContext`a, $CellContext`c]], "Input"]}]]], "Output",\

 CellChangeTimes->{3.77185357647646*^9, 3.771858635074787*^9},
 TextAlignment->Center,
 CellLabel->
  "Out[209]=",ExpressionUUID->"3db25fcb-cefe-4e02-83bf-2dd0bf28efeb"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Find Shortest Reduction", "Section",
 CellChangeTimes->{{3.771329936237611*^9, 3.7713299581615477`*^9}, {
  3.7716267241183357`*^9, 
  3.7716267258971148`*^9}},ExpressionUUID->"bd55c552-16f2-4364-9b9e-\
5071f75243d0"],

Cell[CellGroupData[{

Cell["Graph of Boolean Expressions", "Subsection",
 CellChangeTimes->{{3.7717708040826*^9, 3.771770924454144*^9}, {
  3.7717710508401337`*^9, 3.7717710514976397`*^9}, {3.7717711775460167`*^9, 
  3.771771196041101*^9}, {3.771771252076394*^9, 
  3.771771252332307*^9}},ExpressionUUID->"2f47f60b-ff4a-4c2c-9d41-\
5b498bb1cefa"],

Cell[TextData[StyleBox["You can have a graph of Boolean expressions by \
viewing every Boolean expression as a vertex and setting two Boolean \
expression vertices adjacent if one can be transformed into another by one \
heuristic step. In this graph, each connected components is an equivalence \
class of Boolean expressions. Here is a graph of all first-order neighbors to \
the expression:",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
  3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
  3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
  3.7716269406201468`*^9, 3.771626949020691*^9}, {3.771627231584917*^9, 
  3.771627332887401*^9}, {3.77162789638834*^9, 3.771627922432719*^9}, {
  3.771768440077969*^9, 3.771768445812234*^9}, {3.771769527934415*^9, 
  3.771769548265087*^9}, {3.771769605515828*^9, 3.771769631341228*^9}, {
  3.771770589302382*^9, 3.771770601828706*^9}, {3.771770718517447*^9, 
  3.771770722877275*^9}, {3.771771328032894*^9, 3.7717713521834917`*^9}, {
  3.7717714634911833`*^9, 3.771771656858783*^9}, {3.7717717194412003`*^9, 
  3.771771734245226*^9}, {3.77177190932104*^9, 3.771771912960803*^9}, {
  3.7717749205548983`*^9, 3.7717749208286963`*^9}, {3.771858663272328*^9, 
  3.771858755735214*^9}},
 TextAlignment->Left,ExpressionUUID->"c8820222-5f5b-471c-bd8d-5f2a5933da33"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"expandEdges", "[", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"and", "[", 
       RowBox[{
        RowBox[{"or", "[", 
         RowBox[{"a", ",", "a"}], "]"}], ",", 
        RowBox[{"not", "[", 
         RowBox[{"not", "[", 
          RowBox[{"and", "[", 
           RowBox[{"b", ",", 
            RowBox[{"not", "[", "b", "]"}]}], "]"}], "]"}], "]"}], ",", "c", 
        ",", "d"}], "]"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Initial\>\"", ",", 
        RowBox[{"{", "}"}]}], "}"}]}], "}"}], "}"}], "]"}], "//", 
  "graph"}]], "Input",
 CellChangeTimes->{{3.771858757211054*^9, 3.771858778502775*^9}, {
  3.771860535016371*^9, 3.771860599832549*^9}},
 CellLabel->
  "In[212]:=",ExpressionUUID->"6f7825fd-5d1e-46ee-a61e-bd3803b62041"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
       $CellContext`and[$CellContext`c, $CellContext`d, 
        $CellContext`not[
         $CellContext`not[
          $CellContext`and[$CellContext`b, 
           $CellContext`not[$CellContext`b]]]], 
        $CellContext`or[$CellContext`a, $CellContext`a]], 
       $CellContext`and[$CellContext`d, 
        $CellContext`not[
         $CellContext`not[
          $CellContext`and[$CellContext`b, 
           $CellContext`not[$CellContext`b]]]], 
        $CellContext`or[
         $CellContext`and[$CellContext`a, $CellContext`c], 
         $CellContext`and[$CellContext`a, $CellContext`c]]], 
       $CellContext`and[$CellContext`c, 
        $CellContext`not[
         $CellContext`not[
          $CellContext`and[$CellContext`b, 
           $CellContext`not[$CellContext`b]]]], 
        $CellContext`or[
         $CellContext`and[$CellContext`a, $CellContext`d], 
         $CellContext`and[$CellContext`a, $CellContext`d]]], 
       $CellContext`and[$CellContext`c, $CellContext`d, 
        $CellContext`or[
         $CellContext`and[$CellContext`a, 
          $CellContext`not[
           $CellContext`not[
            $CellContext`and[$CellContext`b, 
             $CellContext`not[$CellContext`b]]]]], 
         $CellContext`and[$CellContext`a, 
          $CellContext`not[
           $CellContext`not[
            $CellContext`and[$CellContext`b, 
             $CellContext`not[$CellContext`b]]]]]]], 
       $CellContext`and[$CellContext`c, $CellContext`d, 
        $CellContext`not[
         $CellContext`or[
          $CellContext`not[$CellContext`b], 
          $CellContext`not[
           $CellContext`not[$CellContext`b]]]], 
        $CellContext`or[$CellContext`a, $CellContext`a]], 
       $CellContext`and[$CellContext`c, $CellContext`d, 
        $CellContext`and[$CellContext`b, 
         $CellContext`not[$CellContext`b]], 
        $CellContext`or[$CellContext`a, $CellContext`a]], 
       $CellContext`and[$CellContext`a, $CellContext`c, $CellContext`d, 
        $CellContext`not[
         $CellContext`not[
          $CellContext`and[$CellContext`b, 
           $CellContext`not[$CellContext`b]]]]], 
       $CellContext`and[$CellContext`c, $CellContext`d, 
        $CellContext`not[
         $CellContext`not[$CellContext`false]], 
        $CellContext`or[$CellContext`a, $CellContext`a]]}, {{{1, 2}, {1, 3}, {
       1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}}, Null}]]}, 
    TagBox[
     GraphicsGroupBox[
      GraphicsComplexBox[{{1.3416407864998738`, 0.4472135954999579}, {0., 
       0.}, {0.4472135954999579, 0.}, {0.8944271909999159, 0.}, {
       1.3416407864998738`, 0.}, {1.7888543819998317`, 0.}, {2.23606797749979,
        0.}, {2.6832815729997477`, 0.}}, {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         ArrowBox[{{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}}, 
          0.027924334567009212`]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.027924334567009212], DiskBox[2, 0.027924334567009212], 
         DiskBox[3, 0.027924334567009212], DiskBox[4, 0.027924334567009212], 
         DiskBox[5, 0.027924334567009212], DiskBox[6, 0.027924334567009212], 
         DiskBox[7, 0.027924334567009212], 
         DiskBox[8, 0.027924334567009212]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.771860577622308*^9, 3.771860601226577*^9}},
 CellLabel->
  "Out[212]=",ExpressionUUID->"34219b5a-cf87-4473-ab04-904c5377ed3e"]
}, Open  ]],

Cell[TextData[StyleBox["Each edge can be denoted in the form of {curr, prev, \
step}, where \[OpenCurlyDoubleQuote]curr\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]prev\[CloseCurlyDoubleQuote] are two Boolean \
expressions such that \[OpenCurlyDoubleQuote]curr\[CloseCurlyDoubleQuote] can \
be derived by applying step to \[OpenCurlyDoubleQuote]prev\
\[CloseCurlyDoubleQuote]. ",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
   3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
   3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
   3.7716269406201468`*^9, 3.771626949020691*^9}, {3.771627231584917*^9, 
   3.771627332887401*^9}, {3.77162789638834*^9, 3.771627922432719*^9}, {
   3.771768440077969*^9, 3.771768445812234*^9}, {3.771769527934415*^9, 
   3.771769548265087*^9}, {3.771769605515828*^9, 3.771769631341228*^9}, {
   3.771770589302382*^9, 3.771770601828706*^9}, {3.771770718517447*^9, 
   3.771770722877275*^9}, {3.771771328032894*^9, 3.7717713521834917`*^9}, {
   3.7717714634911833`*^9, 3.771771656858783*^9}, {3.771771688961295*^9, 
   3.771771704970469*^9}, {3.771771744595738*^9, 3.771771877294786*^9}, {
   3.771772045751577*^9, 3.771772057471552*^9}, 3.771774918431229*^9},
 TextAlignment->Left,ExpressionUUID->"47d8efe3-94ab-4387-b393-fcfeec1c1edb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Challenges to Dijkstra\[CloseCurlyQuote]s Algorithm", "Subsection",
 CellChangeTimes->{{3.7717708040826*^9, 3.771770924454144*^9}, {
  3.7717710508401337`*^9, 3.7717710514976397`*^9}, {3.7717711775460167`*^9, 
  3.771771209693961*^9}, {3.771771250730377*^9, 
  3.771771250934308*^9}},ExpressionUUID->"4f740238-f1de-4d61-87c4-\
0e44c98daea8"],

Cell[CellGroupData[{

Cell["Dijkstra\[CloseCurlyQuote]s Algorithm", "Subsubsection",
 CellChangeTimes->{{3.771771385429442*^9, 
  3.771771399547247*^9}},ExpressionUUID->"2d8e96d5-059d-4bf0-b977-\
db74d9befe00"],

Cell[TextData[StyleBox["WIth our definition of Boolean expression graph, \
finding the shortest reduction from one expression to another would be the \
same as finding the shortest path in the graph. Dijkstra\[CloseCurlyQuote]s \
Algorithm is a classic algorithm for finding the shortest path between any \
two vertices in a connected graph, but I encounter two difficulties in \
finding a Boolean expression path.",
 FontSize->20]], "Text",
 CellChangeTimes->{{3.7716259125398397`*^9, 3.771626013682651*^9}, {
  3.7716262294159803`*^9, 3.771626283976996*^9}, {3.7716263266228437`*^9, 
  3.771626558743026*^9}, {3.771626840526661*^9, 3.77162687543592*^9}, {
  3.7716269406201468`*^9, 3.771626949020691*^9}, {3.771627231584917*^9, 
  3.771627332887401*^9}, {3.77162789638834*^9, 3.771627922432719*^9}, {
  3.771768440077969*^9, 3.771768445812234*^9}, {3.771769527934415*^9, 
  3.771769548265087*^9}, {3.771769605515828*^9, 3.771769631341228*^9}, {
  3.771770589302382*^9, 3.771770601828706*^9}, {3.771770718517447*^9, 
  3.771770722877275*^9}, {3.771771328032894*^9, 3.7717713521834917`*^9}, {
  3.7717714634911833`*^9, 3.771771656858783*^9}, {3.7717717194412003`*^9, 
  3.771771734245226*^9}, {3.77177190932104*^9, 3.771771912960803*^9}, {
  3.77177194453257*^9, 3.7717720254658127`*^9}, {3.771776207439231*^9, 
  3.7717763593904963`*^9}},
 TextAlignment->Left,ExpressionUUID->"dcf936ac-7d12-49f8-bd0e-80ea109603d9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["1. Potentially Infinite Size of Graph", "Subsubsection",
 CellChangeTimes->{{3.771771402260955*^9, 3.771771416786685*^9}, {
  3.7717714469125566`*^9, 
  3.771771451460774*^9}},ExpressionUUID->"34ec58c8-fd26-4978-ac61-\
cb715272aa3f"],

Cell[TextData[StyleBox["The size of any connected component in a Boolean \
expression graph is infinite. For any expression e, you can easily find \
countably infinite equivalent expressions just be adding arbitrarily many \
double negations ahead of it. (You can easily find uncountably many by \
alternating between double negation and identity rules.) It is impossible to \
know how large the graph needs to be so that a path exists between two \
equivalent expressions. Since the framework for graphs in Wolfram Language \
can only handle static finite graphs, I cannot use the  built-in \
\[OpenCurlyDoubleQuote]FindShortestPath\[CloseCurlyDoubleQuote] function.",
 FontSize->20]], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQHecmaH5O8o2j+42tziB6m//aOBDd61yfCqLD3l3O
AtH3jl1vB9EZtwRWg2i+z7nrQbTdjcnbQXTDygU7QPSS7Z9ug+jpqXNegGiP
XB7980D62g1fIxC9s47pvLDUG8dLf3eC6V3P/oaJAOkZ1R2RIHpV44YEEB3+
+lUyiJZdu/I2iD7UYnUXRL/tu/AaRC8WinkDoit4GS1EgbTWfVZrEH1s+3sP
EK1WLZ0IogPk3mWA6Cc3jmeB6G+uqxpA9LN9co0g+gKXYCuIPpAV1gmiucI+
TgXRTN9d5oJohc17doLoiaHce0F0ycU/B0C09dHp90A0AIfamPY=
  "],
 TextAlignment->Left,ExpressionUUID->"99112147-9a59-4db9-9f9c-39c8feb37482"]
}, Closed]],

Cell[CellGroupData[{

Cell["2. Computationally Irreversible Equivalence Rules", "Subsubsection",
 CellChangeTimes->{{3.771771423992978*^9, 
  3.7717714453561277`*^9}},ExpressionUUID->"65548cad-cdd2-4bf2-be5c-\
d90f852fb126"],

Cell[TextData[{
 StyleBox["Every step we take in reducing Boolean expressions is invertible, \
but only in theory. If we have the expression \[OpenCurlyDoubleQuote]",
  FontSize->20],
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"p", "\[And]", 
     RowBox[{"\[Not]", "p", " "}]}],
    FontSize->20], TraditionalForm]],
  FontSize->20,ExpressionUUID->"ba43d970-4708-46e1-964a-f87747e4a695"],
 StyleBox["\[CloseCurlyDoubleQuote], we can easily find its neighbor \
\[OpenCurlyDoubleQuote]true\[CloseCurlyDoubleQuote] according to the forward \
direction of negation rule; but if we are given the literal \
\[OpenCurlyDoubleQuote]true\[CloseCurlyDoubleQuote], how can we find its \
neighboring edges according to the backward direction of negation rule? In \
the place of \[OpenCurlyDoubleQuote]p\[CloseCurlyDoubleQuote], we can have \
arbitrary symbol, literal, expressions, etc. In cases like these, only one \
direction of the edge is computationally possible. Therefore, if we have the \
vertex \[OpenCurlyDoubleQuote]true\[CloseCurlyDoubleQuote] and we want to \
find a path from true to \[OpenCurlyDoubleQuote]",
  FontSize->20],
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"p", "\[And]", 
     RowBox[{"\[Not]", "p", " "}]}],
    FontSize->20], TraditionalForm]],
  FontSize->20,ExpressionUUID->"fb941933-d89c-413f-9a74-c071e8763ff4"],
 StyleBox["\[CloseCurlyDoubleQuote], we cannot follow the classic Dijkstra\
\[CloseCurlyQuote]s algorithm.",
  FontSize->20]
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQHecmaH5O8o2j+42tziB6m//aOBDd61yfCqLD3l3O
AtH3jl1vB9EZtwRWg2i+z7nrQbTdjcnbQXTDygU7QPSS7Z9ug+jpqXNegGiP
XB7980D62g1fIxC9s47pvLDUG8dLf3eC6V3P/oaJAOkZ1R2RIHpV44YEEB3+
+lUyiJZdu/I2iD7UYnUXRL/tu/AaRC8WinkDoit4GS1EgbTWfVZrEH1s+3sP
EK1WLZ0IogPk3mWA6Cc3jmeB6G+uqxpA9LN9co0g+gKXYCuI/vBcrx9Ep/L4
fALRffaKfGJA2mZh8n8Q3XH6vqY4kAYAMKSQ5Q==
  "],
 TextAlignment->Left,ExpressionUUID->"2e161a01-97ad-4faa-8561-fc84889049c5"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Solutions to the Challenges", "Subsection",
 CellChangeTimes->{{3.7717708040826*^9, 3.771770924454144*^9}, {
  3.7717710508401337`*^9, 3.7717710514976397`*^9}, {3.7717711775460167`*^9, 
  3.7717712457785873`*^9}},ExpressionUUID->"e8b5ddd2-baed-4d9a-8056-\
da12c0130658"],

Cell[TextData[StyleBox["I come up with the following algorithm to find the \
shortest path between two equivalent expressions:",
 FontSize->20]], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQHecmaH5O8o2j+42tziB6m//aOBDd61yfCqLD3l3O
AtH3jl1vB9EZtwRWg2i+z7nrQbTdjcnbQXTDygU7QPSS7Z9ug+jpqXNegGiP
XB7980D62g1fIxC9s47pvLDUG8dLf3eC6V3P/oaJAOkZ1R2RIHpV44YEEB3+
+lUyiJZdu/I2iD7UYnUXRL/tu/AaRC8WinkDoit4GS1EgbTWfVZrEH1s+3sP
EK1WLZ0IogPk3mWA6Cc3jmeB6G+uqxpA9LN9co0g+gKXYCuI/vBcrx9E523T
1BUH0lJuhRYg2mmBkS2I/uGaBqYBHYePWA==
  "],
 TextAlignment->Left,ExpressionUUID->"6aa4dea2-d204-45b8-bdec-61b31b489889"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findShortestRoute", "[", 
   RowBox[{"e1_", ",", "e2_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"edges1", "=", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"e1", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Initial\>\"", ",", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "}"}]}], ",", 
       RowBox[{"edges2", "=", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"e2", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<End\>\"", ",", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "}"}]}], ",", "meet"}], 
      "}"}], ",", "\n", 
     RowBox[{
      RowBox[{"NestWhile", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"edges1", ",", "edges2"}], "}"}], "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"expandEdges", "[", "edges1", "]"}], ",", 
             RowBox[{"expandEdges", "[", "edges2", "]"}]}], "}"}]}], ")"}], 
         "&"}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"meet", "=", 
            RowBox[{"findCommonEdge", "[", 
             RowBox[{"edges1", ",", "edges2"}], "]"}]}], ")"}], "===", 
          RowBox[{"{", "}"}]}], "&"}]}], "]"}], ";", "\n", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"tracePath", "[", 
         RowBox[{"edges1", ",", 
          RowBox[{"meet", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"meet", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}], ",", 
        RowBox[{"reverseTracePath", "[", 
         RowBox[{"tracePath", "[", 
          RowBox[{"edges2", ",", 
           RowBox[{"meet", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"meet", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "}"}]}], "]"}], "]"}]}], 
       "]"}]}]}], "]"}], "//", 
   RowBox[{
    RowBox[{"DeleteCases", "[", 
     RowBox[{"#", ",", 
      RowBox[{"x_List", "/;", 
       RowBox[{
        RowBox[{"Length", "[", "x", "]"}], "==", "0"}]}]}], "]"}], 
    "&"}]}]}]], "Input",
 TextAlignment->Center,
 FontSize->18,ExpressionUUID->"73e7c0c8-b83c-4add-b517-cc0fb9c25ae0"],

Cell[TextData[StyleBox["\t1. We start with two empty neighborhood of \
expression 1 and expression 2. \n\t2. In each iteration, we grow the radius \
of the neighborhoods by one, until the two neighborhoods intersect. \n\t3. \
The expression in the intersection must be on the shortest path from \
expression 1 to expression 2. \n\t4. Then we trace the path of steps from the \
intersection point to expression 1 and expression 2 respectively.",
 FontSize->20]], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBWIQHecmaH5O8o2j+42tziB6m//aOBDd61yfCqLD3l3O
AtH3jl1vB9EZtwRWg2i+z7nrQbTdjcnbQXTDygU7QPSS7Z9ug+jpqXNegGiP
XB7980D62g1fIxC9s47pvLDUG8dLf3eC6V3P/oaJAOkZ1R2RIHpV44YEEB3+
+lUyiJZdu/I2iD7UYnUXRL/tu/AaRC8WinkDoit4GS1EgbTWfVZrEH1s+3sP
EK1WLZ0IogPk3mWA6Cc3jmeB6G+uqxpA9LN9co0g+gKXYCuI/vBcrx9E523T
1BUH0lJuhRYg2mmBkS2I/uGaBqZZHt1zBdHNhkJxILp76/42EH3ti0A7iAYA
5X+c5Q==
  "],
 TextAlignment->Left,ExpressionUUID->"97584cb4-49a4-4f81-95ba-7ecc693786d6"],

Cell[CellGroupData[{

Cell["Condition of termination:", "Subsubsection",
 CellChangeTimes->{{3.771776064423093*^9, 
  3.771776069463022*^9}},ExpressionUUID->"deb4664d-3933-4fe3-9c01-\
fed929048343"],

Cell[TextData[StyleBox["If we know that the two expressions we input are \
equivalent, then within finite number of steps, they will both be reduced to \
a normal form in their neighborhood. Since normal forms are unique, the \
neighborhoods must intersect when their normal forms appear in the \
neighborhoods.",
 FontSize->20]], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQB2IQHecmaH5O8o2j+42tziB6m//aOBDd61yfCqLD3l3O
AtH3jl1vB9EZtwRWg2i+z7nrQbTdjcnbQXTDygU7QPSS7Z9ug+jpqXNegGiP
XB7980D62g1fIxC9s47pvLDUG8dLf3eC6V3P/oaJAOkZ1R2RIHpV44YEEB3+
+lUyiJZdu/I2iD7UYnUXRL/tu/AaRC8WinkDoit4GS1EgbTWfVZrEH1s+3sP
EK1WLZ0IogPk3mWA6Cc3jmeB6G+uqxpA9LN9co0g+gKXYCuI/vBcrx9E523T
1BUH0lJuhRYg2mmBkS2I/uGaBqb50msSQLTIs9VJIFr9zpQ0EH1mkVEeiF73
+FoJiC4WmNMCos32OXSCaL8rGj0gGgBQ0anA
  "],
 TextAlignment->Left,ExpressionUUID->"6dc24496-58dc-4b37-8084-64f231c5f252"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution of the challenges:", "Subsubsection",
 CellChangeTimes->{{3.7717760865324574`*^9, 
  3.771776095844604*^9}},ExpressionUUID->"58727210-864d-4e8f-937c-\
1f4a8a270a63"],

Cell[TextData[StyleBox["I handle the potentially infinite size of graph by \
dynamically generating more vertices at each iteration of finding neighbors, \
and I solve the irreversibility problem by expanding neighbors from both ends \
of the path. ",
 FontSize->20]], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQB2IQHecmaH5O8o2j+42tziB6m//aOBDd61yfCqLD3l3O
AtH3jl1vB9EZtwRWg2i+z7nrQbTdjcnbQXTDygU7QPSS7Z9ug+jpqXNegGiP
XB7980D62g1fIxC9s47pvLDUG8dLf3eC6V3P/oaJAOkZ1R2RIHpV44YEEB3+
+lUyiJZdu/I2iD7UYnUXRL/tu/AaRC8WinkDoit4GS1EgbTWfVZrEH1s+3sP
EK1WLZ0IogPk3mWA6Cc3jmeB6G+uqxpA9LN9co0g+gKXYCuI/vBcrx9E523T
1BUH0lJuhRYg2mmBkS2I/uGaBqb50msSQLTIs9VJIFr9zpQ0EH1mkVEeiF73
+FoJiC4WmNMCos32OXSCaBbeqh4QDQBK/KkB
  "],
 TextAlignment->Left,ExpressionUUID->"bf7d5949-2820-4865-933a-2403249c9295"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Examples", "Subsection",
 CellChangeTimes->{{3.7717708040826*^9, 3.771770924454144*^9}, {
  3.7717710508401337`*^9, 3.7717710514976397`*^9}, {3.7717711775460167`*^9, 
  3.771771269764916*^9}},ExpressionUUID->"01b46801-f7b9-456c-a39a-\
70e051879f1d"],

Cell[TextData[StyleBox["Visualizing the algorithm for finding shortest path \
is fun.",
 FontSize->20]], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQHecmaH5O8o2j+42tziB6m//aOBDd61yfCqLD3l3O
AtH3jl1vB9EZtwRWg2i+z7nrQbTdjcnbQXTDygU7QPSS7Z9ug+jpqXNegGiP
XB7980D62g1fIxC9s47pvLDUG8dLf3eC6V3P/oaJAOkZ1R2RIHpV44YEEB3+
+lUyiJZdu/I2iD7UYnUXRL/tu/AaRC8WinkDoit4GS1EgbTWfVZrEH1s+3sP
EK1WLZ0IogPk3mWA6Cc3jmeB6G+uqxpA9LN9co0g+gKXYCuI/vBcrx9E523T
1BUH0lJuhRYg2mmBkS2I/uGaBqardk7dCqI9WD9uB9EAVLaWhw==
  "],
 TextAlignment->Left,ExpressionUUID->"2bf623f1-3025-4e86-8260-422a4c1c8b5c"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771776411990814*^9, 
  3.771776414552861*^9}},ExpressionUUID->"0c6e3bb4-3fd6-4c0c-a5c7-\
29a9eb71da84"]
}, Closed]]
}, Open  ]],

Cell["Generating Notebooks of Proofs", "Section",
 CellChangeTimes->{{3.7715989912342567`*^9, 3.771598998080789*^9}, {
  3.771626707705187*^9, 
  3.771626721131529*^9}},ExpressionUUID->"8ba49bbd-e1cc-4efc-9536-\
1489a143176b"]
}, Closed]],

Cell[CellGroupData[{

Cell["What I want my functions to do in the future", "Chapter",
 CellChangeTimes->{{3.771626685796557*^9, 
  3.771626695938151*^9}},ExpressionUUID->"c8a2ba00-e6fb-4a75-a334-\
422cb621e1c7"],

Cell[CellGroupData[{

Cell["1. Potential improvements in the algorithm: ", "Subsection",
 CellChangeTimes->{{3.7717703527962847`*^9, 3.771770377337891*^9}, {
  3.772157463825534*^9, 3.772157472756646*^9}, {3.772157526639874*^9, 
  3.7721575359198103`*^9}},ExpressionUUID->"9b948ce8-75f1-4cee-b016-\
9b6d610dadf8"],

Cell["\<\
Add pattern matching for the other direction of distributive law\
\>", "Subsubsection",
 CellChangeTimes->{{3.772157539939082*^9, 
  3.772157557479165*^9}},ExpressionUUID->"02828a4a-b275-4e4f-997b-\
15da1edb4cf4"],

Cell["\<\
Improve the performance of find shortest path by alternate data structures\
\>", "Subsubsection",
 CellChangeTimes->{{3.7721575598694696`*^9, 
  3.772157586618033*^9}},ExpressionUUID->"54a3c315-902b-497b-a3c4-\
279345a52e33"]
}, Closed]],

Cell["2. Explorations in multilevel logic reduction:", "Subsection",
 CellChangeTimes->{{3.771770379752303*^9, 
  3.771770404494403*^9}},ExpressionUUID->"8f379b68-c7ea-4a54-b2c7-\
dec7c87599a1"],

Cell["3. Checking proofs written by humans:", "Subsection",
 CellChangeTimes->{{3.77177615710858*^9, 3.771776176428087*^9}, 
   3.772157461640501*^9},ExpressionUUID->"b0722244-df38-4f83-8955-\
b9a80fdc0d7f"]
}, Closed]],

Cell[CellGroupData[{

Cell["Appendix", "Chapter",
 CellChangeTimes->{{3.771767222029996*^9, 
  3.771767223606124*^9}},ExpressionUUID->"6cd74ac7-0aaf-4439-b1d8-\
2086dc8b03fb"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"e6a291d3-4521-48e4-8b71-c05a8bf730cc"],

Cell[CellGroupData[{

Cell["Conversion between formats", "Subsection",ExpressionUUID->"bfd124cc-2c52-4e4f-a225-ea6cf63a5cc8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "\n", 
   RowBox[{
    RowBox[{
    "Since", " ", "Mathematica", " ", "evaluates", " ", "inputs", " ", "upon",
      " ", "entering", " ", "them"}], ",", " ", 
    RowBox[{
    "we", " ", "use", " ", "the", " ", "lower", " ", "case", " ", "version", 
     " ", "of", " ", "true"}], ",", " ", "false", ",", " ", "and", ",", " ", 
    "or", ",", " ", 
    RowBox[{
     RowBox[{"not", ".", "\n", "We"}], " ", "regard", " ", "commutativity", 
     " ", "as", " ", "a", " ", "trivial", " ", "property", " ", "of", " ", 
     "\"\<and\>\"", " ", "and", " ", "\"\<or\>\"", " ", "and", " ", "set", 
     " ", "their", " ", "attributes", " ", "to", " ", "be", " ", 
     "Orderless"}]}], "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"SetAttributes", "[", 
     RowBox[{"and", ",", "Orderless"}], "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"SetAttributes", "[", 
     RowBox[{"or", ",", "Orderless"}], "]"}], ";"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"8d44c15d-155c-4ea6-945c-1dcf5ea6e6da"],

Cell[BoxData[{
 RowBox[{"<<", "Notation`"}], "\n", 
 RowBox[{"InfixNotation", "[", 
  RowBox[{
   RowBox[{"ParsedBoxWrapper", "[", "\"\<\[And]\>\"", "]"}], ",", "and"}], 
  "]"}], "\n", 
 RowBox[{"InfixNotation", "[", 
  RowBox[{
   RowBox[{"ParsedBoxWrapper", "[", "\"\<\[Or]\>\"", "]"}], ",", "or"}], 
  "]"}], "\n", 
 RowBox[{"Notation", "[", 
  RowBox[{
   RowBox[{"ParsedBoxWrapper", "[", 
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<\[Not]\>\"", ",", " ", "\"\<x_\>\"", ",", " ", "\"\< \>\""}], 
      "}"}], "]"}], "]"}], " ", "\[DoubleLongLeftRightArrow]", " ", 
   RowBox[{"ParsedBoxWrapper", "[", 
    RowBox[{"RowBox", "[", 
     RowBox[{"{", 
      RowBox[{"\"\< \>\"", ",", " ", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<not\>\"", ",", " ", "\"\<[\>\"", ",", " ", "\"\<x_\>\"", ",", 
          " ", "\"\<]\>\""}], "}"}], "]"}]}], "}"}], "]"}], "]"}]}], 
  "]"}]}], "Code",
 CellChangeTimes->{{3.771767291387678*^9, 
  3.771767292550788*^9}},ExpressionUUID->"8aeb8015-701f-493b-a7b1-\
b7008c588953"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"and", "[", 
  RowBox[{
   RowBox[{"or", "[", 
    RowBox[{
     RowBox[{"not", "[", 
      RowBox[{"and", "[", 
       RowBox[{
        RowBox[{"not", "[", "a", "]"}], ",", "b"}], "]"}], "]"}], ",", "c"}], 
    "]"}], ",", "b"}], "]"}]], "Code",
 CellLabel->"In[8]:=",ExpressionUUID->"2802ba25-205b-4044-97bf-87e78bd6f3e1"],

Cell[BoxData[
 RowBox[{"b", "\[And]", 
  RowBox[{"(", 
   RowBox[{"c", "\[Or]", 
    RowBox[{"\[Not]", 
     RowBox[{"(", 
      RowBox[{"b", "\[And]", 
       RowBox[{"\[Not]", "a"}]}], " ", ")"}]}]}], " ", ")"}]}]], "Output",
 CellChangeTimes->{3.771767187876333*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"3b14bfe6-2c5f-4f89-95de-845a78aff578"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Identify Steps", "Section",ExpressionUUID->"0ba06373-3b8b-470c-937c-8ba4cc9604eb"],

Cell[CellGroupData[{

Cell["Helpers", "Subsection",ExpressionUUID->"79a447f6-54b3-4565-8a2c-fd02c12b49fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "helper", " ", "functions", " ", "that", " ", "make", " ", "the", " ", 
    "code", " ", "shorter", " ", "and", " ", "more", " ", "readable"}], " ", 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"indices", "[", "e_", "]"}], ":=", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "e", "]"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"pairs", "[", "set_", "]"}], ":=", 
    RowBox[{"Subsets", "[", 
     RowBox[{"set", ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"select", "[", 
     RowBox[{"list_", ",", "test_", ",", "All"}], "]"}], ":=", 
    RowBox[{"Select", "[", 
     RowBox[{"list", ",", "test"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"select", "[", 
     RowBox[{"list_", ",", "test_", ",", "n_"}], "]"}], ":=", 
    RowBox[{"Select", "[", 
     RowBox[{"list", ",", "test", ",", "n"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"unequal", "[", "e_", "]"}], ":=", 
    RowBox[{
     RowBox[{"e", "=!=", "#"}], "&"}]}]}]}]], "Code",
 CellLabel->"In[9]:=",ExpressionUUID->"747e8968-598f-43b6-b267-1af71ac5c5bf"]
}, Closed]],

Cell[CellGroupData[{

Cell["Recursive Handle", "Subsection",ExpressionUUID->"81909240-cba0-4a41-8bfc-4b3ae3f27f2a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
     "recursion", " ", "returns", " ", "step", " ", "structures", " ", "of", 
      " ", "a", " ", "given", " ", "pattern", " ", "from", " ", "all", " ", 
      "levels", " ", "of", " ", "a", " ", "given", " ", "expression", "\n", 
      RowBox[{"input", ":", "\n", "\t", 
       RowBox[{"opt_:", " ", "All", " ", "or", " ", "1"}]}]}], ";", "\n", 
     "\t", 
     RowBox[{
     "find_:", " ", "a", " ", "find", " ", "function", " ", "for", " ", "a", 
      " ", "particular", " ", "pattern"}]}], ",", " ", 
    RowBox[{
     RowBox[{"e", ".", "g", ".", " ", "findDoubleNegation"}], ";", "\n", "\t", 
     RowBox[{"e_:", " ", "a", " ", "boolean", " ", "expression"}], ";", "\n", 
     
     RowBox[{"output", ":", "\n", " \t", 
      RowBox[{"if", " ", "opt", " ", "is", " ", "1"}]}]}], ",", " ", 
    RowBox[{
    "returns", " ", "one", " ", "potential", " ", "step", " ", "of", " ", 
     "the", " ", "given", " ", "pattern", " ", "from", " ", "some", " ", 
     "layer", " ", "of", " ", "the", " ", "expression", "\n", "\t", "if", " ",
      "opt", " ", "is", " ", "all"}], ",", " ", 
    RowBox[{
    "returns", " ", "all", " ", "potential", " ", "step", " ", "of", " ", 
     "the", " ", "given", " ", "patternfrom", " ", "all", " ", "layers", " ", 
     "of", " ", "the", " ", "expression", "\n", "\t", "returns", " ", 
     RowBox[{"{", "}"}], " ", "if", " ", "no", " ", "potential", " ", "steps",
      " ", "of", " ", "the", " ", "given", " ", "pattern", " ", "exist", " ", 
     "in", " ", "any", " ", "layer", " ", "of", " ", "the", " ", 
     "expression"}]}], "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"recursion", "[", "opt_", "]"}], "[", "find_", "]"}], "[", "e_", 
    "]"}], ":=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"find", "[", "opt", "]"}], "[", "e", "]"}], ",", 
     RowBox[{"Sequence", " ", "@@", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"Most", "[", "#", "]"}], ",", 
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"Last", "[", "#", "]"}], ",", "i"}], "]"}]}], "]"}], 
          "&"}], "/@", 
         RowBox[{
          RowBox[{
           RowBox[{"recursion", "[", "opt", "]"}], "[", "find", "]"}], "[", 
          RowBox[{"e", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "e", "]"}], ",", "1"}], "}"}]}], "]"}]}]}], 
    "]"}]}]}]], "Code",
 CellLabel->"In[14]:=",ExpressionUUID->"94413102-4122-49b8-a39e-4cc5808f3770"]
}, Closed]],

Cell[CellGroupData[{

Cell["Pattern Finding Functions", "Subsection",ExpressionUUID->"5934646a-47fb-4b02-820b-363e7ccf8ec0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
     "find", " ", "functions", " ", "returns", " ", "step", " ", "structures",
       " ", "of", " ", "the", " ", "given", " ", "pattern", " ", "from", " ", 
      "the", " ", "outermost", " ", "layer", " ", "of", " ", "a", " ", 
      "given", " ", "expression", "\n", 
      RowBox[{"input", ":", "\n", "\t", 
       RowBox[{"opt_:", " ", "All", " ", "or", " ", "1"}]}]}], ";", "\n", 
     "\t", 
     RowBox[{"e_:", " ", "a", " ", "boolean", " ", "expression"}], ";", "\n", 
     
     RowBox[{"output", ":", "\n", " \t", 
      RowBox[{"if", " ", "opt", " ", "is", " ", "1"}]}]}], ",", " ", 
    RowBox[{
    "returns", " ", "one", " ", "potential", " ", "step", " ", "of", " ", 
     "the", " ", "given", " ", "pattern", " ", "from", " ", "the", " ", 
     "outermost", " ", "layer", " ", "of", " ", "the", " ", "expression", 
     "\n", "\t", "if", " ", "opt", " ", "is", " ", "all"}], ",", " ", 
    RowBox[{
    "returns", " ", "all", " ", "potential", " ", "step", " ", "of", " ", 
     "the", " ", "given", " ", "pattern", " ", "from", " ", "the", " ", 
     "outermost", " ", "layer", " ", "of", " ", "the", " ", "expression", 
     "\n", "\t", "returns", " ", 
     RowBox[{"{", "}"}], " ", "if", " ", "no", " ", "potential", " ", "steps",
      " ", "of", " ", "the", " ", "given", " ", "pattern", " ", "exist", " ", 
     "in", " ", "the", " ", "outermost", " ", "layer", " ", "of", " ", "the", 
     " ", "expression"}]}], "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"identifyLiteral", "[", 
      RowBox[{"and", ",", "true"}], "]"}], ":=", " ", "\"\<Identity\>\""}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"identifyLiteral", "[", 
      RowBox[{"and", ",", "false"}], "]"}], ":=", " ", "\"\<Domination\>\""}],
     ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"identifyLiteral", "[", 
      RowBox[{"or", ",", "true"}], "]"}], ":=", " ", "\"\<Domination\>\""}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"identifyLiteral", "[", 
      RowBox[{"or", ",", "false"}], "]"}], ":=", " ", "\"\<Identity\>\""}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"identifyLiteral", "[", 
      RowBox[{"not", ",", "true"}], "]"}], ":=", " ", "\"\<False\>\""}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"identifyLiteral", "[", 
      RowBox[{"not", ",", "false"}], "]"}], ":=", " ", "\"\<True\>\""}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"identifyLiteral", "[", 
     RowBox[{"_", ",", "_"}], "]"}], ":=", " ", 
    RowBox[{"{", "}"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findLiteral", "[", "opt_", "]"}], "[", "e_", "]"}], ":=", 
    RowBox[{
     RowBox[{"select", "[", 
      RowBox[{
       RowBox[{"indices", "[", "e", "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"e", "[", 
           RowBox[{"[", "#", "]"}], "]"}], "==", "true"}], "||", 
         RowBox[{
          RowBox[{"e", "[", 
           RowBox[{"[", "#", "]"}], "]"}], "==", "false"}]}], "&"}], ",", 
       "opt"}], "]"}], "//", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"identifyLiteral", "[", 
          RowBox[{
           RowBox[{"e", "[", 
            RowBox[{"[", "0", "]"}], "]"}], ",", 
           RowBox[{"e", "[", 
            RowBox[{"[", "#", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"e", "[", 
           RowBox[{"[", "0", "]"}], "]"}], "]"}], ",", 
         RowBox[{"{", "#", "}"}]}], "}"}], "&"}], "]"}]}]}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findIdempotent", "[", "opt_", "]"}], "[", "e_", "]"}], ":=", 
    RowBox[{
     RowBox[{"select", "[", 
      RowBox[{
       RowBox[{"pairs", "[", 
        RowBox[{"indices", "[", "e", "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"e", "[", 
          RowBox[{"[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "===", 
         RowBox[{"e", "[", 
          RowBox[{"[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
       "opt"}], "]"}], "//", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Idempotent\>\"", ",", 
         RowBox[{"{", "#", "}"}]}], "}"}], "&"}], "]"}]}]}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findNegation", "[", "opt_", "]"}], "[", "e_", "]"}], ":=", 
    RowBox[{
     RowBox[{"select", "[", 
      RowBox[{
       RowBox[{"pairs", "[", 
        RowBox[{"indices", "[", "e", "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"e", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "==", 
           RowBox[{"not", "[", 
            RowBox[{"e", "[", 
             RowBox[{"[", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], "]"}]}], "||", 
          RowBox[{
           RowBox[{"not", "[", 
            RowBox[{"e", "[", 
             RowBox[{"[", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "]"}], "==", 
           RowBox[{"e", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}]}], ")"}], "&"}], 
       ",", "opt"}], "]"}], "//", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Negation\>\"", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"e", "[", 
           RowBox[{"[", "0", "]"}], "]"}], "]"}], ",", 
         RowBox[{"{", "#", "}"}]}], "}"}], "&"}], "]"}]}]}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findDoubleNegation", "[", "opt_", "]"}], "[", 
     RowBox[{"not", "[", 
      RowBox[{"not", "[", "_", "]"}], "]"}], "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"\"\<Double Negation\>\"", ",", 
       RowBox[{"{", "}"}]}], "}"}], "}"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findDoubleNegation", "[", "_", "]"}], "[", "_", "]"}], ":=", 
    RowBox[{"{", "}"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findDeMorgan", "[", "_", "]"}], "[", 
     RowBox[{"not", "[", 
      RowBox[{"and", "[", "__", "]"}], "]"}], "]"}], " ", ":=", " ", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"\"\<De Morgan\>\"", ",", "\"\<and\>\"", ",", 
       RowBox[{"{", "}"}]}], "}"}], "}"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findDeMorgan", "[", "_", "]"}], "[", 
     RowBox[{"not", "[", 
      RowBox[{"or", "[", "__", "]"}], "]"}], "]"}], " ", ":=", " ", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"\"\<De Morgan\>\"", ",", "\"\<or\>\"", ",", 
       RowBox[{"{", "}"}]}], "}"}], "}"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findDeMorgan", "[", "_", "]"}], "[", "_", "]"}], " ", ":=", " ", 
    RowBox[{"{", "}"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findOrDistributive", "[", "opt_", "]"}], "[", 
     RowBox[{"or", "[", "terms__", "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"select", "[", 
       RowBox[{
        RowBox[{"indices", "[", 
         RowBox[{"{", "terms", "}"}], "]"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"{", "terms", "}"}], "[", 
             RowBox[{"[", "#", "]"}], "]"}], "[", 
            RowBox[{"[", "0", "]"}], "]"}], "===", "and"}], ")"}], "&"}], ",",
         "opt"}], "]"}], "//", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Distribution\>\"", ",", "or", ",", "i", ",", "#", ",", 
            RowBox[{"{", "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"select", "[", 
             RowBox[{
              RowBox[{"indices", "[", 
               RowBox[{"{", "terms", "}"}], "]"}], ",", 
              RowBox[{"unequal", "[", "#", "]"}], ",", "opt"}], "]"}]}], 
           "}"}]}], "]"}], "&"}], "]"}]}], "//", 
     RowBox[{
      RowBox[{"Flatten", "[", 
       RowBox[{"#", ",", "1"}], "]"}], "&"}]}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findAndDistributive", "[", "opt_", "]"}], "[", 
     RowBox[{"and", "[", "terms__", "]"}], "]"}], " ", ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"select", "[", 
       RowBox[{
        RowBox[{"indices", "[", 
         RowBox[{"{", "terms", "}"}], "]"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"{", "terms", "}"}], "[", 
             RowBox[{"[", "#", "]"}], "]"}], "[", 
            RowBox[{"[", "0", "]"}], "]"}], "===", "or"}], ")"}], "&"}], ",", 
        "opt"}], "]"}], "//", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<Distribution\>\"", ",", "and", ",", "i", ",", "#", ",", 
            RowBox[{"{", "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"select", "[", 
             RowBox[{
              RowBox[{"indices", "[", 
               RowBox[{"{", "terms", "}"}], "]"}], ",", 
              RowBox[{"unequal", "[", "#", "]"}], ",", "opt"}], "]"}]}], 
           "}"}]}], "]"}], "&"}], "]"}]}], "//", 
     RowBox[{
      RowBox[{"Flatten", "[", 
       RowBox[{"#", ",", "1"}], "]"}], "&"}]}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findOrDistributive", "[", "_", "]"}], "[", "_", "]"}], " ", ":=",
     " ", 
    RowBox[{"{", "}"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findAndDistributive", "[", "_", "]"}], "[", "_", "]"}], " ", ":=",
     " ", 
    RowBox[{"{", "}"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findAssociative", "[", "opt_", "]"}], "[", 
     RowBox[{"or", "[", "terms__", "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"select", "[", 
      RowBox[{
       RowBox[{"indices", "[", 
        RowBox[{"{", "terms", "}"}], "]"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"{", "terms", "}"}], "[", 
            RowBox[{"[", "#", "]"}], "]"}], "[", 
           RowBox[{"[", "0", "]"}], "]"}], "===", "or"}], ")"}], "&"}], ",", 
       "opt"}], "]"}], "//", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Association\>\"", ",", 
         RowBox[{"{", "#", "}"}]}], "}"}], "&"}], "]"}]}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findAssociative", "[", "opt_", "]"}], "[", 
     RowBox[{"and", "[", "terms__", "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"select", "[", 
      RowBox[{
       RowBox[{"indices", "[", 
        RowBox[{"{", "terms", "}"}], "]"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"{", "terms", "}"}], "[", 
            RowBox[{"[", "#", "]"}], "]"}], "[", 
           RowBox[{"[", "0", "]"}], "]"}], "===", "and"}], ")"}], "&"}], ",", 
       "opt"}], "]"}], "//", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Association\>\"", ",", 
         RowBox[{"{", "#", "}"}]}], "}"}], "&"}], "]"}]}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findAssociative", "[", "_", "]"}], "[", "_", "]"}], " ", ":=", 
    RowBox[{"{", "}"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"matching", "[", 
     RowBox[{"list1_", ",", "list2_"}], "]"}], ":=", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", "i"}], "}"}], "&"}], "/@", "list1"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "list2"}], "}"}]}], "]"}], ",", "1"}], "]"}]}], 
   "\n", 
   RowBox[{
    RowBox[{"findElementInTerm", "[", 
     RowBox[{"terms_", ",", "ele_"}], "]"}], ":=", 
    RowBox[{"SelectFirst", "[", 
     RowBox[{
      RowBox[{"List", "@@", "terms"}], ",", 
      RowBox[{
       RowBox[{"ele", "==", " ", "#"}], "&"}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findAbsorption", "[", "opt_", "]"}], "[", 
     RowBox[{"and", "[", "terms__", "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"orTerms", "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"indices", "[", 
            RowBox[{"{", "terms", "}"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"{", "terms", "}"}], "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "0"}], "]"}], "]"}], "==", " ", "or"}], 
            "&"}]}], "]"}]}], "}"}], ",", "\n", 
       RowBox[{"select", "[", 
        RowBox[{
         RowBox[{"matching", "[", 
          RowBox[{"orTerms", ",", 
           RowBox[{"indices", "[", 
            RowBox[{"{", "terms", "}"}], "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"findElementInTerm", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", "terms", "}"}], "[", 
              RowBox[{"[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"{", "terms", "}"}], "[", 
              RowBox[{"[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "]"}], "=!=", 
           
           RowBox[{"{", "}"}]}], "&"}], ",", "opt"}], "]"}]}], "]"}], "//", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Absorption\>\"", ",", 
         RowBox[{"Sequence", "@@", "#"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], "&"}], "]"}]}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findAbsorption", "[", "opt_", "]"}], "[", 
     RowBox[{"or", "[", "terms__", "]"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"andTerms", "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"indices", "[", 
            RowBox[{"{", "terms", "}"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"{", "terms", "}"}], "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "0"}], "]"}], "]"}], "==", " ", "and"}], 
            "&"}]}], "]"}]}], "}"}], ",", "\n", 
       RowBox[{"select", "[", 
        RowBox[{
         RowBox[{"matching", "[", 
          RowBox[{"andTerms", ",", 
           RowBox[{"indices", "[", 
            RowBox[{"{", "terms", "}"}], "]"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"findElementInTerm", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", "terms", "}"}], "[", 
              RowBox[{"[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"{", "terms", "}"}], "[", 
              RowBox[{"[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "]"}], "=!=", 
           
           RowBox[{"{", "}"}]}], "&"}], ",", "opt"}], "]"}]}], "]"}], "//", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Absorption\>\"", ",", 
         RowBox[{"Sequence", "@@", "#"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], "&"}], "]"}]}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"findAbsorption", "[", "_", "]"}], "[", "_", "]"}], ":=", 
    RowBox[{"{", "}"}]}], "\n"}]}]], "Code",
 CellLabel->"In[15]:=",ExpressionUUID->"4a1e6748-6fb9-45d3-9ff1-67b7ce69dd8d"]
}, Closed]],

Cell[CellGroupData[{

Cell["Potential Step", "Subsection",ExpressionUUID->"cf17cba6-7e88-4895-b165-8229bfa6fa28"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
     "findPotentialStep", " ", "returns", " ", "potential", " ", "steps", " ",
       "of", " ", "any", " ", "pattern", " ", "from", " ", "any", " ", 
      "layer", " ", "of", " ", "a", " ", "given", " ", "expression", "\n", 
      RowBox[{"input", ":", "\n", "\t", 
       RowBox[{"opt_:", " ", "All", " ", "or", " ", "1"}]}]}], ";", "\n", 
     "\t", 
     RowBox[{"seq_:", " ", "CNF"}]}], ",", " ", "DNF", ",", " ", 
    RowBox[{
     RowBox[{"or", " ", "full"}], ";", "\n", "\t", 
     RowBox[{"e_:", " ", "a", " ", "boolean", " ", "expression"}], ";", "\n", 
     
     RowBox[{"output", ":", "\n", " \t", 
      RowBox[{"if", " ", "opt", " ", "is", " ", "1"}]}]}], ",", " ", 
    RowBox[{
    "returns", " ", "one", " ", "potential", " ", "step", " ", "of", " ", 
     "any", " ", "pattern", " ", "from", " ", "some", " ", "layer", " ", "of",
      " ", "the", " ", "expression", "\n", "\t", "if", " ", "opt", " ", "is", 
     " ", "all"}], ",", " ", 
    RowBox[{
    "returns", " ", "all", " ", "potential", " ", "step", " ", "of", " ", 
     "all", " ", "patterns", " ", "from", " ", "all", " ", "layers", " ", 
     "of", " ", "the", " ", "expression", "\n", "\t", "returns", " ", 
     RowBox[{"{", "}"}], " ", "if", " ", "no", " ", "potential", " ", "steps",
      " ", "of", " ", "any", " ", "given", " ", "pattern", " ", "exist", " ", 
     "in", " ", "any", " ", "layer", " ", "of", " ", "the", " ", 
     "expression"}], ",", " ", 
    RowBox[{
    "this", " ", "happens", " ", "when", " ", "the", " ", "expression", " ", 
     "is", " ", "in", " ", "normal", " ", "form"}]}], " ", "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"CNF", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
      "findDoubleNegation", ",", "findLiteral", ",", "findDeMorgan", ",", " ",
        "findAssociative", ",", "findIdempotent", ",", " ", 
       "findOrDistributive", ",", "findNegation", ",", "findAbsorption"}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"DNF", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
      "findDoubleNegation", ",", "findLiteral", ",", "findDeMorgan", ",", " ",
        "findAssociative", ",", "findIdempotent", ",", " ", 
       "findAndDistributive", ",", "findNegation", ",", "findAbsorption"}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"full", " ", "=", " ", 
     RowBox[{"Union", "[", 
      RowBox[{"CNF", ",", "DNF"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"findPotentialStep", "[", "seq_", "]"}], "[", "1", "]"}], "[", 
     "e_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "result", "}"}], ",", 
      RowBox[{
       RowBox[{"SelectFirst", "[", 
        RowBox[{"seq", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"result", " ", "=", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"recursion", "[", "1", "]"}], "[", "#", "]"}], "[", 
              "e", "]"}]}], ")"}], "=!=", 
           RowBox[{"{", "}"}]}], "&"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ";", 
       RowBox[{"first", "[", "result", "]"}]}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"findPotentialStep", "[", "seq_", "]"}], "[", "All", "]"}], "[",
      "e_", "]"}], " ", ":=", 
    RowBox[{"Join", "@@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"recursion", "[", "All", "]"}], "[", "find", "]"}], "[", "e",
         "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"find", ",", "seq"}], "}"}]}], "]"}]}]}]}]}]], "Code",
 CellLabel->"In[42]:=",ExpressionUUID->"0d1e3dec-526b-4d0c-9369-ff0be5f9d64f"],

Cell[BoxData[""], "Input",ExpressionUUID->"744b32e2-8aa1-49e4-92fb-a48eeb0044a5"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Apply Steps", "Section",ExpressionUUID->"c76ffde0-34ef-44cb-8343-5c9412fb5272"],

Cell[CellGroupData[{

Cell["Helpers", "Subsection",ExpressionUUID->"b86eb2e4-f956-4772-aa50-c5cbbc228d81"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "these", " ", "helper", " ", "functions", " ", "add", " ", "options", " ", 
    "to", " ", "replace", " ", "or", " ", "extract", " ", "entire", " ", 
    "expressions"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"replacePart", "[", 
     RowBox[{"e_", ",", 
      RowBox[{
       RowBox[{"{", "}"}], "->", "new_"}]}], "]"}], ":=", " ", "new"}], "\n", 
   
   RowBox[{
    RowBox[{"replacePart", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"loc_", "->", "new_"}]}], "]"}], ":=", " ", 
    RowBox[{"ReplacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{"loc", "->", "new"}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"extract", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", "}"}]}], "]"}], ":=", " ", "e"}], "\n", 
   RowBox[{
    RowBox[{"extract", "[", 
     RowBox[{"e_", ",", "loc_"}], "]"}], ":=", " ", 
    RowBox[{"Extract", "[", 
     RowBox[{"e", ",", "loc"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"reduceSingle", "[", "e_", "]"}], ":=", " ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "e", "]"}], "<=", "1"}], ",", 
      RowBox[{"e", "[", 
       RowBox[{"[", "1", "]"}], "]"}], ",", "e"}], "]"}]}]}]}]], "Code",
 CellLabel->"In[47]:=",ExpressionUUID->"2a13fb7d-7cfd-442e-af19-bf825cb92a06"]
}, Closed]],

Cell[CellGroupData[{

Cell["Apply Step", "Subsection",ExpressionUUID->"6f480ad8-6d54-476b-bfb3-4d1b9d1e5a85"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "applyStep", " ", "takes", " ", "a", " ", "boolean", " ", "expression", 
     " ", "and", " ", "a", " ", "step"}], ",", " ", 
    RowBox[{
    "and", " ", "returns", " ", "a", " ", "boolean", " ", "expression", " ", 
     "with", " ", "the", " ", "step", " ", "applied"}]}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", "}"}]}], "]"}], ":=", 
    RowBox[{"{", "}"}]}], "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Identity\>\"", ",", "_", ",", "loc_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{
       RowBox[{"Most", "[", "loc", "]"}], "->", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"extract", "[", 
            RowBox[{"e", ",", 
             RowBox[{"Most", "[", "loc", "]"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"Last", "[", "loc", "]"}], "}"}]}], "]"}], " ", "//", " ",
          "reduceSingle"}], ")"}]}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Domination\>\"", ",", "\"\<and\>\"", ",", "loc_"}], 
       "}"}]}], "]"}], ":=", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{
       RowBox[{"Most", "[", "loc", "]"}], "->", " ", "false"}]}], "]"}]}], 
   "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Domination\>\"", ",", "\"\<or\>\"", ",", "loc_"}], 
       "}"}]}], "]"}], ":=", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{
       RowBox[{"Most", "[", "loc", "]"}], "->", " ", "true"}]}], "]"}]}], 
   "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<True\>\"", ",", "_", ",", "loc_"}], "}"}]}], "]"}], ":=", 
    
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{
       RowBox[{"Most", "[", "loc", "]"}], "->", "true"}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<False\>\"", ",", "_", ",", "loc_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{
       RowBox[{"Most", "[", "loc", "]"}], "->", "false"}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Idempotent\>\"", ",", "loc_"}], "}"}]}], "]"}], ":=", " ", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{
       RowBox[{"Most", "[", "loc", "]"}], "->", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"extract", "[", 
            RowBox[{"e", ",", 
             RowBox[{"Most", "[", "loc", "]"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Last", "[", "loc", "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}], " ", "//", " ", 
         "reduceSingle"}], ")"}]}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Negation\>\"", ",", "\"\<and\>\"", ",", "loc_"}], "}"}]}],
      "]"}], ":=", " ", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{
       RowBox[{"Most", "[", "loc", "]"}], "->", " ", "false"}]}], "]"}]}], 
   "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Negation\>\"", ",", "\"\<or\>\"", ",", "loc_"}], "}"}]}], 
     "]"}], ":=", " ", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{
       RowBox[{"Most", "[", "loc", "]"}], "->", " ", "true"}]}], "]"}]}], 
   "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Double Negation\>\"", ",", "loc_"}], "}"}]}], "]"}], " ", 
    ":=", " ", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{"loc", "->", 
       RowBox[{"extract", "[", 
        RowBox[{"e", ",", 
         RowBox[{"Join", "[", 
          RowBox[{"loc", ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}]}]}], "]"}]}], 
   "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<De Morgan\>\"", ",", "\"\<and\>\"", ",", "loc_"}], 
       "}"}]}], "]"}], ":=", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{"loc", "->", 
       RowBox[{"or", " ", "@@", 
        RowBox[{"not", " ", "/@", " ", 
         RowBox[{
          RowBox[{"extract", "[", 
           RowBox[{"e", ",", "loc"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}]}]}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<De Morgan\>\"", ",", "\"\<or\>\"", ",", "loc_"}], "}"}]}],
      "]"}], ":=", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{"loc", "->", 
       RowBox[{"and", " ", "@@", 
        RowBox[{"not", " ", "/@", " ", 
         RowBox[{
          RowBox[{"extract", "[", 
           RowBox[{"e", ",", "loc"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}]}]}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Distribution\>\"", ",", "oper_", ",", "left_", ",", "right_", ",",
         "loc_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "smaller", ",", "bigger", ",", "orig", ",", "dropped", ",", "new"}], 
       "}"}], ",", "\n", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"smaller", ",", "bigger"}], "}"}], "=", 
        RowBox[{"Sort", "@", 
         RowBox[{"{", 
          RowBox[{"left", ",", "right"}], "}"}]}]}], ";", "\n", 
       RowBox[{"orig", "=", 
        RowBox[{"extract", "[", 
         RowBox[{"e", ",", "loc"}], "]"}]}], ";", "\n", 
       RowBox[{"dropped", "=", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Drop", "[", 
             RowBox[{"#", ",", 
              RowBox[{"{", "smaller", "}"}]}], "]"}], "&"}], "@", 
           RowBox[{"Drop", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", "bigger", "}"}]}], "]"}]}], "&"}], "@", " ", 
         "orig"}]}], ";", "\n", 
       RowBox[{"new", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"oper", "[", 
           RowBox[{
            RowBox[{"orig", "[", 
             RowBox[{"[", "left", "]"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         RowBox[{"orig", "[", 
          RowBox[{"[", "right", "]"}], "]"}]}]}], ";", "\n", 
       RowBox[{"replacePart", "[", 
        RowBox[{"e", ",", 
         RowBox[{"loc", "->", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Append", "[", 
             RowBox[{"dropped", ",", "new"}], "]"}], "//", "reduceSingle"}], 
           ")"}]}]}], "]"}]}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Association\>\"", ",", "loc_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{
       RowBox[{"Most", "[", "loc", "]"}], "->", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"extract", "[", 
            RowBox[{"e", ",", 
             RowBox[{"Most", "[", "loc", "]"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"Last", "[", "loc", "]"}], "}"}]}], "]"}], ",", 
         RowBox[{"extract", "[", 
          RowBox[{"e", ",", "loc"}], "]"}]}], "]"}]}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"applyStep", "[", 
     RowBox[{"e_", ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Absorption\>\"", ",", "tIndex_", ",", "eIndex_", ",", "loc_"}], 
       "}"}]}], "]"}], ":=", 
    RowBox[{"replacePart", "[", 
     RowBox[{"e", ",", 
      RowBox[{"loc", "->", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"extract", "[", 
            RowBox[{"e", ",", "loc"}], "]"}], ",", 
           RowBox[{"{", "tIndex", "}"}]}], "]"}], "//", " ", "reduceSingle"}],
         ")"}]}]}], "]"}]}]}]}]], "Code",
 CellLabel->"In[52]:=",ExpressionUUID->"15229fb0-0a3e-4a7c-92bb-669de756aa2a"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Reduce Expressions ", "Section",ExpressionUUID->"dfe7b81c-e344-45fe-bef7-dcd80b3956be"],

Cell[CellGroupData[{

Cell["Helpers", "Subsection",ExpressionUUID->"e5e0231e-f848-40e7-a393-79c38a83d8b8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"first", "[", 
     RowBox[{"{", "}"}], "]"}], " ", "=", " ", 
    RowBox[{"{", "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"first", "[", "list_", "]"}], " ", ":=", " ", 
    RowBox[{"First", "[", "list", "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"last", "[", 
     RowBox[{"{", "}"}], "]"}], " ", "=", " ", 
    RowBox[{"{", "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"last", "[", "list_", "]"}], " ", ":=", " ", 
    RowBox[{"Last", "[", "list", "]"}]}], ";"}], " "}]}], "Code",
 CellLabel->"In[67]:=",ExpressionUUID->"ef31050e-52d8-4120-b6ad-90f7b2c9aa82"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reduce Expressions with a List of Steps", "Subsection",ExpressionUUID->"06ab7241-0472-4754-a070-d67764571a97"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "\n", 
   RowBox[{
    RowBox[{
    "reduceList", " ", "returns", " ", "a", " ", "list", " ", "of", " ", 
     "steps", " ", "and", " ", "expressions", " ", "that", " ", "reduces", 
     " ", "the", " ", "given", " ", "boolean", " ", "to", " ", "CNF", " ", 
     "or", " ", "DNF"}], ";", "\n", 
    RowBox[{"input", ":", "\n", "\t", 
     RowBox[{"seq_:", " ", "CNF", " ", "or", " ", "DNF"}]}], ";", "\n", "\t", 
    
    RowBox[{"e_:", " ", "a", " ", "boolean", " ", "expression"}], ";", "\n", 
    RowBox[{"output", ":", "\n", " \t", 
     RowBox[{"a", " ", "list", " ", "of", " ", 
      RowBox[{"{", 
       RowBox[{"expression", ",", " ", "location", ",", " ", "rule"}], 
       "}"}]}]}]}], " ", "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"reduceList", "[", "seq_", "]"}], "[", "e_", "]"}], ":=", "\n", 
    RowBox[{"NestWhileList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"trans", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"findPotentialStep", "[", "seq", "]"}], "[", "1", "]"}], 
            "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"applyStep", "[", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "trans"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "trans"}], "}"}]}], "]"}], 
       "&"}], ",", 
      RowBox[{"{", 
       RowBox[{"e", ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Initial\>\"", ",", 
          RowBox[{"{", "}"}]}], "}"}]}], "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "=!=", 
        RowBox[{"{", "}"}]}], "&"}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"reduceListExpression", "[", "seq_", "]"}], "[", "e_", "]"}], ":=", 
    RowBox[{"NestWhileList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"applyStep", "[", 
        RowBox[{"#", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"findPotentialStep", "[", "seq", "]"}], "[", "1", "]"}], 
          "[", "#", "]"}]}], "]"}], "&"}], ",", "e", ",", 
      RowBox[{
       RowBox[{"#", "=!=", 
        RowBox[{"{", "}"}]}], "&"}]}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"reduceExpression", "[", "seq_", "]"}], "[", "e_", "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"reduceListExpression", "[", "seq", "]"}], "[", "e", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"-", "2"}], "]"}], "]"}]}]}]}]], "Code",
 CellLabel->"In[71]:=",ExpressionUUID->"cca8c615-c441-4348-ab89-d2c61f5c4017"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Find Shortest Path", "Section",ExpressionUUID->"113d13fe-c389-4b49-ac0d-be2474d562e9"],

Cell[CellGroupData[{

Cell["Find Shortest Path", "Subsection",ExpressionUUID->"d4265a45-203a-4c60-b652-f507ae91eabe"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"shortestRoute", "[", 
    RowBox[{"e1_", ",", "e2_"}], "]"}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"reduceExpression", "[", "CNF", "]"}], "[", "e1", "]"}], "==", 
       RowBox[{
        RowBox[{"reduceExpression", "[", "CNF", "]"}], "[", "e2", "]"}]}], 
      ",", "True", ",", 
      RowBox[{"findShortestRoute", "[", 
       RowBox[{"e1", ",", "e2"}], "]"}], ",", "False", ",", 
      RowBox[{"{", "}"}]}], "]"}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"findShortestRoute", "[", 
    RowBox[{"e1_", ",", "e2_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"edges1", "=", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"e1", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<Initial\>\"", ",", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "}"}]}], ",", 
        RowBox[{"edges2", "=", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"e2", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<End\>\"", ",", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "}"}]}], ",", "meet"}], 
       "}"}], ",", "\n", 
      RowBox[{
       RowBox[{"NestWhile", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"edges1", ",", "edges2"}], "}"}], "=", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"expandEdges", "[", "edges1", "]"}], ",", 
              RowBox[{"expandEdges", "[", "edges2", "]"}]}], "}"}]}], ")"}], 
          "&"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"meet", "=", 
             RowBox[{"findCommonEdge", "[", 
              RowBox[{"edges1", ",", "edges2"}], "]"}]}], ")"}], "===", 
           RowBox[{"{", "}"}]}], "&"}]}], "]"}], ";", "\n", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"tracePath", "[", 
          RowBox[{"edges1", ",", 
           RowBox[{"meet", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"meet", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}], ",", 
         RowBox[{"reverseTracePath", "[", 
          RowBox[{"tracePath", "[", 
           RowBox[{"edges2", ",", 
            RowBox[{"meet", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"meet", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "}"}]}], "]"}], "]"}]}], 
        "]"}]}]}], "]"}], "//", 
    RowBox[{
     RowBox[{"DeleteCases", "[", 
      RowBox[{"#", ",", 
       RowBox[{"x_List", "/;", 
        RowBox[{
         RowBox[{"Length", "[", "x", "]"}], "==", "0"}]}]}], "]"}], "&"}]}]}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"reduceShortestList", "[", "seq_", "]"}], "[", "e_", "]"}], ":=", 
  RowBox[{"findShortestRoute", "[", 
   RowBox[{"e", ",", 
    RowBox[{
     RowBox[{"reduceExpression", "[", "seq", "]"}], "[", "e", "]"}]}], 
   "]"}]}]}], "Code",
 CellLabel->"In[74]:=",ExpressionUUID->"a1d6a6b9-1273-4e46-90e9-24a2b1df1aab"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Helper for Visualization", "Subsection",ExpressionUUID->"37ef2c81-ca8e-46a2-9019-989895a55163"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"displayList", "[", "list_", "]"}], ":=", 
  RowBox[{
   RowBox[{"list", "//", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"first", "[", 
         RowBox[{"last", "[", "#", "]"}], "]"}], ",", 
        RowBox[{"last", "[", 
         RowBox[{"last", "[", "#", "]"}], "]"}], ",", 
        RowBox[{"first", "[", "#", "]"}]}], "}"}], "&"}], "]"}]}], "//", 
   "TableForm"}]}], "\n", 
 RowBox[{
  RowBox[{"graph", "[", "edges_", "]"}], ":=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "->", 
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "&"}], "/@", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{"edges", ",", 
      RowBox[{"a_List", "/;", 
       RowBox[{
        RowBox[{"a", "[", 
         RowBox[{"[", 
          RowBox[{"3", ",", "1"}], "]"}], "]"}], "==", 
        "\"\<Initial\>\""}]}]}], "]"}]}], "]"}]}]}], "Code",
 CellLabel->"In[78]:=",ExpressionUUID->"3efa0223-fcb6-43e3-ad73-42370122e7eb"]
}, Closed]],

Cell[CellGroupData[{

Cell["Operations on Edges", "Subsection",ExpressionUUID->"ea3fd134-6a6c-4dd0-8315-74e494453c31"],

Cell[CellGroupData[{

Cell["Find Membership in Edges", "Subsubsection",ExpressionUUID->"ff8c9824-6fdf-4f5c-80b4-16b242c700d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "\n", 
   RowBox[{
    RowBox[{
    "FindMemberInEdges", " ", "checks", " ", "if", " ", "an", " ", 
     "expression", " ", "is", " ", "already", " ", "in", " ", "the", " ", 
     "list", " ", "of", " ", 
     RowBox[{"edges", ".", " ", "\n", 
      RowBox[{"input", ":", "\n", "\t", 
       RowBox[{
       "edges_:", " ", "a", " ", "list", " ", "of", " ", "edge", " ", 
        "structures"}]}]}]}], ";", "\n", "\t", 
    RowBox[{"new_:", " ", "an", " ", "Boolean", " ", "expression"}], ";", 
    "\n", 
    RowBox[{"output", ":", "\n", " \t", 
     RowBox[{
      RowBox[{"{", "}"}], " ", "if", " ", "new", " ", "is", " ", "not", " ", 
      "already", " ", "in", " ", "edges"}]}], ";", "\n", " \t", 
    RowBox[{
    "the", " ", "corresponding", " ", "edge", " ", "structure", " ", "of", 
     " ", "new", " ", "if", " ", "new", " ", "is", " ", "already", " ", "in", 
     " ", 
     RowBox[{"edges", "."}]}]}], "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{"findMemberInEdges", "[", 
    RowBox[{"edges_", ",", "new_"}], "]"}], ":=", 
   RowBox[{"SelectFirst", "[", 
    RowBox[{"edges", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"First", "[", "#", "]"}], "==", " ", "new"}], "&"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}]}]], "Code",
 CellLabel->"In[80]:=",ExpressionUUID->"dd083bf1-cc70-4f51-a13e-c4695e810c94"]
}, Closed]],

Cell[CellGroupData[{

Cell["Find Intersection in Edges", "Subsubsection",ExpressionUUID->"75fe8310-24cc-4451-b629-17287727a975"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "\n", 
   RowBox[{
    RowBox[{
    "FindCommonInEdges", " ", "checks", " ", "if", " ", "two", " ", "list", 
     " ", "of", " ", "edges", " ", "has", " ", 
     RowBox[{"intersection", ".", " ", "\n", 
      RowBox[{"input", ":", "\n", "\t", "n1"}]}]}], ",", " ", 
    RowBox[{
     RowBox[{"n2", ":", " ", 
      RowBox[{
      "two", " ", "lists", " ", "of", " ", "edge", " ", "structure"}]}], ";", 
     "\n", 
     RowBox[{"output", ":", "\n", "\t", 
      RowBox[{
       RowBox[{"{", "}"}], " ", "if", " ", "intersection", " ", "is", " ", 
       "empty"}]}], ";", "\n", "\t", 
     RowBox[{
     "a", " ", "edge", " ", "structure", " ", "in", " ", "the", " ", 
      "intersection", " ", "if", " ", "intersection", " ", "is", " ", "not", 
      " ", 
      RowBox[{"empty", "."}]}]}]}], "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{"findCommonEdge", "[", 
    RowBox[{"n1_", ",", "n2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1", ",", "m2"}], "}"}], ",", 
     RowBox[{
      RowBox[{"m1", "=", 
       RowBox[{"SelectFirst", "[", 
        RowBox[{"n1", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"m2", "=", 
             RowBox[{"findMemberInEdges", "[", 
              RowBox[{"n2", ",", 
               RowBox[{"First", "[", "#", "]"}]}], "]"}]}], ")"}], "=!=", 
           RowBox[{"{", "}"}]}], "&"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", 
      RowBox[{"Switch", "[", 
       RowBox[{"m1", ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "}"}], ",", "_", ",", 
        RowBox[{"{", 
         RowBox[{"m1", ",", "m2"}], "}"}]}], "]"}]}]}], "]"}]}]}]], "Code",
 CellLabel->"In[81]:=",ExpressionUUID->"dc072815-08f3-47cc-a2c4-43609984f0c1"]
}, Closed]],

Cell[CellGroupData[{

Cell["Union Edges", "Subsubsection",ExpressionUUID->"bf2d4599-46ce-4cf5-801f-d00931e89748"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "\n", 
   RowBox[{
    RowBox[{
    "JoinEdges", " ", "joins", " ", "a", " ", "edge", " ", "structure", " ", 
     "into", " ", "a", " ", "list", " ", "of", " ", "edge", " ", "structure", 
     " ", "if", " ", "it", " ", "is", " ", "not", " ", "already", " ", 
     RowBox[{"in", ".", " ", "\n", 
      RowBox[{"input", ":", "\n", "\t", "edges", ":", " ", 
       RowBox[{
       "a", " ", "list", " ", "of", " ", "edge", " ", "structures"}]}]}]}], 
    ";", "\n", "\t", 
    RowBox[{"new", ":", " ", 
     RowBox[{"a", " ", "edge", " ", "structure"}]}], ";", "\n", 
    RowBox[{"output", ":", "\n", "\t", 
     RowBox[{
     "the", " ", "original", " ", "edges", " ", "list", " ", "if", " ", "new",
       " ", "is", " ", "already", " ", "in", " ", "edges"}]}], ";", "\n", 
    "\t", 
    RowBox[{
    "the", " ", "original", " ", "edges", " ", "list", " ", "with", " ", 
     "new", " ", "appended", " ", "if", " ", "new", " ", "is", " ", "not", 
     " ", "already", " ", "in", " ", 
     RowBox[{"edges", "."}]}]}], "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"joinEdges", "[", 
     RowBox[{"edges_", ",", "new_"}], "]"}], ":=", 
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"findMemberInEdges", "[", 
       RowBox[{"edges", ",", 
        RowBox[{"First", "[", "new", "]"}]}], "]"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"Append", "[", 
       RowBox[{"edges", ",", "new"}], "]"}], ",", "_", ",", "edges"}], 
     "]"}]}], "\n", 
   RowBox[{"(*", "\n", 
    RowBox[{
     RowBox[{
     "UnionEdges", " ", "merge", " ", "two", " ", "list", " ", "of", " ", 
      "edges", " ", "and", " ", "removes", " ", "duplicates", " ", "from", 
      " ", "the", " ", "new", " ", 
      RowBox[{"list", ".", " ", "\n", 
       RowBox[{"input", ":", "\n", "\t", "old", ":", " ", 
        RowBox[{
        "a", " ", "list", " ", "of", " ", "edge", " ", "structures"}]}]}]}], 
     ";", "\n", "\t", 
     RowBox[{"new", ":", " ", 
      RowBox[{
      "a", " ", "list", " ", "of", " ", "edge", " ", "structures", " ", "in", 
       " ", "which", " ", "duplicates", " ", "will", " ", "be", " ", 
       "removed"}]}], ";", "\n", 
     RowBox[{"output", ":", "\n", "\t", 
      RowBox[{
      "a", " ", "merged", " ", "list", " ", "of", " ", "edge", " ", 
       "structures"}]}]}], "\n", "*)"}], "\n", 
   RowBox[{
    RowBox[{"unionEdges", "[", 
     RowBox[{"old_", ",", "new_"}], "]"}], ":=", 
    RowBox[{"Fold", "[", 
     RowBox[{"joinEdges", ",", "old", ",", "new"}], "]"}]}]}]}]], "Code",
 CellLabel->"In[82]:=",ExpressionUUID->"db157f71-cc13-478d-876f-4beba407b483"]
}, Closed]],

Cell[CellGroupData[{

Cell["Expand Edges", "Subsubsection",ExpressionUUID->"d9b394c9-df6c-491f-b631-ada747000dc2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"findAllEdges", "[", "e_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"applyStep", "[", 
       RowBox[{"e", ",", "#"}], "]"}], ",", "e", ",", "#"}], "}"}], "&"}], "/@", 
   RowBox[{
    RowBox[{
     RowBox[{"findPotentialStep", "[", "full", "]"}], "[", "All", "]"}], "[", 
    "e", "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"expandEdges", "[", "edges_", "]"}], ":=", 
  RowBox[{"unionEdges", "[", 
   RowBox[{"edges", ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"findAllEdges", "[", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "&"}], "/@", "edges"}], ",", 
      "1"}], "]"}]}], "]"}]}]}], "Code",
 CellLabel->"In[84]:=",ExpressionUUID->"0cb7d8f3-1faa-432a-8d8b-0ed97b1d7862"]
}, Closed]],

Cell[CellGroupData[{

Cell["Trace Path ", "Subsubsection",ExpressionUUID->"9a39f724-54c2-4419-9579-41ae70f5f040"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tracePath", "[", 
   RowBox[{"_", ",", 
    RowBox[{"{", "}"}], ",", "trace_"}], "]"}], ":=", " ", "trace"}], "\n", 
 RowBox[{
  RowBox[{"tracePath", "[", 
   RowBox[{"edges_", ",", "end_", ",", "trace_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"lastEdge", "=", 
      RowBox[{"findMemberInEdges", "[", 
       RowBox[{"edges", ",", 
        RowBox[{"end", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"tracePath", "[", 
     RowBox[{"edges", ",", "lastEdge", ",", 
      RowBox[{"Prepend", "[", 
       RowBox[{"trace", ",", "lastEdge"}], "]"}]}], "]"}]}], "]"}]}]}], "Code",\

 CellLabel->"In[86]:=",ExpressionUUID->"fab31a20-d54c-4bd1-9d83-cffa23356ef0"]
}, Closed]],

Cell[CellGroupData[{

Cell["Reverse Path", "Subsubsection",ExpressionUUID->"13f9bfc3-0371-437d-a468-2460f192b5ad"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"reverseTracePath", "[", "edges_", "]"}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{"reverseEdge", "/@", " ", "edges"}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Initial\>\"", ",", 
       RowBox[{"{", "}"}]}], "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"curr", ",", "prev", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Initial\>\"", ",", 
      RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<End\>\"", ",", 
       RowBox[{"{", "}"}]}], "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"curr", ",", "prev", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<End\>\"", ",", 
      RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Identity\>\"", ",", "oper_", ",", "loc_"}], "}"}]}], "}"}],
    "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"prev", ",", "curr", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Identity'\>\"", ",", "oper", ",", 
      RowBox[{"Most", "[", "loc", "]"}]}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Domination\>\"", ",", "oper_", ",", "loc_"}], "}"}]}], 
    "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"prev", ",", "curr", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Domination'\>\"", ",", "oper", ",", 
      RowBox[{"Most", "[", "loc", "]"}]}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<False\>\"", ",", "oper_", ",", "loc_"}], "}"}]}], "}"}], 
   "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"prev", ",", "curr", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<False'\>\"", ",", "oper", ",", 
      RowBox[{"Most", "[", "loc", "]"}]}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<True\>\"", ",", "oper_", ",", "loc_"}], "}"}]}], "}"}], 
   "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"prev", ",", "curr", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<True'\>\"", ",", "oper", ",", 
      RowBox[{"Most", "[", "loc", "]"}]}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Idempotent\>\"", ",", "loc_"}], "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"prev", ",", "curr", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Idempotent'\>\"", ",", 
      RowBox[{"Most", "[", "loc", "]"}]}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Negation\>\"", ",", "oper_", ",", "loc_"}], "}"}]}], "}"}],
    "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"prev", ",", "curr", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Negation'\>\"", ",", "oper", ",", 
      RowBox[{"Most", "[", "loc", "]"}]}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Double Negation\>\"", ",", "loc_"}], "}"}]}], "}"}], "]"}],
   ":=", 
  RowBox[{"{", 
   RowBox[{"prev", ",", "curr", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Double Negation'\>\"", ",", "loc"}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"reverseEdge", "[", 
    RowBox[{"{", 
     RowBox[{"curr_", ",", "prev_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<De Morgan\>\"", ",", "_", ",", "loc_"}], "}"}]}], "}"}], 
    "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"prev", ",", "curr", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<De Morgan'\>\"", ",", "loc"}], "}"}]}], "}"}]}], 
  RowBox[{"(*", " ", 
   RowBox[{"change", " ", "for", " ", "better", " ", "explanation"}], " ", 
   "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"reverseEdge", "[", 
    RowBox[{"{", 
     RowBox[{"curr_", ",", "prev_", ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Distribution\>\"", ",", "oper_", ",", "tIndex_", ",", "eIndex_", 
        ",", "loc_"}], "}"}]}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"prev", ",", "curr", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Distribution'\>\"", ",", "loc"}], "}"}]}], "}"}]}], 
  RowBox[{"(*", " ", 
   RowBox[{"change", " ", "for", " ", "better", " ", "explanation"}], " ", 
   "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Association\>\"", ",", "loc_"}], "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"prev", ",", "curr", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Association'\>\"", ",", 
      RowBox[{"Most", "[", "loc", "]"}]}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Absorption\>\"", ",", "_", ",", "_", ",", "loc_"}], 
      "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"prev", ",", "curr", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Absorption'\>\"", ",", "loc"}], "}"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"reverseEdge", "[", "_", "]"}], ":=", 
  RowBox[{"{", "}"}]}]}], "Code",
 CellLabel->"In[88]:=",ExpressionUUID->"bed2edba-2b13-44da-84a2-84253070632d"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Generate Proof Notebook", "Section",ExpressionUUID->"4654e6c6-302a-4c64-9909-5fd296cd81e7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"generateProofNotebook", "[", "list_", "]"}], ":=", 
  RowBox[{"DocumentNotebook", "[", 
   RowBox[{"Join", "@@", 
    RowBox[{"(", 
     RowBox[{"convertProofCell", "/@", "list"}], ")"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Initial\>\"", ",", 
       RowBox[{"{", "}"}]}], "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
    "TextCell", "[", "\"\<We want to reduce the expression:\>\"", "]"}], ",", 
    
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<End\>\"", ",", 
       RowBox[{"{", "}"}]}], "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
    "TextCell", "[", "\"\<Now we have reached our target form\>\"", "]"}], 
    ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Identity\>\"", ",", "oper_", ",", "loc_"}], "}"}]}], "}"}],
    "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"TextCell", "[", 
     RowBox[{
     "\"\<By Identity rule of \\\"\>\"", "<>", "oper", "<>", 
      "\"\<\\\", we can remove the literal in \>\""}], "]"}], ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", "loc"}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Domination\>\"", ",", "oper_", ",", "loc_"}], "}"}]}], 
    "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"TextCell", "[", 
     RowBox[{
     "\"\<By Domination rule of \\\"\>\"", "<>", "oper", "<>", 
      "\"\<\\\", we can reduce the \\\"\>\"", "<>", "oper", "<>", 
      "\"\<\\\" term to a literal\>\""}], "]"}], ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", 
       RowBox[{"{", 
        RowBox[{"loc", ",", 
         RowBox[{"Most", "[", "loc", "]"}]}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<False\>\"", ",", "_", ",", "loc_"}], "}"}]}], "}"}], "]"}],
   ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
    "TextCell", "[", "\"\<We can reduce the \\\"not\\\" term to literal\>\"", 
     "]"}], ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", 
       RowBox[{"{", 
        RowBox[{"Most", "[", "loc", "]"}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<True\>\"", ",", "_", ",", "loc_"}], "}"}]}], "}"}], "]"}], 
  ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
    "TextCell", "[", "\"\<We can reduce the \\\"not\\\" term to literal\>\"", 
     "]"}], ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", 
       RowBox[{"{", 
        RowBox[{"Most", "[", "loc", "]"}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Idempotent\>\"", ",", "loc_"}], "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
    "TextCell", "[", 
     "\"\<By Idempotent rule, we can remove one of the duplicates\>\"", "]"}],
     ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", 
       RowBox[{"toList", "[", "loc", "]"}]}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Negation\>\"", ",", "oper_", ",", "loc_"}], "}"}]}], "}"}],
    "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
    "TextCell", "[", "\"\<By Negation rule, we can reduce the term\>\"", 
     "]"}], ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"toList", "[", "loc", "]"}], ",", 
         RowBox[{"Most", "[", "loc", "]"}]}], "]"}]}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Double Negation\>\"", ",", "loc_"}], "}"}]}], "}"}], "]"}],
   ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
    "TextCell", "[", "\"\<We can reduce the double negation\>\"", "]"}], ",", 
    
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", "loc"}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<De Morgan\>\"", ",", "_", ",", "loc_"}], "}"}]}], "}"}], 
   "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
    "TextCell", "[", 
     "\"\<By De Morgan's law, we can rewrite the expression\>\"", "]"}], ",", 
    
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", "loc"}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Distribution\>\"", ",", "oper_", ",", "tIndex_", ",", "eIndex_", 
       ",", "loc_"}], "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
    "TextCell", "[", "\"\<By Distributive rule, we can expand the terms\>\"", 
     "]"}], ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Append", "[", 
          RowBox[{"loc", ",", "tIndex"}], "]"}], ",", 
         RowBox[{"Append", "[", 
          RowBox[{"loc", ",", "eIndex"}], "]"}]}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Association\>\"", ",", "loc_"}], "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
    "TextCell", "[", "\"\<By Associative rule, we can flatten the term\>\"", 
     "]"}], ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", 
       RowBox[{"{", 
        RowBox[{"loc", ",", 
         RowBox[{"Most", "[", "loc", "]"}]}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"convertProofCell", "[", 
    RowBox[{"{", 
     RowBox[{"curr_", ",", "prev_", ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Absorption\>\"", ",", "tIndex_", ",", "eIndex_", ",", "loc_"}], 
       "}"}]}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "TextCell", "[", "\"\<By Absorption rule, we can reduce the term\>\"", 
      "]"}], ",", 
     RowBox[{"expressionCell", "[", 
      RowBox[{"highlight", "[", 
       RowBox[{"prev", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Append", "[", 
           RowBox[{"loc", ",", "tIndex"}], "]"}], ",", 
          RowBox[{"Append", "[", 
           RowBox[{"loc", ",", "eIndex"}], "]"}]}], "}"}]}], "]"}], "]"}], 
     ",", 
     RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
     RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Identity'\>\"", ",", "oper_", ",", "loc_"}], "}"}]}], 
    "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"TextCell", "[", 
     RowBox[{
     "\"\<By Identity rule of \\\"\>\"", "<>", "oper", "<>", 
      "\"\<\\\", we can add a literal in \>\""}], "]"}], ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", "loc"}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", "curr", "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"convertProofCell", "[", 
   RowBox[{"{", 
    RowBox[{"curr_", ",", "prev_", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Domination'\>\"", ",", "oper_", ",", "loc_"}], "}"}]}], 
    "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"TextCell", "[", 
     RowBox[{
     "\"\<By Domination rule of \\\"\>\"", "<>", "oper", "<>", 
      "\"\<\\\", we can change the literal to a term \>\""}], "]"}], ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"prev", ",", "loc"}], "]"}], "]"}], ",", 
    RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
    RowBox[{"expressionCell", "[", 
     RowBox[{"highlight", "[", 
      RowBox[{"curr", ",", "loc"}], "]"}], "]"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"convertProofCell", "[", 
    RowBox[{"{", 
     RowBox[{"curr_", ",", "prev_", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Distribution'\>\"", ",", "loc_"}], "}"}]}], "}"}], "]"}], 
   ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "TextCell", "[", "\"\<By Distribution rule, we can reduce the term \>\"",
       "]"}], ",", 
     RowBox[{"expressionCell", "[", 
      RowBox[{"highlight", "[", 
       RowBox[{"prev", ",", "loc"}], "]"}], "]"}], ",", 
     RowBox[{"TextCell", "[", "\"\<Then we get \>\"", "]"}], ",", 
     RowBox[{"expressionCell", "[", 
      RowBox[{"highlight", "[", 
       RowBox[{"curr", ",", "loc"}], "]"}], "]"}]}], "}"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"convertProofCell", "[", "_", "]"}], ":=", 
   RowBox[{"{", "}"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"highlight", "[", 
   RowBox[{"e_", ",", 
    RowBox[{"{", "}"}]}], "]"}], ":=", 
  RowBox[{"Framed", "[", "e", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"highlight", "[", 
   RowBox[{"e_", ",", "loc_"}], "]"}], ":=", 
  RowBox[{"MapAt", "[", 
   RowBox[{"Framed", ",", "e", ",", "loc"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"expressionCell", "[", "e_", "]"}], ":=", 
  RowBox[{"ExpressionCell", "[", 
   RowBox[{"e", ",", "\"\<Input\>\""}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"toList", "[", "loc_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"Append", "[", 
     RowBox[{
      RowBox[{"Most", "[", "loc", "]"}], ",", " ", "#"}], "]"}], " ", "&"}], 
   " ", "/@", " ", 
   RowBox[{"Last", "[", "loc", "]"}]}]}]}], "Code",
 CellLabel->
  "In[103]:=",ExpressionUUID->"43735e51-f2e0-4835-a912-371da66bf18a"]
}, Closed]]
}, Closed]]
}, Open  ]]
},
WindowSize->{720, 855},
WindowMargins->{{360, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   TextData[{
     StyleBox["  WOLFRAM ", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontWeight -> 
      Bold, FontSize -> 40], 
     StyleBox["SUMMER SCHOOL", 
      GrayLevel[1], FontFamily -> "Source Sans Pro", FontSize -> 40], 
     StyleBox[" 2019", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontSize -> 
      40]}], CellFrameMargins -> 10, Background -> 
   RGBColor[0.12, 0.14, 0.15]]},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 572, 8, 160, "Title",ExpressionUUID->"f8275726-ce31-4658-aec7-94c331bd7f8b"],
Cell[1155, 32, 456, 8, 41, "Text",ExpressionUUID->"0a3c56b6-92eb-4206-93ec-35a921c92175"],
Cell[1614, 42, 413, 8, 41, "Text",ExpressionUUID->"96ace16e-bf11-4983-9008-01ffb7d1155d"],
Cell[2030, 52, 984, 15, 364, "Text",ExpressionUUID->"b1ec7ad5-2a4a-423e-9ad2-607bde4d7538"],
Cell[CellGroupData[{
Cell[3039, 71, 171, 3, 69, "Chapter",ExpressionUUID->"9cdbfec4-e189-4622-b05f-3d5877279f4f"],
Cell[3213, 76, 625, 10, 70, "Text",ExpressionUUID->"27bf72b9-0d8f-4827-84c9-0704b4064883"],
Cell[CellGroupData[{
Cell[3863, 90, 1383, 31, 40, "Input",ExpressionUUID->"532ce300-9924-4d5f-ba51-2ce7a2fc5195"],
Cell[5249, 123, 7423, 191, 375, "Output",ExpressionUUID->"a8ec921c-e9cd-4803-8926-ba6679e9e830"]
}, Open  ]],
Cell[12687, 317, 468, 7, 41, "Text",ExpressionUUID->"644fdaec-02ca-4552-827b-99a1da46560f"],
Cell[CellGroupData[{
Cell[13180, 328, 1332, 30, 39, "Input",ExpressionUUID->"0e874c14-4ea4-42ad-94da-916f5d277231"],
Cell[14515, 360, 3953, 104, 227, "Output",ExpressionUUID->"d26f389a-fd6d-4e3e-bdbf-79b8a17e28ce"]
}, Open  ]],
Cell[18483, 467, 945, 14, 70, "Text",ExpressionUUID->"c669766c-db6e-43a5-a614-ee0f96b9cb25"],
Cell[CellGroupData[{
Cell[19453, 485, 1538, 36, 35, "Input",ExpressionUUID->"c1a6eb67-0a0e-4141-bb09-5a92663c1d83"],
Cell[20994, 523, 11730, 297, 239, "Output",ExpressionUUID->"27621fc4-1aba-4df0-bd6d-34cec567d6e6"]
}, Open  ]],
Cell[32739, 823, 588, 10, 41, "Text",ExpressionUUID->"39cd95f7-eb20-4177-9ca9-0b53a434b9ea"],
Cell[CellGroupData[{
Cell[33352, 837, 1639, 40, 154, "Input",ExpressionUUID->"f8a11351-a9fe-473b-bc94-61fe9680a1a0"],
Cell[34994, 879, 18166, 448, 427, "Output",ExpressionUUID->"08b9c273-3abc-430a-a673-e7490f431a6d"]
}, Open  ]],
Cell[53175, 1330, 2084, 45, 128, "Text",ExpressionUUID->"fb75e80b-4c3d-443a-9b0c-a46e6d132e44"],
Cell[CellGroupData[{
Cell[55284, 1379, 115732, 2574, 61, "Input",ExpressionUUID->"fb7b75b2-b0d4-479c-aad2-ffba264c6daf"],
Cell[171019, 3955, 382746, 8031, 362, "Output",ExpressionUUID->"245b67d4-d30e-4db0-a156-805806b9b7a1"]
}, Open  ]],
Cell[553780, 11989, 508, 8, 41, "Text",ExpressionUUID->"1a45ef32-42ce-4b8b-8bf0-aa3562a6482f"]
}, Closed]],
Cell[CellGroupData[{
Cell[554325, 12002, 173, 3, 58, "Chapter",ExpressionUUID->"29c853d3-130e-4ed8-8176-913d1d4e63e1"],
Cell[554501, 12007, 1159, 27, 244, "Text",ExpressionUUID->"e188d3d0-0145-4e54-9414-63e96674bbab"],
Cell[CellGroupData[{
Cell[555685, 12038, 340, 5, 54, "Subsection",ExpressionUUID->"a1e82c2f-6705-4cf6-b145-67cce8bf47f6"],
Cell[556028, 12045, 792, 12, 70, "Text",ExpressionUUID->"a064d27d-8355-4cbc-b1eb-179984d78d93"],
Cell[556823, 12059, 478, 12, 67, "Input",ExpressionUUID->"1a2d70ff-86a3-4f83-a186-c30b9406cde5"],
Cell[557304, 12073, 1257, 24, 70, "Text",ExpressionUUID->"6a432252-de6d-4458-805b-c0739c7c6535"]
}, Closed]],
Cell[CellGroupData[{
Cell[558598, 12102, 277, 4, 53, "Section",ExpressionUUID->"2cf047d2-8895-41dc-a660-ab4592342b09"],
Cell[CellGroupData[{
Cell[558900, 12110, 177, 3, 54, "Subsection",ExpressionUUID->"431874e1-f1c2-43ba-80f1-4841457b4950"],
Cell[559080, 12115, 690, 10, 41, "Text",ExpressionUUID->"130cc6ae-cfbd-4e84-8132-702952fcf306"],
Cell[559773, 12127, 237389, 3897, 541, "Input",ExpressionUUID->"2891ee11-992b-47bd-b03c-7f676cefd24f"],
Cell[797165, 16026, 921, 13, 99, "Text",ExpressionUUID->"8b081665-e36b-4ebc-83e2-8ec811cc4923"]
}, Open  ]],
Cell[CellGroupData[{
Cell[798123, 16044, 308, 5, 54, "Subsection",ExpressionUUID->"1fd2c39a-abaa-465e-8948-70a3cd567663"],
Cell[798434, 16051, 1161, 22, 72, "Text",ExpressionUUID->"4ee185a9-1eb6-40d2-b37a-3c73aa588eab"],
Cell[799598, 16075, 1712, 45, 67, "Input",ExpressionUUID->"733f4581-3b4d-4392-ab0e-a3cc7bcf2c7d"],
Cell[801313, 16122, 597, 9, 41, "Text",ExpressionUUID->"8c0ef332-7cf1-40a9-b7be-a4db2fb2c78b"],
Cell[801913, 16133, 440, 13, 37, "Input",ExpressionUUID->"c13b6a34-8351-4168-8217-14c3139e1008"],
Cell[802356, 16148, 772, 12, 70, "Text",ExpressionUUID->"cb9b797c-382d-4226-8734-42f423664288"]
}, Closed]],
Cell[CellGroupData[{
Cell[803165, 16165, 323, 6, 38, "Subsection",ExpressionUUID->"2849c89b-bf8f-4452-a677-6edb1cf6043a"],
Cell[803491, 16173, 774, 12, 41, "Text",ExpressionUUID->"b43c6016-25da-499e-8b11-e7016e57ebdb"],
Cell[CellGroupData[{
Cell[804290, 16189, 419, 11, 37, "Input",ExpressionUUID->"f6a02896-1cc2-4420-9afa-369878ab32bd"],
Cell[804712, 16202, 332, 9, 41, "Output",ExpressionUUID->"d38a9318-899b-4971-a75c-7511658ecb1f"]
}, Open  ]],
Cell[805059, 16214, 665, 10, 70, "Text",ExpressionUUID->"ce0387d0-29d7-4fcc-ab8f-7eb9e62cda2a"],
Cell[CellGroupData[{
Cell[805749, 16228, 472, 12, 37, "Input",ExpressionUUID->"3f250cda-b9cd-4bce-9c3b-ec0f02650d14"],
Cell[806224, 16242, 632, 16, 41, "Output",ExpressionUUID->"79d14f09-b6dc-4403-8073-0c6bee2dd354"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[806905, 16264, 312, 6, 38, "Subsection",ExpressionUUID->"df097acf-77f5-4ac8-9f5f-f4513defe60d"],
Cell[807220, 16272, 1034, 25, 41, "Text",ExpressionUUID->"6b7c4906-f929-4837-884a-0193937b4280"],
Cell[808257, 16299, 1120, 33, 67, "Input",ExpressionUUID->"58902889-162f-4e04-94f0-09941f289980"],
Cell[809380, 16334, 937, 14, 70, "Text",ExpressionUUID->"2b86ab62-e8ce-4526-a597-1dc9f8c06173"],
Cell[810320, 16350, 823, 12, 41, "Text",ExpressionUUID->"a385258b-3e3e-4318-846a-b08fba9cbe9f"]
}, Closed]],
Cell[CellGroupData[{
Cell[811180, 16367, 233, 4, 38, "Subsection",ExpressionUUID->"383e3340-d378-4892-9d3e-9bb140655cd9"],
Cell[811416, 16373, 1251, 19, 157, "Text",ExpressionUUID->"8908f561-2ec6-4e8b-ae3f-509be7f2e9cf"],
Cell[812670, 16394, 2129, 67, 283, "Input",ExpressionUUID->"4090739c-e6cc-48df-8113-55a0b41e7544"],
Cell[814802, 16463, 1018, 16, 41, "Text",ExpressionUUID->"ab4d24fc-4498-4f1b-93bf-0a866c6383dd"],
Cell[815823, 16481, 1287, 39, 154, "Input",ExpressionUUID->"8a85accc-ff9e-4ff6-ad63-5d299ab96651"],
Cell[817113, 16522, 891, 12, 41, "Text",ExpressionUUID->"8e67d28b-a8db-479f-8b01-bee9d94824af"],
Cell[CellGroupData[{
Cell[818029, 16538, 650, 19, 67, "Input",ExpressionUUID->"cf4a5e1f-ba1d-427d-b896-964b3eec890b"],
Cell[818682, 16559, 30457, 767, 867, "Output",ExpressionUUID->"3db25fcb-cefe-4e02-83bf-2dd0bf28efeb"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[849200, 17333, 223, 4, 67, "Section",ExpressionUUID->"bd55c552-16f2-4364-9b9e-5071f75243d0"],
Cell[CellGroupData[{
Cell[849448, 17341, 324, 5, 54, "Subsection",ExpressionUUID->"2f47f60b-ff4a-4c2c-9d41-5b498bb1cefa"],
Cell[849775, 17348, 1396, 20, 186, "Text",ExpressionUUID->"c8820222-5f5b-471c-bd8d-5f2a5933da33"],
Cell[CellGroupData[{
Cell[851196, 17372, 832, 24, 73, "Input",ExpressionUUID->"6f7825fd-5d1e-46ee-a61e-bd3803b62041"],
Cell[852031, 17398, 3783, 83, 95, "Output",ExpressionUUID->"34219b5a-cf87-4473-ab04-904c5377ed3e"]
}, Open  ]],
Cell[855829, 17484, 1368, 19, 99, "Text",ExpressionUUID->"47d8efe3-94ab-4387-b393-fcfeec1c1edb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[857234, 17508, 347, 5, 54, "Subsection",ExpressionUUID->"4f740238-f1de-4d61-87c4-0e44c98daea8"],
Cell[CellGroupData[{
Cell[857606, 17517, 188, 3, 45, "Subsubsection",ExpressionUUID->"2d8e96d5-059d-4bf0-b977-db74d9befe00"],
Cell[857797, 17522, 1416, 20, 186, "Text",ExpressionUUID->"dcf936ac-7d12-49f8-bd0e-80ea109603d9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[859250, 17547, 239, 4, 45, "Subsubsection",ExpressionUUID->"34ec58c8-fd26-4978-ac61-cb715272aa3f"],
Cell[859492, 17553, 1172, 18, 128, "Text",ExpressionUUID->"99112147-9a59-4db9-9f9c-39c8feb37482"]
}, Closed]],
Cell[CellGroupData[{
Cell[860701, 17576, 202, 3, 37, "Subsubsection",ExpressionUUID->"65548cad-cdd2-4bf2-be5c-d90f852fb126"],
Cell[860906, 17581, 1955, 41, 157, "Text",ExpressionUUID->"2e161a01-97ad-4faa-8561-fc84889049c5"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[862910, 17628, 276, 4, 38, "Subsection",ExpressionUUID->"e8b5ddd2-baed-4d9a-8056-da12c0130658"],
Cell[863189, 17634, 615, 11, 41, "Text",ExpressionUUID->"6aa4dea2-d204-45b8-bdec-61b31b489889"],
Cell[863807, 17647, 2474, 73, 154, "Input",ExpressionUUID->"73e7c0c8-b83c-4add-b517-cc0fb9c25ae0"],
Cell[866284, 17722, 964, 16, 128, "Text",ExpressionUUID->"97584cb4-49a4-4f81-95ba-7ecc693786d6"],
Cell[CellGroupData[{
Cell[867273, 17742, 176, 3, 45, "Subsubsection",ExpressionUUID->"deb4664d-3933-4fe3-9c01-fed929048343"],
Cell[867452, 17747, 861, 15, 70, "Text",ExpressionUUID->"6dc24496-58dc-4b37-8084-64f231c5f252"]
}, Open  ]],
Cell[CellGroupData[{
Cell[868350, 17767, 180, 3, 45, "Subsubsection",ExpressionUUID->"58727210-864d-4e8f-937c-1f4a8a270a63"],
Cell[868533, 17772, 799, 14, 70, "Text",ExpressionUUID->"bf7d5949-2820-4865-933a-2403249c9295"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[869381, 17792, 255, 4, 38, "Subsection",ExpressionUUID->"01b46801-f7b9-456c-a39a-70e051879f1d"],
Cell[869639, 17798, 590, 11, 41, "Text",ExpressionUUID->"2bf623f1-3025-4e86-8260-422a4c1c8b5c"],
Cell[870232, 17811, 152, 3, 30, "Input",ExpressionUUID->"0c6e3bb4-3fd6-4c0c-a5c7-29a9eb71da84"]
}, Closed]]
}, Open  ]],
Cell[870411, 17818, 226, 4, 67, "Section",ExpressionUUID->"8ba49bbd-e1cc-4efc-9536-1489a143176b"]
}, Closed]],
Cell[CellGroupData[{
Cell[870674, 17827, 189, 3, 58, "Chapter",ExpressionUUID->"c8a2ba00-e6fb-4a75-a334-422cb621e1c7"],
Cell[CellGroupData[{
Cell[870888, 17834, 291, 4, 54, "Subsection",ExpressionUUID->"9b948ce8-75f1-4cee-b016-9b6d610dadf8"],
Cell[871182, 17840, 223, 5, 45, "Subsubsection",ExpressionUUID->"02828a4a-b275-4e4f-997b-15da1edb4cf4"],
Cell[871408, 17847, 235, 5, 37, "Subsubsection",ExpressionUUID->"54a3c315-902b-497b-a3c4-279345a52e33"]
}, Closed]],
Cell[871658, 17855, 194, 3, 38, "Subsection",ExpressionUUID->"8f379b68-c7ea-4a54-b2c7-dec7c87599a1"],
Cell[871855, 17860, 207, 3, 38, "Subsection",ExpressionUUID->"b0722244-df38-4f83-8955-b9a80fdc0d7f"]
}, Closed]],
Cell[CellGroupData[{
Cell[872099, 17868, 153, 3, 58, "Chapter",ExpressionUUID->"6cd74ac7-0aaf-4439-b1d8-2086dc8b03fb"],
Cell[872255, 17873, 153, 2, 52, "Code",ExpressionUUID->"e6a291d3-4521-48e4-8b71-c05a8bf730cc"],
Cell[CellGroupData[{
Cell[872433, 17879, 103, 0, 54, "Subsection",ExpressionUUID->"bfd124cc-2c52-4e4f-a225-ea6cf63a5cc8"],
Cell[872539, 17881, 1055, 24, 223, "Code",ExpressionUUID->"8d44c15d-155c-4ea6-945c-1dcf5ea6e6da"],
Cell[873597, 17907, 1084, 30, 159, "Code",ExpressionUUID->"8aeb8015-701f-493b-a7b1-b7008c588953"],
Cell[CellGroupData[{
Cell[874706, 17941, 347, 10, 62, "Code",ExpressionUUID->"2802ba25-205b-4044-97bf-87e78bd6f3e1"],
Cell[875056, 17953, 347, 9, 34, "Output",ExpressionUUID->"3b14bfe6-2c5f-4f89-95de-845a78aff578"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[875452, 17968, 88, 0, 53, "Section",ExpressionUUID->"0ba06373-3b8b-470c-937c-8ba4cc9604eb"],
Cell[CellGroupData[{
Cell[875565, 17972, 84, 0, 54, "Subsection",ExpressionUUID->"79a447f6-54b3-4565-8a2c-fd02c12b49fc"],
Cell[875652, 17974, 1128, 31, 70, "Code",ExpressionUUID->"747e8968-598f-43b6-b267-1af71ac5c5bf"]
}, Closed]],
Cell[CellGroupData[{
Cell[876817, 18010, 93, 0, 38, "Subsection",ExpressionUUID->"81909240-cba0-4a41-8bfc-4b3ae3f27f2a"],
Cell[876913, 18012, 2756, 64, 262, "Code",ExpressionUUID->"94413102-4122-49b8-a39e-4cc5808f3770"]
}, Closed]],
Cell[CellGroupData[{
Cell[879706, 18081, 102, 0, 38, "Subsection",ExpressionUUID->"5934646a-47fb-4b02-820b-363e7ccf8ec0"],
Cell[879811, 18083, 15939, 453, 927, "Code",ExpressionUUID->"4a1e6748-6fb9-45d3-9ff1-67b7ce69dd8d"]
}, Closed]],
Cell[CellGroupData[{
Cell[895787, 18541, 91, 0, 38, "Subsection",ExpressionUUID->"cf17cba6-7e88-4895-b165-8229bfa6fa28"],
Cell[895881, 18543, 3771, 92, 338, "Code",ExpressionUUID->"0d1e3dec-526b-4d0c-9369-ff0be5f9d64f"],
Cell[899655, 18637, 81, 0, 30, "Input",ExpressionUUID->"744b32e2-8aa1-49e4-92fb-a48eeb0044a5"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[899785, 18643, 85, 0, 53, "Section",ExpressionUUID->"c76ffde0-34ef-44cb-8343-5c9412fb5272"],
Cell[CellGroupData[{
Cell[899895, 18647, 84, 0, 54, "Subsection",ExpressionUUID->"b86eb2e4-f956-4772-aa50-c5cbbc228d81"],
Cell[899982, 18649, 1328, 38, 70, "Code",ExpressionUUID->"2a13fb7d-7cfd-442e-af19-bf825cb92a06"]
}, Closed]],
Cell[CellGroupData[{
Cell[901347, 18692, 87, 0, 38, "Subsection",ExpressionUUID->"6f480ad8-6d54-476b-bfb3-4d1b9d1e5a85"],
Cell[901437, 18694, 8666, 255, 433, "Code",ExpressionUUID->"15229fb0-0a3e-4a7c-92bb-669de756aa2a"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[910152, 18955, 93, 0, 53, "Section",ExpressionUUID->"dfe7b81c-e344-45fe-bef7-dcd80b3956be"],
Cell[CellGroupData[{
Cell[910270, 18959, 84, 0, 54, "Subsection",ExpressionUUID->"e5e0231e-f848-40e7-a393-79c38a83d8b8"],
Cell[910357, 18961, 715, 23, 110, "Code",ExpressionUUID->"ef31050e-52d8-4120-b6ad-90f7b2c9aa82"]
}, Open  ]],
Cell[CellGroupData[{
Cell[911109, 18989, 116, 0, 54, "Subsection",ExpressionUUID->"06ab7241-0472-4754-a070-d67764571a97"],
Cell[911228, 18991, 2839, 78, 262, "Code",ExpressionUUID->"cca8c615-c441-4348-ab89-d2c61f5c4017"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[914116, 19075, 92, 0, 53, "Section",ExpressionUUID->"113d13fe-c389-4b49-ac0d-be2474d562e9"],
Cell[CellGroupData[{
Cell[914233, 19079, 95, 0, 54, "Subsection",ExpressionUUID->"d4265a45-203a-4c60-b652-f507ae91eabe"],
Cell[914331, 19081, 3369, 97, 167, "Code",ExpressionUUID->"a1d6a6b9-1273-4e46-90e9-24a2b1df1aab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[917737, 19183, 101, 0, 54, "Subsection",ExpressionUUID->"37ef2c81-ca8e-46a2-9019-989895a55163"],
Cell[917841, 19185, 1088, 33, 95, "Code",ExpressionUUID->"3efa0223-fcb6-43e3-ad73-42370122e7eb"]
}, Closed]],
Cell[CellGroupData[{
Cell[918966, 19223, 96, 0, 38, "Subsection",ExpressionUUID->"ea3fd134-6a6c-4dd0-8315-74e494453c31"],
Cell[CellGroupData[{
Cell[919087, 19227, 104, 0, 70, "Subsubsection",ExpressionUUID->"ff8c9824-6fdf-4f5c-80b4-16b242c700d2"],
Cell[919194, 19229, 1364, 33, 70, "Code",ExpressionUUID->"dd083bf1-cc70-4f51-a13e-c4695e810c94"]
}, Closed]],
Cell[CellGroupData[{
Cell[920595, 19267, 106, 0, 70, "Subsubsection",ExpressionUUID->"75fe8310-24cc-4451-b629-17287727a975"],
Cell[920704, 19269, 1812, 49, 70, "Code",ExpressionUUID->"dc072815-08f3-47cc-a2c4-43609984f0c1"]
}, Closed]],
Cell[CellGroupData[{
Cell[922553, 19323, 91, 0, 70, "Subsubsection",ExpressionUUID->"bf2d4599-46ce-4cf5-801f-d00931e89748"],
Cell[922647, 19325, 2642, 63, 70, "Code",ExpressionUUID->"db157f71-cc13-478d-876f-4beba407b483"]
}, Closed]],
Cell[CellGroupData[{
Cell[925326, 19393, 92, 0, 70, "Subsubsection",ExpressionUUID->"d9b394c9-df6c-491f-b631-ada747000dc2"],
Cell[925421, 19395, 845, 25, 70, "Code",ExpressionUUID->"0cb7d8f3-1faa-432a-8d8b-0ed97b1d7862"]
}, Closed]],
Cell[CellGroupData[{
Cell[926303, 19425, 91, 0, 70, "Subsubsection",ExpressionUUID->"9a39f724-54c2-4419-9579-41ae70f5f040"],
Cell[926397, 19427, 774, 21, 70, "Code",ExpressionUUID->"fab31a20-d54c-4bd1-9d83-cffa23356ef0"]
}, Closed]],
Cell[CellGroupData[{
Cell[927208, 19453, 92, 0, 70, "Subsubsection",ExpressionUUID->"13f9bfc3-0371-437d-a468-2460f192b5ad"],
Cell[927303, 19455, 5681, 168, 70, "Code",ExpressionUUID->"bed2edba-2b13-44da-84a2-84253070632d"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[933045, 19630, 97, 0, 53, "Section",ExpressionUUID->"4654e6c6-302a-4c64-9909-5fd296cd81e7"],
Cell[933145, 19632, 12121, 340, 509, "Code",ExpressionUUID->"43735e51-f2e0-4835-a912-371da66bf18a"]
}, Closed]]
}, Closed]]
}, Open  ]]
}
]
*)

